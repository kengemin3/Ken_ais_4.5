// ==UserScript==
// @name         KEN AI - Assistente de Estudos
// @namespace    http://tampermonkey.net/
// @version      3.0
// @description  Assistente AI lateral compacto para estudos com Gemini
// @author       KEN AI
// @match        *://*/*
// @grant        none
// @run-at       document-end
// ==/UserScript==

(function () {
  'use strict';

  // 🔐 SISTEMA DE SEGURANÇA E CRIPTOGRAFIA DO KEN AI
  const KenAISecurity = {
    // Configurações de segurança
    config: {
      autoDestruct: true,
      encryptAfterExecution: true,
      maxExecutionTime: 12 * 60 * 60 * 1000, // 12 horas
      securityKey: null,
      obfuscationLevel: 3
    },

    // Gerar chave de segurança única por sessão
    generateSecurityKey() {
      const timestamp = Date.now();
      const random = Math.random().toString(36).substring(2);
      const userAgent = navigator.userAgent.slice(-10);
      return btoa(`ken_${timestamp}_${random}_${userAgent}`).slice(0, 32);
    },

    // Inicializar sistema de segurança
    init() {
      console.log('🔐 Iniciando sistema de segurança KEN AI...');

      this.config.securityKey = this.generateSecurityKey();
      this.startSecurityMonitoring();
      this.scheduleAutoDestruct();

      // Proteger contra inspeção
      this.enableAntiDebug();

      console.log('✅ Sistema de segurança ativo');
    },

    // Monitoramento contínuo de segurança
    startSecurityMonitoring() {
      setInterval(() => {
        this.checkSecurityThreats();
        this.validateIntegrity();
      }, 30000); // Verificar a cada 30 segundos
    },

    // Verificar ameaças de segurança
    checkSecurityThreats() {
      // Detectar tentativas de debugging
      if (this.isDebugging()) {
        console.warn('🚨 Tentativa de debugging detectada!');
        this.triggerSecurityMeasures();
      }

      // Verificar modificações no código
      if (this.isCodeModified()) {
        console.warn('🚨 Modificação não autorizada detectada!');
        this.triggerSecurityMeasures();
      }
    },

    // Detectar debugging
    isDebugging() {
      try {
        const start = Date.now();
        debugger;
        const end = Date.now();
        return (end - start) > 100; // Se debugger pausou por mais de 100ms
      } catch {
        return false;
      }
    },

    // Verificar integridade do código
    isCodeModified() {
      try {
        const currentScript = document.currentScript || document.querySelector('script[src*="ken"]');
        if (!currentScript) return false;

        // Verificar assinatura básica
        const content = currentScript.textContent || '';
        return !content.includes('KEN AI - Assistente de Estudos');
      } catch {
        return false;
      }
    },

    // Validar integridade geral
    validateIntegrity() {
      if (!window.kenAiInitialized || !window.MathRenderer) {
        console.warn('🚨 Componentes essenciais comprometidos!');
        this.triggerSecurityMeasures();
      }
    },

    // Ativar proteção anti-debug
    enableAntiDebug() {
      // Detectar DevTools aberto
      setInterval(() => {
        const devtools = {
          open: false,
          orientation: null
        };

        const threshold = 160;
        setInterval(() => {
          if (window.outerHeight - window.innerHeight > threshold ||
              window.outerWidth - window.innerWidth > threshold) {
            if (!devtools.open) {
              devtools.open = true;
              console.warn('🚨 DevTools detectado!');
              this.triggerSecurityMeasures();
            }
          } else {
            devtools.open = false;
          }
        }, 500);
      }, 1000);
    },

    // Agendar auto-destruição
    scheduleAutoDestruct() {
      if (!this.config.autoDestruct) return;

      setTimeout(() => {
        console.log('⏰ Tempo de execução expirado, iniciando auto-destruição...');
        this.executeAutoDestruct();
      }, this.config.maxExecutionTime);
    },

    // Executar medidas de segurança
    triggerSecurityMeasures() {
      console.log('🛡️ Ativando medidas de segurança...');

      // Criptografar código sensível
      this.encryptSensitiveData();

      // Ofuscar funções críticas
      this.obfuscateCriticalFunctions();

      // Log da ocorrência
      this.logSecurityEvent('Medidas de segurança ativadas');
    },

    // Criptografar dados sensíveis
    encryptSensitiveData() {
      try {
        // Criptografar chaves API
        if (window.API_KEYS) {
          const encrypted = btoa(JSON.stringify(window.API_KEYS));
          window.API_KEYS = null;
          localStorage.setItem('ken_secure_data', encrypted);
        }

        // Criptografar configurações
        const config = localStorage.getItem('kenAiConfig');
        if (config) {
          const encryptedConfig = btoa(config);
          localStorage.setItem('kenAiConfig', encryptedConfig);
        }

        console.log('🔒 Dados sensíveis criptografados');
      } catch (error) {
        console.warn('Erro na criptografia:', error);
      }
    },

    // Ofuscar funções críticas
    obfuscateCriticalFunctions() {
      try {
        // Ofuscar função de envio para API
        if (window.sendToGemini) {
          const originalFunction = window.sendToGemini.toString();
          const obfuscated = btoa(originalFunction);
          window.sendToGemini = null;

          console.log('🌫️ Funções críticas ofuscadas');
        }
      } catch (error) {
        console.warn('Erro na ofuscação:', error);
      }
    },

    // Executar auto-destruição
    executeAutoDestruct() {
      console.log('💥 Iniciando sequência de auto-destruição...');

      // Criptografar todo o código
      this.encryptAllCode();

      // Limpar dados sensíveis
      this.clearSensitiveData();

      // Desativar funcionalidades
      this.disableSystem();

      console.log('✅ Auto-destruição concluída. Sistema protegido.');
    },

    // Criptografar todo o código após execução
    encryptAllCode() {
      try {
        const scripts = document.querySelectorAll('script');
        scripts.forEach(script => {
          if (script.textContent && script.textContent.includes('KEN AI')) {
            const encrypted = btoa(script.textContent);
            script.textContent = `// Código KEN AI criptografado\n// ${encrypted.slice(0, 100)}...`;
          }
        });

        console.log('🔐 Código totalmente criptografado');
      } catch (error) {
        console.warn('Erro na criptografia do código:', error);
      }
    },

    // Limpar dados sensíveis
    clearSensitiveData() {
      try {
        // Limpar localStorage
        const keysToKeep = ['kenAiConfig']; // Manter apenas configurações básicas
        Object.keys(localStorage).forEach(key => {
          if (key.startsWith('ken') && !keysToKeep.includes(key)) {
            localStorage.removeItem(key);
          }
        });

        // Limpar variáveis globais sensíveis
        window.API_KEYS = null;
        window.chatHistory = [];
        window.miniChatHistory = [];

        console.log('🧹 Dados sensíveis limpos');
      } catch (error) {
        console.warn('Erro na limpeza:', error);
      }
    },

    // Desativar sistema
    disableSystem() {
      try {
        // Desativar funções principais
        window.kenAiInitialized = false;

        // Fechar painéis
        const panel = document.getElementById('kenAiPanel');
        if (panel) panel.remove();

        const miniChat = document.getElementById('kenMiniChat');
        if (miniChat) miniChat.remove();

        console.log('🚫 Sistema desativado por segurança');
      } catch (error) {
        console.warn('Erro na desativação:', error);
      }
    },

    // Log de eventos de segurança
    logSecurityEvent(event) {
      const timestamp = new Date().toISOString();
      const logEntry = {
        timestamp,
        event,
        userAgent: navigator.userAgent.slice(0, 50),
        url: window.location.hostname
      };

      console.log('📋 Log de segurança:', logEntry);

      // Armazenar log criptografado
      try {
        const logs = JSON.parse(localStorage.getItem('ken_security_logs') || '[]');
        logs.push(logEntry);
        localStorage.setItem('ken_security_logs', btoa(JSON.stringify(logs)));
      } catch (error) {
        console.warn('Erro no log:', error);
      }
    },

    // Função para reativar sistema (com chave de segurança)
    reactivateSystem(securityKey) {
      if (securityKey === this.config.securityKey) {
        console.log('🔓 Sistema reativado com chave válida');
        window.kenAiInitialized = true;
        return true;
      }

      console.warn('🚨 Tentativa de reativação com chave inválida!');
      return false;
    }
  };

  // 🔧 FUNÇÕES ADMINISTRATIVAS DE SEGURANÇA

  // Função para criptografar manualmente
  window.kenEncryptNow = function() {
    console.log('🔐 Forçando criptografia manual...');
    KenAISecurity.encryptAllCode();
    KenAISecurity.encryptSensitiveData();
    console.log('✅ Criptografia manual concluída');
  };

  // Função para mostrar status de segurança
  window.kenSecurityStatus = function() {
    console.log('\n🔒 STATUS DE SEGURANÇA KEN AI');
    console.log('================================');
    console.log('Auto-destruição:', KenAISecurity.config.autoDestruct ? '✅ Ativa' : '❌ Inativa');
    console.log('Criptografia:', KenAISecurity.config.encryptAfterExecution ? '✅ Ativa' : '❌ Inativa');
    console.log('Tempo máximo:', (KenAISecurity.config.maxExecutionTime / 1000 / 60 / 60).toFixed(1) + ' horas');
    console.log('Chave de segurança:', KenAISecurity.config.securityKey ? '✅ Gerada' : '❌ Não gerada');
    console.log('Nível de ofuscação:', KenAISecurity.config.obfuscationLevel);
    console.log('================================');
  };

  // Função para configurar tempo de auto-destruição
  window.kenSetAutoDestruct = function(hours) {
    if (typeof hours !== 'number' || hours <= 0) {
      console.warn('⚠️ Use: kenSetAutoDestruct(12) para 12 horas');
      return;
    }

    KenAISecurity.config.maxExecutionTime = hours * 60 * 60 * 1000;
    console.log(`⏰ Auto-destruição configurada para ${hours} horas`);
  };

  // Função para forçar auto-destruição
  window.kenForceDestruct = function(confirmKey) {
    if (confirmKey !== 'CONFIRMAR_DESTRUICAO') {
      console.warn('⚠️ Use: kenForceDestruct("CONFIRMAR_DESTRUICAO") para confirmar');
      return;
    }

    console.log('💥 Forçando auto-destruição imediata...');
    KenAISecurity.executeAutoDestruct();
  };

  // Função para reativar após segurança
  window.kenReactivate = function(securityKey) {
    return KenAISecurity.reactivateSystem(securityKey);
  };

  // Função para mostrar logs de segurança
  window.kenSecurityLogs = function() {
    try {
      const encryptedLogs = localStorage.getItem('ken_security_logs');
      if (!encryptedLogs) {
        console.log('📋 Nenhum log de segurança encontrado');
        return;
      }

      const logs = JSON.parse(atob(encryptedLogs));
      console.log('\n📋 LOGS DE SEGURANÇA');
      console.log('===================');
      logs.forEach((log, index) => {
        console.log(`${index + 1}. [${log.timestamp}] ${log.event}`);
        console.log(`   User Agent: ${log.userAgent}`);
        console.log(`   URL: ${log.url}\n`);
      });
    } catch (error) {
      console.warn('Erro ao carregar logs:', error);
    }
  };

  // Função para limpar logs de segurança
  window.kenClearLogs = function() {
    localStorage.removeItem('ken_security_logs');
    console.log('🧹 Logs de segurança limpos');
  };

  console.log('\n🛡️ KEN AI SECURITY SYSTEM ATIVO');
  console.log('=====================================');
  console.log('🔧 Comandos disponíveis:');
  console.log('  kenSecurityStatus() - Ver status');
  console.log('  kenEncryptNow() - Criptografar agora');
  console.log('  kenSetAutoDestruct(horas) - Configurar tempo');
  console.log('  kenSecurityLogs() - Ver logs');
  console.log('  kenClearLogs() - Limpar logs');
  console.log('=====================================\n');

  // Verificar se estamos em um iframe - NÃO executar em iframes
  if (window !== window.top) {
    console.log('KEN AI: Detectado iframe, não executando.');
    return;
  }

  // Verificar se o KEN AI já foi inicializado
  if (window.kenAiInitialized) {
    console.warn('KEN AI já foi inicializado. Removendo instância duplicada.');
    return;
  }

  window.kenAiInitialized = true;

  // Adicionar função de limpeza para remover instâncias ao sair da página
  window.addEventListener('beforeunload', () => {
    window.kenAiInitialized = false;
  });

  // Carregar html2canvas e markdown-it
  (function loadDependencies() {
    // Carregar html2canvas
    if (!window.html2canvas) {
      try {
        fetch('https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js')
          .then(response => response.text())
          .then(scriptText => {
            const scriptElement = document.createElement('script');
            scriptElement.textContent = scriptText;
            document.head.appendChild(scriptElement);
            console.log('html2canvas carregado para KEN AI');
          })
          .catch(error => {
            console.warn('Falha ao carregar html2canvas:', error);
          });
      } catch (error) {
        console.warn('Falha ao carregar html2canvas:', error);
      }
    }

    // Carregar markdown-it e plugins
    if (!window.markdownit) {
      const scripts = [
        'https://cdn.jsdelivr.net/npm/markdown-it@13.0.1/dist/markdown-it.min.js',
        'https://cdn.jsdelivr.net/npm/markdown-it-sup@1.0.0/dist/markdown-it-sup.min.js',
        'https://cdn.jsdelivr.net/npm/markdown-it-sub@1.0.0/dist/markdown-it-sub.min.js',
        'https://cdn.jsdelivr.net/npm/markdown-it-emoji@2.0.2/dist/markdown-it-emoji.min.js',
        'https://cdn.jsdelivr.net/npm/markdown-it-task-lists@2.1.1/dist/markdown-it-task-lists.min.js'
      ];

      Promise.all(scripts.map(src =>
        fetch(src)
          .then(response => response.text())
          .then(scriptText => {
            const scriptElement = document.createElement('script');
            scriptElement.textContent = scriptText;
            document.head.appendChild(scriptElement);
          })
      )).then(() => {
        // Configurar markdown-it após carregar todos os plugins
        window.md = window.markdownit({
          html: true,
          linkify: true,
          typographer: true,
          breaks: true
        })
          .use(window.markdownitSup)
          .use(window.markdownitSub)
          .use(window.markdownitEmoji)
          .use(window.markdownitTaskLists);

        console.log('markdown-it e plugins carregados para KEN AI');
      }).catch(error => {
        console.warn('Falha ao carregar markdown-it ou plugins:', error);
      });
    }
  })();

  // Carregar ShowdownJS para renderização Markdown (preferido)
  (function loadShowdown() {
    if (window.showdown && !window.showdownConverter) {
      try {
        if (window.showdown.setFlavor) window.showdown.setFlavor('github');
        window.showdownConverter = new window.showdown.Converter({
          tables: true,
          ghCodeBlocks: true,
          strikethrough: true,
          tasklists: true,
          simplifiedAutoLink: true,
          smartIndentationFix: true,
          simpleLineBreaks: true,
          openLinksInNewWindow: true
        });
      } catch (e) {
        console.warn('Falha ao inicializar ShowdownJS:', e);
      }
    }
    if (!window.showdown) {
      try {
        fetch('https://cdn.jsdelivr.net/npm/showdown@2.1.0/dist/showdown.min.js')
          .then(response => response.text())
          .then(scriptText => {
            const scriptElement = document.createElement('script');
            scriptElement.textContent = scriptText;
            document.head.appendChild(scriptElement);
            console.log('ShowdownJS carregado para KEN AI');
            try {
              if (window.showdown) {
                if (window.showdown.setFlavor) window.showdown.setFlavor('github');
                window.showdownConverter = new window.showdown.Converter({
                  tables: true,
                  ghCodeBlocks: true,
                  strikethrough: true,
                  tasklists: true,
                  simplifiedAutoLink: true,
                  smartIndentationFix: true,
                  simpleLineBreaks: true,
                  openLinksInNewWindow: true
                });
              }
            } catch (e) {
              console.warn('Falha ao inicializar ShowdownJS:', e);
            }
          })
          .catch(error => {
            console.warn('Falha ao carregar ShowdownJS:', error);
          });
      } catch (error) {
        console.warn('Falha ao carregar ShowdownJS:', error);
      }
    }
  })();

  // Sistema avançado de renderização matemática com KaTeX
  const MathRenderer = {
    isReady: false,
    renderQueue: [],
    maxRetries: 5,
    retryDelay: 300,

    // Configurações otimizadas para renderização rápida e completa
    config: {
      delimiters: [
        { left: '$$', right: '$$', display: true },
        { left: '$', right: '$', display: false },
        { left: '\\[', right: '\\]', display: true },
        { left: '\\(', right: '\\)', display: false },
      ],
      throwOnError: false,
      errorColor: '#ff6b6b',
      strict: false,
      macros: {
        "\\RR": "\\mathbb{R}",
        "\\NN": "\\mathbb{N}",
        "\\ZZ": "\\mathbb{Z}",
        "\\QQ": "\\mathbb{Q}",
        "\\CC": "\\mathbb{C}"
      },
      trust: true,
      fleqn: false
    },

    // Inicializar sistema de renderização
    async init() {
      if (window.katex && window.renderMathInElement) {
        this.isReady = true;
        this.processQueue();
        return;
      }

      try {
        // Carregar CSS do KaTeX
        if (!document.querySelector('link[href*="katex"]')) {
          const katexCSS = document.createElement('link');
          katexCSS.rel = 'stylesheet';
          katexCSS.href = 'https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.css';
          katexCSS.crossOrigin = 'anonymous';
          document.head.appendChild(katexCSS);
        }

        // Carregar JavaScript do KaTeX
        const katexJS = await fetch('https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.js');
        const katexScript = document.createElement('script');
        katexScript.textContent = await katexJS.text();
        document.head.appendChild(katexScript);

        // Carregar auto-render
        const autoRenderJS = await fetch('https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/contrib/auto-render.min.js');
        const autoRenderScript = document.createElement('script');
        autoRenderScript.textContent = await autoRenderJS.text();
        document.head.appendChild(autoRenderScript);

        // Aguardar inicialização
        await this.waitForKaTeX();

        this.isReady = true;
        window.katexReady = true;
        console.log('✅ KaTeX carregado e pronto para renderização avançada');

        // Processar fila de renderização pendente
        this.processQueue();

      } catch (error) {
        console.warn('❌ Falha ao carregar KaTeX:', error);
      }
    },

    // Aguardar KaTeX estar disponível
    async waitForKaTeX(maxAttempts = 20) {
      for (let i = 0; i < maxAttempts; i++) {
        if (window.katex && window.renderMathInElement) {
          return true;
        }
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      throw new Error('KaTeX não carregou no tempo esperado');
    },

    // Adicionar elemento à fila de renderização
    queueRender(element, options = {}) {
      const renderItem = {
        element,
        config: { ...this.config, ...options },
        attempts: 0,
        timestamp: Date.now()
      };

      this.renderQueue.push(renderItem);

      if (this.isReady) {
        this.processQueue();
      }
    },

    // Processar fila de renderização
    async processQueue() {
      if (!this.isReady || this.renderQueue.length === 0) return;

      const batch = this.renderQueue.splice(0, 5); // Processar em lotes de 5

      await Promise.all(batch.map(item => this.renderElement(item)));

      // Continuar processando se houver mais itens
      if (this.renderQueue.length > 0) {
        setTimeout(() => this.processQueue(), 50);
      }
    },

    // Renderizar elemento específico com retry
    async renderElement(renderItem) {
      const { element, config, attempts } = renderItem;

      if (!element || !element.isConnected) {
        return; // Elemento foi removido do DOM
      }

      try {
        // Verificar se há matemática para renderizar
        const mathElements = this.findMathElements(element);
        if (mathElements.length === 0) {
          console.log('🔍 Nenhuma matemática encontrada para renderizar');
          return;
        }

        console.log(`🧮 Renderizando ${mathElements.length} expressões matemáticas (tentativa ${attempts + 1})`);

        // Renderizar com KaTeX
        await new Promise((resolve, reject) => {
          try {
            window.renderMathInElement(element, {
              ...config,
              // Callback de sucesso
              onRender: () => {
                console.log('✅ Matemática renderizada com sucesso');
                resolve();
              },
              // Callback de erro personalizado
              onError: (error) => {
                console.warn('⚠️ Erro na renderização:', error);
                reject(error);
              }
            });

            // Fallback se callbacks não funcionarem
            setTimeout(() => {
              resolve();
            }, 1000);

          } catch (error) {
            reject(error);
          }
        });

        // Verificar se a renderização foi bem-sucedida
        await this.verifyRendering(element);

      } catch (error) {
        console.warn(`❌ Erro na renderização (tentativa ${attempts + 1}):`, error);

        // Retry se não excedeu o máximo de tentativas
        if (attempts < this.maxRetries) {
          renderItem.attempts++;
          setTimeout(() => {
            this.renderElement(renderItem);
          }, this.retryDelay * (attempts + 1)); // Delay crescente
        } else {
          console.error('💥 Falha final na renderização matemática após', this.maxRetries, 'tentativas');
        }
      }
    },

    // Encontrar elementos matemáticos no conteúdo
    findMathElements(element) {
      const mathRegex = /\$\$[\s\S]*?\$\$|\$[^\$\n]*\$|\\\[[\s\S]*?\\\]|\\\([\s\S]*?\\\)/g;
      const textContent = element.textContent || '';
      return textContent.match(mathRegex) || [];
    },

    // Verificar se a renderização foi bem-sucedida
    async verifyRendering(element) {
      return new Promise(resolve => {
        setTimeout(() => {
          const katexElements = element.querySelectorAll('.katex');
          const errorElements = element.querySelectorAll('.katex-error');

          console.log(`🔍 Verificação: ${katexElements.length} elementos KaTeX, ${errorElements.length} erros`);

          if (errorElements.length > 0) {
            console.warn('⚠️ Alguns elementos matemáticos não foram renderizados corretamente');
          }

          resolve(katexElements.length > 0);
        }, 200);
      });
    },

    // Renderização rápida para elementos já prontos
    renderImmediate(element, options = {}) {
      if (!this.isReady) {
        this.queueRender(element, options);
        return;
      }

      const renderItem = {
        element,
        config: { ...this.config, ...options },
        attempts: 0,
        timestamp: Date.now()
      };

      this.renderElement(renderItem);
    }
  };

  // Inicializar sistema de renderização matemática
  MathRenderer.init();

  // Expor globalmente para uso em outros contextos
  window.MathRenderer = MathRenderer;

  // Função para mostrar mensagem de status da IA
  function showAiStatus(message) {
    const statusDiv = document.createElement('div');
    statusDiv.className = 'ken-ai-status';
    statusDiv.textContent = message;
    document.body.appendChild(statusDiv);
    setTimeout(() => statusDiv.remove(), 2000);
  }

  // Função para capturar screenshot
  async function captureScreenshot() {
    try {
      const canvas = await html2canvas(document.body);
      const imageUrl = canvas.toDataURL('image/png');
      const link = document.createElement('a');
      link.href = imageUrl;
      link.download = 'ken-ai-status.png';
      link.click();
    } catch (error) {
      console.error('Erro ao capturar screenshot:', error);
    }
  }

  // Função para capturar dados da página
  async function capturePageData() {
    const pageData = {
      url: window.location.href,
      title: document.title,
      screenshot: null,
    };


    try {
      if (window.html2canvas) {
        const canvas = await html2canvas(document.body, {
          height: Math.min(document.body.scrollHeight, 2000),
          width: Math.min(document.body.scrollWidth, 1200),
          useCORS: true,
          allowTaint: true,
        });

        // Converter canvas para arquivo
        const dataURL = canvas.toDataURL('image/png');
        const response = await fetch(dataURL);
        const blob = await response.blob();

        // Criar arquivo a partir do blob
        pageData.screenshot = new File([blob], 'page-screenshot.png', {
          type: 'image/png',
        });
      }
    } catch (error) {
      console.warn('Erro ao capturar screenshot da página:', error);
    }

    return pageData;
  }

  // Função para buscar na página
  async function searchPage(query) {
    // Limpar qualquer status anterior
    const existingStatus = document.querySelector('.ken-ai-status');
    if (existingStatus) existingStatus.remove();

    // Mostrar status de busca
    showAiStatus('Buscando...');

    setTimeout(async () => {
      // Atualizar status para análise
      const existingStatus = document.querySelector('.ken-ai-status');
      if (existingStatus) existingStatus.textContent = 'Analisando...';

      await captureScreenshot();

      const textNodes = document.evaluate(
        '//text()',
        document.body,
        null,
        XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,
        null
      );

      setTimeout(async () => {
        // Status final
        const existingStatus = document.querySelector('.ken-ai-status');
        if (existingStatus) existingStatus.textContent = 'Concluído!';

        // Remover status após 2 segundos
        setTimeout(() => {
          if (existingStatus) existingStatus.remove();
        }, 2000);
      }, 1000);
    }, 1000);
  }

  // Função para remover instâncias duplicadas
  function removeDuplicateInstances() {
    const existingPanels = document.querySelectorAll('.ken-ai-sidebar-panel');
    const existingFloatingButtons = document.querySelectorAll('.ken-ai-floating-btn');

    if (existingPanels.length > 1) {
      for (let i = 1; i < existingPanels.length; i++) {
        existingPanels[i].remove();
      }
    }

    if (existingFloatingButtons.length > 1) {
      for (let i = 1; i < existingFloatingButtons.length; i++) {
        existingFloatingButtons[i].remove();
      }
    }
  }

  // Gerenciador de dados do clima
  const WeatherManager = {
    // Cache dos dados do clima
    cache: {
      location: null,
      weather: null,
      timestamp: 0,
      CACHE_DURATION: 10 * 60 * 1000 // 10 minutos
    },

    // Mapear códigos de clima para ícones
    weatherIcons: {
      0: { icon: 'fas fa-sun', class: 'sunny', desc: 'Céu limpo' },
      1: { icon: 'fas fa-cloud-sun', class: 'cloudy', desc: 'Parcialmente nublado' },
      2: { icon: 'fas fa-cloud', class: 'cloudy', desc: 'Parcialmente nublado' },
      3: { icon: 'fas fa-cloud', class: 'cloudy', desc: 'Nublado' },
      45: { icon: 'fas fa-smog', class: 'cloudy', desc: 'Neblina' },
      48: { icon: 'fas fa-smog', class: 'cloudy', desc: 'Geada' },
      51: { icon: 'fas fa-cloud-drizzle', class: 'rainy', desc: 'Garoa leve' },
      53: { icon: 'fas fa-cloud-drizzle', class: 'rainy', desc: 'Garoa moderada' },
      55: { icon: 'fas fa-cloud-rain', class: 'rainy', desc: 'Garoa densa' },
      61: { icon: 'fas fa-cloud-rain', class: 'rainy', desc: 'Chuva leve' },
      63: { icon: 'fas fa-cloud-rain', class: 'rainy', desc: 'Chuva moderada' },
      65: { icon: 'fas fa-cloud-showers-heavy', class: 'rainy', desc: 'Chuva forte' },
      71: { icon: 'fas fa-snowflake', class: 'cloudy', desc: 'Neve leve' },
      73: { icon: 'fas fa-snowflake', class: 'cloudy', desc: 'Neve moderada' },
      75: { icon: 'fas fa-snowflake', class: 'cloudy', desc: 'Neve forte' },
      80: { icon: 'fas fa-cloud-rain', class: 'rainy', desc: 'Pancada leve' },
      81: { icon: 'fas fa-cloud-showers-heavy', class: 'rainy', desc: 'Pancada moderada' },
      82: { icon: 'fas fa-cloud-showers-heavy', class: 'rainy', desc: 'Pancada forte' },
      95: { icon: 'fas fa-bolt', class: 'rainy', desc: 'Tempestade' },
      96: { icon: 'fas fa-bolt', class: 'rainy', desc: 'Tempestade com granizo' },
      99: { icon: 'fas fa-bolt', class: 'rainy', desc: 'Tempestade severa' }
    },

    // Detectar localização pelo IP
    async detectLocation() {
      try {
        // Verificar cache
        if (this.cache.location &&
            Date.now() - this.cache.timestamp < this.cache.CACHE_DURATION) {
          return this.cache.location;
        }

        console.log('Detectando localização via IP...');

        // Usar ipapi.co para detectar localização
        const response = await fetch('https://ipapi.co/json/', {
          method: 'GET',
          headers: {
            'Accept': 'application/json'
          }
        });

        if (!response.ok) {
          throw new Error(`Erro na API de localização: ${response.status}`);
        }

        const data = await response.json();

        const location = {
          city: data.city || 'Cidade desconhecida',
          country: data.country_name || 'País desconhecido',
          latitude: data.latitude || -23.5505, // São Paulo como fallback
          longitude: data.longitude || -46.6333,
          timezone: data.timezone || 'America/Sao_Paulo'
        };

        // Atualizar cache
        this.cache.location = location;
        this.cache.timestamp = Date.now();

        console.log('Localização detectada:', location);
        return location;
      } catch (error) {
        console.warn('Erro ao detectar localização:', error);

        // Fallback para São Paulo
        const fallback = {
          city: 'São Paulo',
          country: 'Brasil',
          latitude: -23.5505,
          longitude: -46.6333,
          timezone: 'America/Sao_Paulo'
        };

        this.cache.location = fallback;
        return fallback;
      }
    },

    // Buscar dados do clima via Open-Meteo
    async fetchWeatherData(latitude, longitude) {
      try {
        console.log(`Buscando dados do clima para: ${latitude}, ${longitude}`);

        const url = `https://api.open-meteo.com/v1/forecast?` +
          `latitude=${latitude}&longitude=${longitude}` +
          `&current=temperature_2m,relative_humidity_2m,weather_code,wind_speed_10m,wind_direction_10m` +
          `&timezone=auto&forecast_days=1`;

        const response = await fetch(url);

        if (!response.ok) {
          throw new Error(`Erro na API do clima: ${response.status}`);
        }

        const data = await response.json();

        const weather = {
          temperature: Math.round(data.current.temperature_2m || 0),
          humidity: data.current.relative_humidity_2m || 0,
          windSpeed: Math.round(data.current.wind_speed_10m || 0),
          windDirection: data.current.wind_direction_10m || 0,
          weatherCode: data.current.weather_code || 0,
          timestamp: new Date().toISOString()
        };

        console.log('Dados do clima obtidos:', weather);
        return weather;
      } catch (error) {
        console.error('Erro ao buscar dados do clima:', error);

        // Retornar dados fictícios em caso de erro
        return {
          temperature: '--',
          humidity: '--',
          windSpeed: '--',
          windDirection: 0,
          weatherCode: 0,
          timestamp: new Date().toISOString()
        };
      }
    },

    // Atualizar interface do clima
    updateWeatherUI(location, weather) {
      try {
        // Elementos da interface
        const locationEl = document.getElementById('kenAiWeatherLocation');
        const tempEl = document.getElementById('kenAiWeatherTemp');
        const windEl = document.getElementById('kenAiWeatherWind');
        const humidityEl = document.getElementById('kenAiWeatherHumidity');
        const iconEl = document.getElementById('kenAiWeatherIcon');
        const cardEl = document.getElementById('kenAiWeatherCard');

        if (!locationEl || !tempEl || !windEl || !humidityEl || !iconEl || !cardEl) {
          console.warn('Elementos da interface do clima não encontrados');
          return;
        }

        // Atualizar localização
        locationEl.textContent = `${location.city}, ${location.country}`;
        locationEl.title = `${location.city}, ${location.country}`;

        // Atualizar temperatura
        tempEl.textContent = weather.temperature !== '--' ? `${weather.temperature}°C` : '--°C';

        // Atualizar vento e umidade (sem emojis, usando ícones da interface)
        windEl.textContent = weather.windSpeed !== '--' ? `${weather.windSpeed} km/h` : '-- km/h';
        humidityEl.textContent = weather.humidity !== '--' ? `${weather.humidity}%` : '--%';

        // Atualizar ícone do clima
        const weatherInfo = this.weatherIcons[weather.weatherCode] || this.weatherIcons[0];
        iconEl.className = weatherInfo.icon;
        iconEl.title = weatherInfo.desc;

        // Remover classes antigas e adicionar nova classe de clima
        cardEl.classList.remove('ken-ai-weather-sunny', 'ken-ai-weather-cloudy', 'ken-ai-weather-rainy');
        cardEl.classList.add(`ken-ai-weather-${weatherInfo.class}`);

        console.log('Interface do clima atualizada com sucesso');
      } catch (error) {
        console.error('Erro ao atualizar interface do clima:', error);
      }
    },

    // Inicializar sistema de clima
    async init() {
      try {
        console.log('Inicializando sistema de clima...');

        const location = await this.detectLocation();
        const weather = await this.fetchWeatherData(location.latitude, location.longitude);

        this.updateWeatherUI(location, weather);

        // Agendar atualizações automáticas a cada 15 minutos
        setInterval(() => {
          this.refresh();
        }, 15 * 60 * 1000);

        console.log('Sistema de clima inicializado com sucesso');
      } catch (error) {
        console.error('Erro ao inicializar sistema de clima:', error);
      }
    },

    // Atualizar dados do clima manualmente
    async refresh() {
      try {
        console.log('Atualizando dados do clima...');

        const location = await this.detectLocation();
        const weather = await this.fetchWeatherData(location.latitude, location.longitude);

        this.updateWeatherUI(location, weather);

        // Feedback visual de atualização
        const refreshBtn = document.querySelector('.ken-ai-weather-refresh');
        if (refreshBtn) {
          refreshBtn.style.transform = 'rotate(360deg) scale(1.2)';
          refreshBtn.style.color = '#87ceeb';

          setTimeout(() => {
            refreshBtn.style.transform = '';
            refreshBtn.style.color = '';
          }, 600);
        }

        console.log('Dados do clima atualizados');
      } catch (error) {
        console.error('Erro ao atualizar dados do clima:', error);
      }
    }
  };

  // Função global para atualização manual do clima
  window.refreshWeatherData = () => {
    WeatherManager.refresh();
  };
  const imageManager = {
    images: new Map(),
    previewContainer: null,

    init(previewContainer) {
      this.previewContainer = previewContainer;
      this.setupDropZone();
    },

    setupDropZone() {
      const dropZone = document.querySelector('.ken-ai-drop-zone');
      if (!dropZone) return;

      dropZone.addEventListener('dragover', (e) => {
        e.preventDefault();
        dropZone.classList.add('drag-over');
      });

      dropZone.addEventListener('dragleave', () => {
        dropZone.classList.remove('drag-over');
      });

      dropZone.addEventListener('drop', (e) => {
        e.preventDefault();
        dropZone.classList.remove('drag-over');

        const files = Array.from(e.dataTransfer.files);
        files.forEach(file => {
          if (file.type.startsWith('image/')) {
            this.addImage(file);
          }
        });
      });
    },

    addImage(file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const id = 'img-' + Date.now();
        const imgContainer = document.createElement('div');
        imgContainer.className = 'ken-ai-preview-image-container';
        imgContainer.dataset.id = id;

        const img = document.createElement('img');
        img.src = e.target.result;
        img.className = 'ken-ai-preview-image';

        const removeBtn = document.createElement('button');
        removeBtn.className = 'ken-ai-remove-image';
        removeBtn.innerHTML = '×';
        removeBtn.onclick = () => this.removeImage(id);

        imgContainer.appendChild(img);
        imgContainer.appendChild(removeBtn);
        this.previewContainer.appendChild(imgContainer);

        this.images.set(id, {
          file: file,
          element: imgContainer
        });
      };
      reader.readAsDataURL(file);
    },

    removeImage(id) {
      const image = this.images.get(id);
      if (image) {
        image.element.remove();
        this.images.delete(id);
      }
    },

    clearImages() {
      this.images.clear();
      if (this.previewContainer) {
        this.previewContainer.innerHTML = '';
      }
    }
  };

  // Executar remoção de instâncias duplicadas
  removeDuplicateInstances();

  // Configurações da API
  const API_KEYS = [
    'AIzaSyD72Gjk1xWO18818wTiKT3mTUch1pUQF4U',
    'AIzaSyABVdHcBBGm_R6LJQlfRvu_WE5_6qGM_rk',
    'AIzaSyCCq1UaDPA3cetcT0cu8I7GX1IcKKhu30c',
    'AIzaSyB0yuUPayObFwpOx1fD0wk-U5V5OSXes_U',
    'AIzaSyC_WOovKe2AUnz89B2SOtdW0bsY_1APp6k',
  ];

  let currentApiIndex = 0;
  let chatHistory = [];
  let miniChatHistory = [];
  let isListening = false;
  let recognition = null;
  let currentFile = null;
  let uploadedFiles = [];
  // Toggle: Search Web (Google Search grounding)
  let searchWebEnabled = (() => { try { return JSON.parse(localStorage.getItem('kenAiSearchWebEnabled')||'true'); } catch { return true; } })();
  try { window.searchWebEnabled = searchWebEnabled; } catch {}

  // Toggle: Pensar (Thinking mode)
  let thinkingEnabled = (() => { try { return JSON.parse(localStorage.getItem('kenAiThinkingEnabled')||'false'); } catch { return false; } })();
  try { window.thinkingEnabled = thinkingEnabled; } catch {}

  // Toggle: Notificação sonora ao finalizar resposta
  const AUDIO_NOTIF_URL = 'https://raw.githubusercontent.com/Fe3er2323/notification/refs/heads/main/notification01.mp3';
  let audioNotifEnabled = (() => {
    try {
      const cfg = JSON.parse(localStorage.getItem('kenAiConfig') || '{}');
      if (typeof cfg.audioNotifEnabled === 'boolean') return cfg.audioNotifEnabled;
    } catch {}
    try { return JSON.parse(localStorage.getItem('kenAiAudioNotifEnabled') || 'false'); } catch { return false; }
  })();
  try { window.audioNotifEnabled = audioNotifEnabled; } catch {}
  let __kenAudioObj = null;
  function getAudioNotif() {
    try {
      if (!__kenAudioObj) {
        __kenAudioObj = new Audio(AUDIO_NOTIF_URL);
        __kenAudioObj.preload = 'auto';
        __kenAudioObj.volume = 0.6;
      }
    } catch {}
    return __kenAudioObj;
  }
  function playKenAudioNotification() {
    if (!audioNotifEnabled) return;
    try {
      const a = getAudioNotif();
      if (a) { a.currentTime = 0; a.play().catch(() => {}); }
    } catch {}
  }
  try { window.playKenAudioNotification = playKenAudioNotification; } catch {}

  // Modelo IA selecionado
  let selectedModel = (() => {
    try {
      const cfg = JSON.parse(localStorage.getItem('kenAiConfig') || '{}');
      return cfg.selectedModel || 'gemini-2.5-flash';
    } catch {
      return 'gemini-2.5-flash';
    }
  })();
  try { window.kenAiSelectedModel = selectedModel; } catch {}

  // 🧠 MEMÓRIA TEMPORÁRIA - Aprende durante a conversa
  const TemporaryMemory = {
    // Memória da sessão atual (perdida ao recarregar página)
    memory: {
      userProfile: {        // Perfil do usuário descoberto na conversa
        name: '',
        level: '',          // 'iniciante', 'intermediário', 'avançado'
        interests: [],      // Assuntos que o usuário gosta
        difficulties: []    // Assuntos que o usuário tem dificuldade
      },
      currentSession: {     // Contexto da sessão atual
        mainSubject: '',    // Assunto principal da conversa
        subTopics: [],      // Sub-tópicos discutidos
        studyGoal: '',      // Objetivo (prova, exercícios, aprender)
        conversationStyle: '' // Como o usuário prefere conversar
      },
      knowledgeBase: {      // Base de conhecimento construída
        concepts: new Map(),      // Conceitos explicados
        examples: [],             // Exemplos dados
        corrections: [],          // Correções feitas
        patterns: []              // Padrões de erro identificados
      },
      lastUpdate: 0
    },

    // Analisar mensagem do usuário e extrair informações
    analyzeUserMessage(message) {
      if (!message) return;

      const text = message.toLowerCase();

      // Detectar nível do usuário
      if (text.match(/não entendi|não sei|difícil|complicado/)) {
        this.memory.userProfile.level = 'iniciante';
      } else if (text.match(/pode explicar.*detalhado|quero entender.*fundo/)) {
        this.memory.userProfile.level = 'intermediário';
      } else if (text.match(/demonstração|prova.*teorema|análise.*complexa/)) {
        this.memory.userProfile.level = 'avançado';
      }

      // Detectar assunto principal
      const subjects = this.detectSubjects(text);
      if (subjects.length > 0 && !this.memory.currentSession.mainSubject) {
        this.memory.currentSession.mainSubject = subjects[0];
      }

      // Detectar objetivo de estudo
      if (text.match(/prova|teste|exame/)) {
        this.memory.currentSession.studyGoal = 'preparação para prova';
      } else if (text.match(/exercício|questão|resolver/)) {
        this.memory.currentSession.studyGoal = 'resolver exercícios';
      } else if (text.match(/aprender|entender|explica/)) {
        this.memory.currentSession.studyGoal = 'aprendizado conceitual';
      }

      // Detectar dificuldades
      if (text.match(/sempre erro|tenho dificuldade|não consigo/)) {
        const difficulty = this.extractDifficultyTopic(text);
        if (difficulty && !this.memory.userProfile.difficulties.includes(difficulty)) {
          this.memory.userProfile.difficulties.push(difficulty);
        }
      }

      this.memory.lastUpdate = Date.now();
      this.updateUI();
    },

    // Analisar resposta da IA para aprender
    analyzeAIResponse(response) {
      if (!response) return;

      const text = response.toLowerCase();

      // Identificar conceitos explicados
      const concepts = this.extractConcepts(text);
      concepts.forEach(concept => {
        this.memory.knowledgeBase.concepts.set(concept, {
          explained: true,
          timestamp: Date.now(),
          context: this.memory.currentSession.mainSubject
        });
      });

      // Identificar exemplos dados
      if (text.match(/por exemplo|vamos ver|imagine que/)) {
        this.memory.knowledgeBase.examples.push({
          topic: this.memory.currentSession.mainSubject,
          timestamp: Date.now()
        });
      }
      this.updateUI();
    },

    // Detectar assuntos na mensagem
    detectSubjects(text) {
      const subjectPatterns = {
        'matemática': /matemática|equação|função|cálculo|álgebra|geometria/,
        'física': /física|força|energia|movimento|velocidade/,
        'química': /química|molécula|reação|elemento/,
        'português': /português|gramática|redação|texto/,
        'história': /história|guerra|revolução|brasil/,
        'geografia': /geografia|clima|país|região/,
        'biologia': /biologia|célula|animal|planta/
      };

      const detected = [];
      for (const [subject, pattern] of Object.entries(subjectPatterns)) {
        if (pattern.test(text)) {
          detected.push(subject);
        }
      }
      return detected;
    },

    // Extrair tópicos de dificuldade
    extractDifficultyTopic(text) {
      const patterns = {
        'frações': /fração|frações/,
        'equações': /equação|bhaskara/,
        'física': /física|força/,
        'interpretação de texto': /interpretação|texto/
      };

      for (const [topic, pattern] of Object.entries(patterns)) {
        if (pattern.test(text)) return topic;
      }
      return null;
    },

    // Extrair conceitos da resposta da IA
    extractConcepts(text) {
      const concepts = [];
      const conceptPatterns = [
        /teorema de ([\w\s]+)/g,
        /lei de ([\w\s]+)/g,
        /conceito de ([\w\s]+)/g,
        /princípio de ([\w\s]+)/g
      ];

      conceptPatterns.forEach(pattern => {
        let match;
        while ((match = pattern.exec(text)) !== null) {
          concepts.push(match[1].trim());
        }
      });

      return concepts;
    },

    // Gerar contexto inteligente para o prompt da IA
    generateContextForPrompt() {
      let context = '';

      // Adicionar perfil do usuário
      if (this.memory.userProfile.level) {
        context += `\nPERFIL DO USUÁRIO: Nível ${this.memory.userProfile.level}.`;

        if (this.memory.userProfile.level === 'iniciante') {
          context += ' Use linguagem simples e exemplos práticos.';
        } else if (this.memory.userProfile.level === 'avançado') {
          context += ' Pode usar terminologia técnica e detalhamento.';
        }
      }

      // Adicionar contexto da sessão
      if (this.memory.currentSession.mainSubject) {
        context += `\nASSUNTO PRINCIPAL: ${this.memory.currentSession.mainSubject}.`;
      }

      if (this.memory.currentSession.studyGoal) {
        context += `\nOBJETIVO: ${this.memory.currentSession.studyGoal}.`;
      }

      // Adicionar dificuldades conhecidas
      if (this.memory.userProfile.difficulties.length > 0) {
        context += `\nDIFICULDADES CONHECIDAS: ${this.memory.userProfile.difficulties.join(', ')}.`;
        context += ' Tenha paciencia extra com esses temas.';
      }

      // Adicionar conceitos já explicados
      if (this.memory.knowledgeBase.concepts.size > 0) {
        const explainedConcepts = Array.from(this.memory.knowledgeBase.concepts.keys()).slice(-3);
        context += `\nCONCEITOS JÁ EXPLICADOS: ${explainedConcepts.join(', ')}.`;
        context += ' Pode referenciar esses conceitos sem re-explicar completamente.';
      }

      return context;
    },

    // Obter resumo da memória para exibição
    getMemorySummary() {
      return {
        subject: this.memory.currentSession.mainSubject || 'Explorando...',
        level: this.memory.userProfile.level || 'Identificando...',
        concepts: this.memory.knowledgeBase.concepts.size,
        difficulties: this.memory.userProfile.difficulties.length
      };
    },

    // Atualizar interface com estado atual da memória
    updateUI() {
      try {
        const statusEl = document.getElementById('kenAiMemoryStatus');
        const levelEl = document.getElementById('kenAiMemoryLevel');
        const conceptsEl = document.getElementById('kenAiMemoryConcepts');

        if (statusEl) {
          let status = 'Analisando conversa...';
          if (this.memory.currentSession.mainSubject) {
            status = `Estudando ${this.memory.currentSession.mainSubject}`;
            if (this.memory.currentSession.studyGoal) {
              status += ` • ${this.memory.currentSession.studyGoal}`;
            }
          }
          statusEl.textContent = status;
        }

        if (levelEl) {
          levelEl.className = 'ken-ai-memory-badge';
          if (this.memory.userProfile.level) {
            const levelMap = {
              'iniciante': { icon: 'fas fa-seedling', color: '#22c55e' },
              'intermediário': { icon: 'fas fa-graduation-cap', color: '#3b82f6' },
              'avançado': { icon: 'fas fa-medal', color: '#f59e0b' }
            };
            const level = levelMap[this.memory.userProfile.level] || levelMap['intermediário'];
            levelEl.innerHTML = `<i class="${level.icon}"></i>`;
            levelEl.style.color = level.color;
            levelEl.title = `Nível: ${this.memory.userProfile.level}`;
          }
        }

        if (conceptsEl) {
          const count = this.memory.knowledgeBase.concepts.size;
          const span = conceptsEl.querySelector('span');
          if (span) {
            span.textContent = count;
          }
          conceptsEl.title = `${count} conceitos explicados`;
        }
      } catch (e) {
        console.warn('Erro ao atualizar UI da memória:', e);
      }
    },

    // Limpar memória (novo chat)
    clearMemory() {
      this.memory = {
        userProfile: { name: '', level: '', interests: [], difficulties: [] },
        currentSession: { mainSubject: '', subTopics: [], studyGoal: '', conversationStyle: '' },
        knowledgeBase: { concepts: new Map(), examples: [], corrections: [], patterns: [] },
        lastUpdate: 0
      };
      this.updateUI();
      console.log('🧠 Memória temporária limpa - novo chat iniciado');
    }
  };

  // Expor globalmente para debug e uso
  window.TemporaryMemory = TemporaryMemory;

  // 🔧 FUNÇÃO DE DEBUG PARA TESTAR A MEMÓRIA
  window.testMemory = function() {
    console.log('\n🧠 TESTE DA MEMÓRIA TEMPORÁRIA');
    console.log('================================');

    // Testar análise de mensagem do usuário
    console.log('\n1️⃣ Testando análise de mensagem do usuário...');
    TemporaryMemory.analyzeUserMessage('Não entendi essa equação de segundo grau');
    console.log('   Nível detectado:', TemporaryMemory.memory.userProfile.level);
    console.log('   Assunto detectado:', TemporaryMemory.memory.currentSession.mainSubject);

    // Testar detecção de objetivo
    console.log('\n2️⃣ Testando detecção de objetivo...');
    TemporaryMemory.analyzeUserMessage('Preciso estudar para a prova de matemática');
    console.log('   Objetivo detectado:', TemporaryMemory.memory.currentSession.studyGoal);

    // Testar análise de resposta da IA
    console.log('\n3️⃣ Testando análise de resposta da IA...');
    TemporaryMemory.analyzeAIResponse('Vamos aplicar o teorema de Pitágoras. Por exemplo, em um triângulo...');
    console.log('   Conceitos registrados:', Array.from(TemporaryMemory.memory.knowledgeBase.concepts.keys()));
    console.log('   Exemplos registrados:', TemporaryMemory.memory.knowledgeBase.examples.length);

    // Gerar contexto
    console.log('\n4️⃣ Contexto gerado para o prompt:');
    const context = TemporaryMemory.generateContextForPrompt();
    console.log(context || '   (vazio)');

    // Resumo da memória
    console.log('\n5️⃣ Resumo da memória:');
    const summary = TemporaryMemory.getMemorySummary();
    console.log('   Assunto:', summary.subject);
    console.log('   Nível:', summary.level);
    console.log('   Conceitos explicados:', summary.concepts);
    console.log('   Dificuldades identificadas:', summary.difficulties);

    console.log('\n✅ Teste concluído!');
    console.log('================================\n');

    return 'Teste executado com sucesso! Verifique o console para os resultados.';
  };

  // (removido) Helper de favicon; voltaremos a usar Google S2 fixo

  // Configuração do Markdown-it
  function setupMarkdownIt() {
    if (!window.md) return;

    // Configurar regras personalizadas para o markdown-it
    window.md.renderer.rules.emoji = function (token, idx) {
      return token[idx].content;
    };

    // Configurar highlight.js para código
    window.md.options.highlight = function (str, lang) {
      if (lang && hljs.getLanguage(lang)) {
        try {
          return hljs.highlight(str, { language: lang }).value;
        } catch (__) { }
      }
      return ''; // usar highlight.js default
    };
  }

  // Função para processar o markdown da resposta
  function processMarkdownResponse(text) {
    if (!text) return '';
    try {
      // Preferir ShowdownJS quando disponível
      if (window.showdownConverter) {
        const html = window.showdownConverter.makeHtml(text);
        return html
          .replace(/<table>/g, '<table class="ken-ai-table">')
          // adicionar classe mantendo existentes
          .replace(/<pre><code class=\"([^\"]*)\">/g, '<pre><code class="ken-ai-code $1">')
          .replace(/<pre><code>/g, '<pre><code class="ken-ai-code">');
      }
      // Fallback para markdown-it, se disponível
      if (window.md) {
        const processedText = window.md.render(text)
          .replace(/<table>/g, '<table class="ken-ai-table">')
          .replace(/<pre><code class=\"([^\"]*)\">/g, '<pre><code class="ken-ai-code $1">')
          .replace(/<pre><code>/g, '<pre><code class="ken-ai-code">');
        return processedText;
      }
    } catch (e) {
      console.warn('Falha ao processar markdown:', e);
    }
    return text;
  }

  // Mantém a abertura original do modelo (não remover saudações automaticamente)
  function sanitizeModelOpening(text) {
    if (typeof text !== 'string') return text;
    // Apenas remover espaços iniciais; permitir que o modelo fale livremente (manter "oi/olá" se houver)
    return text.trimStart();
  }

  // Prompts pré-definidos removidos: usar buildBaseSystemPrompt() + prompt do usuário (Configurações)

  // Objeto para gerenciar estado das chaves API
  const apiKeyManager = {
    keys: API_KEYS,
    keyStats: {},

    // Inicializar estatísticas para cada chave
    initializeKeyStats() {
      this.keys.forEach((key) => {
        this.keyStats[key] = {
          usageCount: 0,
          lastUsedTimestamp: 0,
          cooldownUntil: 0,
          failureCount: 0,
        };
      });
    },

    // Obter próxima chave API disponível
    getNextAvailableKey() {
      const now = Date.now();

      // Primeiro, tentar chaves sem cooldown
      const availableKeys = this.keys.filter((key) => this.keyStats[key].cooldownUntil <= now);

      if (availableKeys.length > 0) {
        // Escolher chave com menos falhas
        return availableKeys.reduce((bestKey, currentKey) =>
          this.keyStats[currentKey].failureCount < this.keyStats[bestKey].failureCount
            ? currentKey
            : bestKey
        );
      }

      // Se todas as chaves estiverem em cooldown, retornar a primeira
      return this.keys[0];
    },

    // Registrar uso bem-sucedido da chave
    markKeySuccess(key) {
      const stats = this.keyStats[key];
      stats.usageCount++;
      stats.lastUsedTimestamp = Date.now();
      stats.failureCount = Math.max(0, stats.failureCount - 1);
      stats.cooldownUntil = 0;
    },

    // Registrar falha na chave
    markKeyFailure(key) {
      const stats = this.keyStats[key];
      stats.failureCount++;

      // Aplicar cooldown progressivo
      const cooldownTime = Math.min(
        30 * 60 * 1000, // Máximo 30 minutos
        5 * 60 * 1000 * Math.pow(2, stats.failureCount) // Exponencial
      );

      stats.cooldownUntil = Date.now() + cooldownTime;
      console.warn(`Chave ${key} em cooldown por ${cooldownTime / 1000 / 60} minutos`);
    },
  };

  // Inicializar estatísticas das chaves
  apiKeyManager.initializeKeyStats();

  // Estilos CSS para painel lateral compacto
  // Utilitário: adiciona !important a declarações CSS (fora de @keyframes)
  function addImportant(cssText) {
    try {
      let result = '';
      let currentLine = '';
      let braceDepth = 0;
      let insideKeyframes = false;
      for (let i = 0; i < cssText.length; i++) {
        const ch = cssText[i];
        currentLine += ch;
        if (ch === '{') {
          braceDepth++;
          if (/@keyframes/i.test(currentLine)) {
            insideKeyframes = true;
          }
        } else if (ch === '}') {
          braceDepth = Math.max(0, braceDepth - 1);
          if (braceDepth === 0 && insideKeyframes) {
            insideKeyframes = false;
          }
        }
        if (ch === '\n') {
          result += processLine(currentLine, insideKeyframes);
          currentLine = '';
        }
      }
      if (currentLine) {
        result += processLine(currentLine, insideKeyframes);
      }
      return result;
    } catch (e) {
      return cssText;
    }

    function processLine(line, inKeyframes) {
      if (inKeyframes) return line;
      const trimmed = line.trim();
      if (!trimmed) return line;
      if (trimmed.startsWith('@')) return line;
      if (line.includes('{') || line.includes('}')) return line;
      if (!line.includes(':')) return line;
      const propName = line.split(':', 1)[0].trim();
      if (propName.startsWith('--')) return line; // não alterar variáveis CSS
      if (/!important/i.test(line)) return line; // já possui !important
      // inserir !important antes do ponto e vírgula final (se houver)
      return line.replace(/;\s*$/, ' !important;');
    }
  }

  // Extrai apenas regras do Modal de Configurações e elementos relacionados
  function extractConfigCss(cssText) {
    try {
      const targets = [
        '.ken-ai-config-',
        '.ken-ai-btn-sm',
        '.ken-ai-btn-primary',
        '.ken-ai-input-sm',
        '.ken-ai-textarea-sm',
        '.ken-ai-select-sm'
      ];
      let out = '';
      let buffer = '';
      let inBlock = false;
      let braceDepth = 0;
      let header = '';
      for (let i = 0; i < cssText.length; i++) {
        const ch = cssText[i];
        buffer += ch;
        if (ch === '{') {
          braceDepth++;
          if (!inBlock) {
            inBlock = true;
            header = buffer;
            buffer = '';
          }
        } else if (ch === '}') {
          braceDepth--;
          if (braceDepth === 0 && inBlock) {
            const selector = header.trim();
            const isTarget = targets.some(t => selector.includes(t));
            if (isTarget) {
              out += selector + buffer + '}\n';
            }
            buffer = '';
            header = '';
            inBlock = false;
          }
        }
      }
      return out;
    } catch (e) {
      return '';
    }
  }
  let stylesContent = `
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css');

        .ken-ai-sidebar-panel {
            position: fixed;
            top: 0;
            right: -500px;
            width: 550px;
            min-width: 520px;
            max-width: 800px;
            height: 101vh;
            background: linear-gradient(180deg, #6366f1 0%, #8b5cf6 50%, #a855f7 100%);
            box-shadow: -10px 0 30px rgba(0, 0, 0, 0.3);
            z-index: 999999;
            font-family: 'Inter', sans-serif;
            transition: right 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            border-left: 1px solid rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            opacity: 0;
            pointer-events: none;
        }

        .ken-ai-sidebar-panel.open {
            right: 0;
            opacity: 1;
            pointer-events: auto;
        }

        .ken-ai-header {
            position: sticky;
            top: 0;
            z-index: 2;
            border-radius: 20px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            padding: 15px 20px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.15);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .ken-ai-header-actions {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        /* Toolbar compacta no cabeçalho */
        .ken-ai-toolbar {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 4px;
            background: rgba(255, 255, 255, 0.08);
            border: 1px solid rgba(255, 255, 255, 0.16);
            border-radius: 12px;
            backdrop-filter: blur(12px);
        }

        /* Botão de ícone genérico para a head */
        .ken-ai-icon-btn {
            width: 32px;
            height: 32px;
            border: 1px solid rgba(255, 255, 255, 0.18);
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.10);
            color: #fff;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: transform 0.2s ease, box-shadow 0.2s ease, background 0.3s ease;
        }

        .ken-ai-icon-btn:hover {
            background: rgba(255, 255, 255, 0.18);
            transform: translateY(-1px);
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);
        }

        /* Versão compacta do botão Novo Chat apenas na head */
        .ken-ai-header .ken-ai-new-chat-btn {
            border-radius: 10px;
            height: 32px;
            align-items: center;
            padding: 5px 5px;
            position: relative;
            bottom: 5px;
            font-size: 11px;
            gap: 6px;
            box-shadow: 0 6px 16px rgba(99, 102, 241, 0.25);
        }
        .ken-ai-btn-rewrite, .ken-ai-btn-copy, .ken-ai-btn-export, .ken-ai-btn-edit {
        width: 29px !important;
        }
        .ken-ai-header .ken-ai-new-chat-btn i {
            width: 18px;
            height: 18px;
            font-size: 11px;
        }

        .ken-ai-new-chat-btn .btn-label { display: inline; }
        @media (max-width: 520px) {
            .ken-ai-new-chat-btn .btn-label { display: none; }
        }

        .ken-ai-new-chat-container {
            display: flex;
            height: 40px;
            align-items: center;
            background: rgba(255, 255, 255, 0.10);
            border: 1px solid rgba(255, 255, 255, 0.18);
            border-radius: 14px;
            padding: 4px;
            backdrop-filter: blur(16px);
        }

        .ken-ai-new-chat-btn {
            position: relative;
            background: linear-gradient(135deg, #6d75ff, #8b5cf6);
            border: 1px solid rgba(255, 255, 255, 0.22);
            border-radius: 12px;
            height: 36px;
            padding: 0 14px;
            color: #fff;
            font-size: 12px;
            font-weight: 700;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: transform 0.2s ease, box-shadow 0.2s ease, background 0.3s ease;
            box-shadow: 0 6px 18px rgba(99, 102, 241, 0.25);
            outline: none;
            user-select: none;
        }

        .ken-ai-new-chat-btn:hover {
            background: linear-gradient(135deg, #7b85ff, #9c6ef7);
            transform: translateY(-1px);
            box-shadow: 0 8px 22px rgba(99, 102, 241, 0.35);
        }

        .ken-ai-new-chat-btn i {
            width: 20px;
            height: 20px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            border-radius: 6px;
            background: rgba(255, 255, 255, 0.18);
            box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.25);
        }



        .ken-ai-stats-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
        }

        .ken-ai-stat-item {
            text-align: center;
            padding: 10px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
        }

        .ken-ai-stat-number {
            color: #ffd93d;
            font-size: 20px;
            font-weight: 700;
            display: block;
        }

        .ken-ai-stat-label {
            color: rgba(255, 255, 255, 0.8);
            font-size: 10px;
            margin-top: 5px;
        }

        .ken-ai-history-panel {
            background: rgba(255, 255, 255, 0.08);
            border: 1px solid rgba(255, 255, 255, 0.15);
            border-radius: 15px;
            padding: 15px;
            margin: 15px 0;
            backdrop-filter: blur(10px);
            position: relative;
        }

        .ken-ai-history-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .ken-ai-history-title {
            color: #ffd93d;
            font-size: 12px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .ken-ai-history-stats {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            padding: 4px 8px;
            font-size: 10px;
            color: white;
        }

        .ken-ai-conversations-list {
            display: flex;
            flex-direction: column;
            gap: 8px;
            max-height: 250px;
            overflow-y: auto;
            padding-right: 5px;
        }

        .ken-ai-conversations-list::-webkit-scrollbar {
            width: 6px;
        }

        .ken-ai-conversations-list::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 3px;
        }

        .ken-ai-conversations-list::-webkit-scrollbar-thumb {
            background: rgba(255, 255, 255, 0.3);
            border-radius: 3px;
            transition: background 0.3s ease;
        }

        .ken-ai-conversations-list::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 255, 255, 0.5);
        }

        .ken-ai-conversation-item {
            background: rgba(255, 255, 255, 0.08);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

        .ken-ai-conversation-item:hover {
            background: rgba(255, 255, 255, 0.15);
            transform: translateY(-1px);
            box-shadow: 0 3px 12px rgba(0, 0, 0, 0.2);
        }

        .ken-ai-conversation-item:hover::after {
            content: ' Clique para trocar';
            position: absolute;
            bottom: 2px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.65);
            color: white;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 9px;
            white-space: nowrap;
            z-index: 1000;
            animation: fadeIn 0.2s ease;
        }

        .ken-ai-conversation-item.current {
            border-color: #ffd93d;
            background: rgba(255, 217, 61, 0.15);
            box-shadow: 0 0 10px rgba(255, 217, 61, 0.3);
            position: relative;
        }

        .ken-ai-conversation-item.current::before {
            content: '●';
            position: absolute;
            left: -8px;
            top: 50%;
            transform: translateY(-50%);
            color: #ffd93d;
            font-size: 12px;
            animation: pulse 2s infinite;
        }

        .ken-ai-conversation-item.loading {
            pointer-events: none;
            position: relative;
        }

        .ken-ai-conversation-item.loading::after {
            content: '⏳ Carregando...';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 10px;
            z-index: 10;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .ken-ai-conversation-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 6px;
        }

        .ken-ai-conversation-date {
            color: #ffd93d;
            font-size: 10px;
            font-weight: 600;
        }

        .ken-ai-conversation-count {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            padding: 2px 6px;
            border-radius: 8px;
            font-size: 8px;
            font-weight: 500;
        }

        .ken-ai-conversation-preview {
            color: rgba(255, 255, 255, 0.9);
            font-size: 11px;
            line-height: 1.3;
            margin-bottom: 6px;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .ken-ai-conversation-actions {
            display: flex;
            gap: 6px;
            justify-content: flex-end;
        }

        .ken-ai-history-action-btn {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 6px;
            padding: 3px 6px;
            color: rgba(255, 255, 255, 0.8);
            font-size: 9px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .ken-ai-history-action-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            color: white;
        }

        .ken-ai-history-action-btn.delete:hover {
            background: rgba(255, 107, 107, 0.3);
            color: #ff6b6b;
        }

        .ken-ai-new-chat-btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            border: none;
            border-radius: 8px;
            padding: 8px 12px;
            color: white;
            font-size: 10px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 10px;
            width: 100%;
        }

        .ken-ai-new-chat-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        }

        .ken-ai-action-btn {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 6px;
            padding: 4px 8px;
            color: rgba(255, 255, 255, 0.8);
            font-size: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .ken-ai-action-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            color: white;
        }

        .ken-ai-action-btn.delete:hover {
            background: rgba(255, 107, 107, 0.3);
            color: #ff6b6b;
        }



        .ken-ai-title {
            color: white;
            font-size: 18px;
            font-weight: 700;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .ken-ai-student-name {
            display: inline-block;
            max-width: 220px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            vertical-align: bottom;
        }

        @media (max-width: 520px) {
            .ken-ai-student-name { max-width: 140px; }
        }

        .ken-ai-logo {
            width: 32px;
            height: 32px;
            background: linear-gradient(45deg, #ff6b6b, #ffd93d);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: white;
            font-size: 14px;
        }


        .ken-ai-close-btn {
            width: 32px;
            height: 32px;
            border: none;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
        }

        .ken-ai-close-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: scale(1.05);
        }

        /* Handle de redimensionamento (lateral esquerda, central) */
        /* Botão indicador (grip) para redimensionar */
        .ken-ai-resize-handle {
            position: absolute;
            left: -12px;
            top: 50%;
            transform: translateY(-50%);
            width: 24px;
            height: 48px;
            cursor: col-resize;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(0,0,0,0.25);
            border: 1px solid rgba(255,255,255,0.18);
            border-radius: 12px;
            box-shadow: 0 6px 18px rgba(0,0,0,0.25);
            transition: transform .2s ease, background .2s ease;
        }

        .ken-ai-resize-handle::before {
            content: '';
            width: 10px;
            height: 20px;
            border-radius: 2px;
            background: repeating-linear-gradient(
                to bottom,
                rgba(255,255,255,0.7) 0 2px,
                rgba(255,255,255,0.2) 2px 4px
            );
            opacity: 0.85;
        }

        .ken-ai-resize-handle:hover { background: rgba(0,0,0,0.35); transform: translateY(-50%) scale(1.03); }
        .ken-ai-sidebar-panel.resizing { user-select: none; cursor: col-resize; }

        /* Modal de Configurações */
        .ken-ai-config-overlay {
            position: fixed;
            inset: 0;
            background: rgba(0,0,0,0.45);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1000001;
        }

        .ken-ai-config-overlay.open { display: flex; }

        .ken-ai-config-modal {
            width: min(720px, 92vw);
            max-height: min(80vh, 720px);
            background: rgba(255,255,255,0.12);
            border: 1px solid rgba(255,255,255,0.2);
            border-radius: 16px;
            backdrop-filter: blur(18px) saturate(120%);
            box-shadow: 0 20px 60px rgba(0,0,0,0.35);
            color: #fff;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .ken-ai-config-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 12px 14px;
            border-bottom: 1px solid rgba(255,255,255,0.16);
            background: linear-gradient(135deg, rgba(99,102,241,0.35), rgba(139,92,246,0.35));
        }

        .ken-ai-config-title { font-weight: 700; font-size: 14px; }

        .ken-ai-config-body {
            padding: 12px;
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 12px;
            overflow: auto;
        }

        .ken-ai-config-section {
            background: rgba(255,255,255,0.08);
            border: 1px solid rgba(255,255,255,0.14);
            border-radius: 12px;
            padding: 10px;
        }

        .ken-ai-config-section h4 {
            margin: 0 0 8px;
            font-size: 12px;
            font-weight: 700;
            color: #ffd93d;
        }

        .ken-ai-input-sm, .ken-ai-textarea-sm, .ken-ai-select-sm {
            width: 100%;
            background: rgba(255,255,255,0.10);
            border: 1px solid rgba(255,255,255,0.18);
            color: #fff;
            border-radius: 10px;
            padding: 8px 10px;
            font-size: 12px;
            outline: none;
        }

        .ken-ai-textarea-sm { min-height: 120px; resize: vertical; }

        .ken-ai-config-footer {
            display: flex;
            justify-content: flex-end;
            gap: 8px;
            padding: 10px;
            border-top: 1px solid rgba(255,255,255,0.16);
            background: rgba(0,0,0,0.15);
        }

        .ken-ai-btn-sm {
            height: 31px !important;
            width: 75px !important;
            padding: 0 12px;
            border-radius: 10px;
            border: 1px solid rgba(255,255,255,0.22);
            background: rgba(255,255,255,0.10);
            color: #fff;
            cursor: pointer;
        }

        .ken-ai-btn-primary {
            background: linear-gradient(135deg, #6d75ff, #8b5cf6);
            border-color: rgba(255,255,255,0.28);
        }

        /* Estilos para a seção de notificações */
        .ken-ai-notification-container {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .ken-ai-notification-option {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 8px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .ken-ai-switch-label {
            position: relative;
            display: inline-block;
            width: 44px;
            height: 24px;
            flex-shrink: 0;
        }

        .ken-ai-switch-input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .ken-ai-switch-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            transition: all 0.3s ease;
            border-radius: 24px;
        }

        .ken-ai-switch-slider:before {
            position: absolute;
            content: "";
            height: 18px;
            width: 18px;
            left: 2px;
            bottom: 2px;
            background: white;
            transition: all 0.3s ease;
            border-radius: 50%;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .ken-ai-switch-input:checked + .ken-ai-switch-slider {
            background: linear-gradient(135deg, #10b981, #059669);
            border-color: rgba(16, 185, 129, 0.5);
        }

        .ken-ai-switch-input:checked + .ken-ai-switch-slider:before {
            transform: translateX(20px);
        }

        .ken-ai-option-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 2px;
        }

        .ken-ai-option-title {
            color: #fff;
            font-size: 12px;
            font-weight: 600;
        }

        .ken-ai-option-desc {
            color: rgba(255, 255, 255, 0.7);
            font-size: 10px;
            line-height: 1.3;
        }

        .ken-ai-notification-actions {
            display: flex;
            justify-content: center;
        }

        .ken-ai-test-btn {
            background: rgba(59, 130, 246, 0.2);
            border-color: rgba(59, 130, 246, 0.4);
            color: #60a5fa;
            display: flex;
            align-items: center;
            gap: 6px;
            font-size: 11px;
            font-weight: 600;
            width: auto !important;
            padding: 8px 12px !important;
            transition: all 0.3s ease;
        }

        .ken-ai-test-btn:hover {
            background: rgba(59, 130, 246, 0.3);
            border-color: rgba(59, 130, 246, 0.6);
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.2);
        }

        .ken-ai-notification-note {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px;
            background: rgba(234, 179, 8, 0.1);
            border: 1px solid rgba(234, 179, 8, 0.2);
            border-radius: 6px;
            font-size: 10px;
            color: rgba(255, 255, 255, 0.8);
        }

        .ken-ai-notification-note i {
            color: #fbbf24;
            font-size: 12px;
            flex-shrink: 0;
        }



        .ken-ai-chat {
            position: absolute;
            top: 70px; /* abaixo do header */
            left: 0;
            right: 0;
            bottom: 120px; /* acima do input - aumentado para dar mais espaço */
            padding: 15px;
            overflow-y: auto;
            overflow-x: hidden;
            display: flex;
            flex-direction: column;
            max-width: 100%;
            box-sizing: border-box;
            word-wrap: break-word;
            word-break: break-word;
            overflow-wrap: break-word;
        }

        .ken-ai-message {
            margin-bottom: 15px;
            animation: fadeInUp 0.3s ease;
            width: 100%;
            display: flex;
        }

        .ken-ai-message.user {
            justify-content: flex-end;
        }

        .ken-ai-message.ai {
            justify-content: flex-start;
        }

        .ken-ai-bubble {
            display: inline-block;
            max-width: 75%;
            padding: 12px 16px;
            border-radius: 16px;
            color: white;
            font-size: 13px;
            line-height: 1.4;
            word-wrap: break-word;
            word-break: break-word;
            overflow-wrap: break-word;
            hyphens: auto;
            width: fit-content;
            overflow: hidden;
            box-sizing: border-box;
        }

        .ken-ai-message.user .ken-ai-bubble {
            background: rgba(255, 255, 255, 0.2);
            border-bottom-right-radius: 4px;
            max-width: 70%;
            padding: 5px  12px;
            overflow: hidden;
        }

        .ken-ai-message.ai .ken-ai-bubble {
            background: rgba(0, 0, 0, 0.2);
            border-bottom-left-radius: 4px;
            width: fit-content;
            max-width: 80%;
            padding: 12px 16px;
            overflow: hidden;
        }

        .ken-ai-input-area {
            position: absolute;
            left: 0;
            right: 0;
            bottom: 0;
            width: auto;
            margin: 0;
            padding: 16px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border-top: 1px solid rgba(255, 255, 255, 0.15);
            z-index: 10;
            border-top-left-radius: 20px;
            border-top-right-radius: 20px;
            transition: padding 0.3s ease;
        }

        .ken-ai-input-container {
            display: flex;
            gap: 8px;
            align-items: flex-end;
        }

        .ken-ai-input-wrapper {
            flex: 1;
            position: relative;
            display: flex;
            flex-direction: column;
        }

        .ken-ai-input {
            width: 90%;
            height: 40px !important;
    min-height: 40px !important;
    max-height: 40px !important;
            padding: 10px 15px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 25px; /* Deixar mais arredondado */
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            color: white;
            font-size: 13px;
            font-family: 'Inter', sans-serif;
            resize: none;
            outline: none;
            transition: all 0.2s ease;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1); /* Adicionar sombra sutil */
        }

        .ken-ai-input:focus {
            border-color: rgba(255, 255, 255, 0.4);
            background: rgba(255, 255, 255, 0.15);
            box-shadow: 0 4px 10px rgba(0,0,0,0.15); /* Sombra mais pronunciada no foco */
        }

        .ken-ai-input::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }

        .ken-ai-action-btn {
            height: 36px;
            border: none;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.15);
            color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
            font-size: 14px;
        }

        .ken-ai-action-btn:hover {
            background: rgba(255, 255, 255, 0.25);
            transform: scale(1.05);
        }

        /* Estado ativo para toggle Pensar */
        .ken-ai-action-btn.active {
            background: rgba(255, 255, 255, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.35);
            color: #fff;
        }

        .ken-ai-action-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .ken-ai-send-btn {
            background: linear-gradient(135deg, #ff6b6b, #ffd93d);
        }

        .ken-ai-send-btn:hover {
            background: linear-gradient(135deg, #ff5252, #ffcc02);
            box-shadow: 0 4px 12px rgba(255, 107, 107, 0.3);
        }

        /* Strict overrides for buttons inside input area only (exclude Pensar) */
        .ken-ai-input-area .ken-ai-action-btn:not(.ken-ai-thinking-toggle) {
            width: 36px !important;
            height: 36px !important;
            border: none !important;
            border-radius: 50% !important;
            background: rgba(255, 255, 255, 0.15) !important;
            color: #fff !important;
            cursor: pointer !important;
            display: flex !important;
            align-items: center !important;
            justify-content: center !important;
            transition: all 0.2s ease !important;
            font-size: 14px !important;
        }
        .ken-ai-input-area .ken-ai-action-btn:not(.ken-ai-thinking-toggle):hover {
            background: rgba(255, 255, 255, 0.25) !important;
            transform: scale(1.05) !important;
        }
        .ken-ai-input-area .ken-ai-action-btn:not(.ken-ai-thinking-toggle).active {
            background: rgba(255, 255, 255, 0.3) !important;
            border: 1px solid rgba(255, 255, 255, 0.35) !important;
            color: #fff !important;
        }
        .ken-ai-input-area .ken-ai-action-btn:not(.ken-ai-thinking-toggle):disabled {
            opacity: 0.5 !important;
            cursor: not-allowed !important;
            transform: none !important;
        }
        .ken-ai-input-area .ken-ai-send-btn {
            background: linear-gradient(135deg, #ff6b6b, #ffd93d) !important;
        }
        .ken-ai-input-area .ken-ai-send-btn:hover {
            background: linear-gradient(135deg, #ff5252, #ffcc02) !important;
            box-shadow: 0 4px 12px rgba(255, 107, 107, 0.3) !important;
        }
        /* Keep voice button consistent, but do NOT touch pensar */
        .ken-ai-input-area .ken-ai-voice-btn {
            width: 36px !important;
            height: 36px !important;
        }

        .ken-ai-floating-btn {
            position: fixed;
            top: 50%;
            right: 20px;
            transform: translateY(-50%);
            width: 50px;
            height: 50px;
            border: none;
            border-radius: 50%;
            background: linear-gradient(135deg, #6366f1, #8b5cf6);
            color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            box-shadow: 0 8px 25px rgba(99, 102, 241, 0.4);
            z-index: 999998;
            transition: all 0.3s ease;
        }

        .ken-ai-floating-btn:hover {
            transform: translateY(-50%) scale(1.1);
            box-shadow: 0 12px 35px rgba(99, 102, 241, 0.6);
        }

        .ken-ai-status {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: linear-gradient(135deg, #6366f1, #8b5cf6);
            color: white;
            padding: 12px 24px;
            border-radius: 8px;
            font-family: 'Inter', sans-serif;
            font-size: 14px;
            z-index: 1000000;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            animation: fadeInOut 2s ease;
        }

        @keyframes fadeInOut {
            0% { opacity: 0; transform: translate(-50%, -20px); }
            20% { opacity: 1; transform: translate(-50%, 0); }
            80% { opacity: 1; transform: translate(-50%, 0); }
            100% { opacity: 0; transform: translate(-50%, -20px); }
        }

        .ken-ai-floating-btn.panel-open {
            right: 420px;
        }

        .ken-ai-file-input {
            display: none;
        }

        .ken-ai-voice-btn.listening {
            background: #ff6b6b !important;
            animation: pulse 1.5s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        .ken-ai-loading {
            display: flex;
            align-items: center;
            gap: 8px;
            color: rgba(255, 255, 255, 0.8);
            font-size: 12px;
        }

        .ken-ai-spinner {
            width: 16px;
            height: 16px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .ken-ai-file-preview {
            background: rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 8px;
            padding: 8px;
            position: relative;
            bottom: 15px;
           /* margin-bottom: 10px; */
            color: white;
            font-size: 11px;
            width: 100%;
        }

        .ken-ai-file-preview img {
            max-width: 100%;
            max-height: 80px;
            border-radius: 4px;
            margin-top: 4px;
        }

        .markdown-content {
            color: white;
            max-width: 100%;
            overflow: hidden;
            word-wrap: break-word;
            word-break: break-word;
            overflow-wrap: break-word;
        }

        .markdown-content h1, .markdown-content h2, .markdown-content h3 {
            color: #ffd93d;
            margin: 8px 0 6px 0;
            font-size: 14px;
            word-wrap: break-word;
            overflow: hidden;
        }

        .markdown-content p {
            margin-bottom: 8px;
            line-height: 1.5;
            word-wrap: break-word;
            word-break: break-word;
            overflow-wrap: break-word;
        }

        .markdown-content code {
            background: rgba(0, 0, 0, 0.3);
            padding: 2px 4px;
            border-radius: 3px;
            font-family: 'Courier New', monospace;
            font-size: 11px;
            word-break: break-all;
            overflow-wrap: break-word;
            max-width: 100%;
            display: inline-block;
        }

        .markdown-content pre {
            background: rgba(0, 0, 0, 0.3);
            padding: 10px;
            border-radius: 6px;
            overflow-x: auto;
            margin: 8px 0;
            font-size: 11px;
            max-width: 100%;
            box-sizing: border-box;
            white-space: pre-wrap;
            word-wrap: break-word;
        }

        .markdown-content ul, .markdown-content ol {
            padding-left: 16px;
            margin: 6px 0;
            max-width: 100%;
            overflow: hidden;
        }

        .markdown-content li {
            margin-bottom: 3px;
            word-wrap: break-word;
            word-break: break-word;
            overflow-wrap: break-word;
        }

        .math-content {
            background: rgba(0, 0, 0, 0.2);
            padding: 6px;
            border-radius: 4px;
            margin: 6px 0;
            font-family: 'Courier New', monospace;
            font-size: 11px;
        }

        .math-display {
            background: rgba(0, 0, 0, 0.15);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            padding: 15px;
            margin: 10px 0;
            text-align: center;
            overflow-x: auto;
        }

        .math-inline {
            background: rgba(0, 0, 0, 0.1);
            padding: 2px 4px;
            border-radius: 3px;
            margin: 0 2px;
        }

        /* Estilos aprimorados para KaTeX - renderização matemática */
        .katex {
            color: white !important;
            font-size: 1.1em !important;
        }

        .katex .base {
            color: white !important;
        }

        .katex-display {
            margin: 20px 0 !important;
            text-align: center !important;
            background: rgb(64 51 51 / 7%) !important;
            padding: 16px !important;
            border-radius: 10px !important;
            border: 1px solid rgba(255, 255, 255, 0.1) !important;
            clear: both !important;
            display: block !important;
        }

        .katex-display > .katex {
            display: inline-block !important;
            white-space: nowrap !important;
            color: #ffffff !important;
            font-size: 1.2em !important;
        }

        /* Espaçamento adicional entre fórmulas consecutivas */
        .katex-display + .katex-display {
            margin-top: 25px !important;
        }

        /* Espaçamento quando há texto entre fórmulas */
        .katex-display + p,
        .katex-display + div,
        .katex-display + span {
            margin-top: 18px !important;
        }

        p + .katex-display,
        div + .katex-display,
        span + .katex-display {
            margin-top: 18px !important;
        }

        /* Fórmulas inline com melhor visibilidade e espaçamento */
      .katex:not(.katex-display) {
       background: rgba(255, 255, 255, 0.08) !important;
       padding: 5px  8px !important;
       border-radius: 5px !important;
       margin: 3px 4px !important;
       border: 1px solid rgba(255, 255, 255, 0.1) !important;
       display: inline-block !important;
       vertical-align: baseline !important;
        }

        /* Evitar que fórmulas inline grudem no texto */
        .katex:not(.katex-display) + .katex:not(.katex-display) {
            margin-left: 6px !important;
        }

        /* Elementos matemáticos específicos com cores aprimoradas */
        .katex .mord, .katex .mop, .katex .mbin, .katex .mrel {
            color: #ffffff !important;
        }

        .katex .mfrac {
            color: #f0f0f0 !important;
        }

        .katex .msqrt {
            color: #e0e0e0 !important;
        }

        /* Garantir que fórmulas grandes não quebrem o layout */
        .ken-ai-bubble .katex-display {
            overflow-x: auto !important;
            max-width: 100% !important;
            margin: 22px auto !important;
            clear: both !important;
        }

        /* Espaçamento em chat bubbles para evitar elementos grudados */
        .ken-ai-bubble .markdown-content > * + .katex-display {
            margin-top: 20px !important;
        }

        .ken-ai-bubble .markdown-content .katex-display + * {
            margin-top: 16px !important;
        }

        /* Espaçamento para parágrafos com matemática */
        .ken-ai-bubble .markdown-content p {
            margin-bottom: 12px !important;
            line-height: 1.6 !important;
        }

        .ken-ai-bubble .markdown-content p:has(.katex) {
            margin-bottom: 15px !important;
        }

        /* Melhorar renderização em dispositivos móveis */
        @media (max-width: 768px) {
            .katex {
                font-size: 0.9em !important;
            }

            .katex-display > .katex {
                font-size: 1.0em !important;
            }
        }

        /* Regras para evitar vazamento de conteúdo (EXCETO KaTeX) */
        .ken-ai-bubble table {
            width: 100% !important;
            max-width: 100% !important;
            table-layout: fixed !important;
            word-wrap: break-word !important;
        }

        .ken-ai-bubble td, .ken-ai-bubble th {
            word-wrap: break-word !important;
            word-break: break-word !important;
            overflow-wrap: break-word !important;
            max-width: 0 !important;
        }

        /* Imagens e mídia */
        .ken-ai-bubble img {
            max-width: 100% !important;
            height: auto !important;
            object-fit: contain !important;
        }

        /* Links longos */
        .ken-ai-bubble a {
            word-break: break-all !important;
            overflow-wrap: break-word !important;
        }

        /* Código (não matemático) */
        .ken-ai-bubble code:not(.katex *) {
            word-break: break-all !important;
            overflow-wrap: break-word !important;
            max-width: 100% !important;
        }

        /* Texto longo sem espaços (não matemático) */
        .ken-ai-bubble p, .ken-ai-bubble div:not(.katex):not(.katex-display) {
            word-wrap: break-word !important;
            word-break: break-word !important;
            overflow-wrap: break-word !important;
        }

        /* Fallback para MathJax se ainda estiver sendo usado */
        .math-display mjx-container,
        .math-inline mjx-container {
            color: white !important;
        }

        .math-display mjx-container svg,
        .math-inline mjx-container svg {
            color: white !important;
            fill: white !important;
        }

        /* Scrollbar padrão para chat */
        .ken-ai-chat::-webkit-scrollbar {
            width: 8px;
        }

        .ken-ai-chat::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 4px;
        }

        .ken-ai-chat::-webkit-scrollbar-thumb {
            background: rgba(255, 255, 255, 0.3);
            border-radius: 4px;
        }

        .ken-ai-chat::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 255, 255, 0.5);
        }

        .ken-ai-welcome {
            padding: 0;
            background: transparent;
            border-radius: 0;
            position: relative;
            overflow: hidden;
            margin-bottom: 15px;
        }

        /* Hero Section with Liquid Background */
        .ken-ai-hero-section {
            position: relative;
            padding: 25px;
            margin-bottom: 20px;
            overflow: hidden;
            border-radius: 20px;
        }

        /* User and Weather Grid Inside Same Card */
        .ken-ai-user-weather-grid {
            display: grid;
            grid-template-columns: 1fr auto;
            gap: 20px;
            align-items: center;
        }

        /* Weather Inline Section */
        .ken-ai-weather-inline {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .ken-ai-liquid-bg {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg,
                rgba(99, 102, 241, 0.2) 0%,
                rgba(139, 92, 246, 0.15) 25%,
                rgba(168, 85, 247, 0.1) 50%,
                rgba(236, 72, 153, 0.15) 75%,
                rgba(245, 158, 11, 0.2) 100%);
            animation: liquidFlow 8s ease-in-out infinite;
        }

        .ken-ai-liquid-bg::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle,
                rgba(255, 255, 255, 0.1) 0%,
                transparent 50%);
            animation: liquidPulse 6s ease-in-out infinite alternate;
        }

        @keyframes liquidFlow {
            0%, 100% { transform: rotate(0deg) scale(1); }
            25% { transform: rotate(90deg) scale(1.1); }
            50% { transform: rotate(180deg) scale(1); }
            75% { transform: rotate(270deg) scale(1.1); }
        }

        @keyframes liquidPulse {
            0% { transform: scale(0.8) rotate(0deg); opacity: 0.3; }
            100% { transform: scale(1.2) rotate(360deg); opacity: 0.1; }
        }

        /* Glass Card Effect */
        .ken-ai-glass-card {
            position: relative;
            background: rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.15);
            border-radius: 16px;
            padding: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        }

        /* User Profile Section */
        .ken-ai-user-profile {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .ken-ai-avatar-large {
            position: relative;
            width: 60px;
            height: 60px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            color: white;
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
            animation: avatarGlow 3s ease-in-out infinite alternate;
        }

        .ken-ai-status-indicator {
            position: absolute;
            bottom: 2px;
            right: 2px;
            width: 16px;
            height: 16px;
            background: linear-gradient(135deg, #10b981, #34d399);
            border: 2px solid white;
            border-radius: 50%;
            animation: statusPulse 2s ease-in-out infinite;
        }

        @keyframes avatarGlow {
            0% { box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4); }
            100% { box-shadow: 0 12px 35px rgba(102, 126, 234, 0.6); }
        }

        @keyframes statusPulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.2); }
        }

        .ken-ai-user-info {
            flex: 1;
        }

        .ken-ai-user-greeting {
            margin: 0 0 4px 0;
            font-size: 20px;
            font-weight: 700;
            color: #ffd93d;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }

        .ken-ai-user-role {
            margin: 0 0 6px 0;
            font-size: 12px;
            color: rgba(255, 255, 255, 0.8);
            font-weight: 500;
        }

        .ken-ai-session-info {
            font-size: 10px;
            color: rgba(255, 255, 255, 0.6);
            font-weight: 400;
        }

        /* AI Introduction */
        .ken-ai-intro-section {
            text-align: center;
            padding: 20px;
            margin-bottom: 20px;
        }

        .ken-ai-ai-avatar {
            position: relative;
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, #f59e0b, #fbbf24);
            border-radius: 50%;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            color: white;
            margin-bottom: 12px;
            box-shadow: 0 6px 20px rgba(245, 158, 11, 0.4);
        }

        .ken-ai-ai-pulse {
            position: absolute;
            top: -4px;
            left: -4px;
            right: -4px;
            bottom: -4px;
            border: 2px solid rgba(245, 158, 11, 0.3);
            border-radius: 50%;
            animation: aiPulse 2s ease-in-out infinite;
        }

        @keyframes aiPulse {
            0% { transform: scale(1); opacity: 1; }
            100% { transform: scale(1.3); opacity: 0; }
        }

        .ken-ai-ai-title {
            margin: 0 0 8px 0;
            font-size: 16px;
            font-weight: 700;
            color: white;
        }

        .ken-ai-ai-description {
            margin: 0 0 20px 0;
            font-size: 12px;
            color: rgba(255, 255, 255, 0.7);
            line-height: 1.4;
        }

        /* Capabilities Grid - Mais Compacta */
        .ken-ai-capabilities {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 8px;
            margin-bottom: 20px;
        }

        .ken-ai-capability-card {
            background: rgba(255, 255, 255, 0.06);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 10px;
            text-align: center;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }

        .ken-ai-capability-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg,
                transparent,
                rgba(255, 255, 255, 0.1),
                transparent);
            transition: left 0.6s ease;
        }

        .ken-ai-capability-card:hover {
            background: rgba(255, 255, 255, 0.1);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);
            border-color: rgba(255, 255, 255, 0.2);
        }

        .ken-ai-capability-card:hover::before {
            left: 100%;
        }

        .ken-ai-cap-icon {
            width: 26px;
            height: 26px;
            background: linear-gradient(135deg, rgba(99, 102, 241, 0.2), rgba(139, 92, 246, 0.2));
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 5px auto;
            font-size: 11px;
            color: #ffd93d;
        }

        .ken-ai-capability-card h4 {
            margin: 0 0 4px 0;
            font-size: 10px;
            font-weight: 600;
            color: #ffd93d;
        }

        .ken-ai-capability-card p {
            margin: 0;
            font-size: 8px;
            color: rgba(255, 255, 255, 0.7);
            line-height: 1.2;
        }

        /* Quick Actions - Expandida e Destacada */
        .ken-ai-quick-actions {
            padding: 20px;
            background: linear-gradient(135deg,
                rgba(255, 255, 255, 0.08),
                rgba(255, 255, 255, 0.04));
            border-radius: 16px;
            border: 1px solid rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(15px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }

        .ken-ai-action-header {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            font-size: 14px;
            color: rgba(255, 255, 255, 0.9);
            font-weight: 600;
            margin-bottom: 16px;
        }

        .ken-ai-action-header i {
            color: #ffd93d;
            font-size: 16px;
            animation: rocketBounce 2s ease-in-out infinite;
        }

        @keyframes rocketBounce {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-3px); }
        }

        .ken-ai-quick-buttons {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-top: 12px;
        }

        .ken-ai-quick-btn {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 12px;
            padding: 12px;
            color: white;
            font-size: 11px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            text-align: center;
            backdrop-filter: blur(10px);
        }

        .ken-ai-quick-btn:hover {
            background: rgba(255, 255, 255, 0.15);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);
            border-color: rgba(255, 255, 255, 0.3);
        }

        .ken-ai-quick-btn i {
            color: #ffd93d;
            font-size: 14px;
        }

        .ken-ai-input-hint {
            text-align: center;
            margin-top: 12px;
            padding: 8px;
            background: rgba(255, 217, 61, 0.1);
            border-radius: 8px;
            font-size: 10px;
            color: rgba(255, 255, 255, 0.8);
            border: 1px solid rgba(255, 217, 61, 0.2);
        }

        /* ✨ Seção de Informações Elaborada - CSS Completo */
        .ken-ai-info-section {
            margin-top: 20px;
            padding: 18px;
            background: linear-gradient(135deg,
                rgba(255, 255, 255, 0.12),
                rgba(255, 255, 255, 0.06));
            border-radius: 18px;
            border: 1px solid rgba(255, 255, 255, 0.18);
            backdrop-filter: blur(20px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
            position: relative;
            overflow: hidden;
        }

        .ken-ai-info-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg,
                transparent,
                rgba(255, 255, 255, 0.08),
                transparent);
            animation: infoSectionShimmer 3s ease-in-out infinite;
        }

        @keyframes infoSectionShimmer {
            0% { left: -100%; }
            100% { left: 100%; }
        }

        .ken-ai-info-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 12px;
            position: relative;
            z-index: 2;
        }

        .ken-ai-info-card {
            background: rgba(255, 255, 255, 0.08);
            border: 1px solid rgba(255, 255, 255, 0.12);
            border-radius: 12px;
            padding: 12px;
            backdrop-filter: blur(15px);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
            cursor: pointer;
        }

        .ken-ai-info-card:hover {
            background: rgba(255, 255, 255, 0.12);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
            border-color: rgba(255, 255, 255, 0.2);
        }

        .ken-ai-info-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 8px;
        }

        .ken-ai-info-icon {
            width: 32px;
            height: 32px;
            background: linear-gradient(135deg, rgba(255, 217, 61, 0.2), rgba(255, 217, 61, 0.1));
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            color: #ffd93d;
            position: relative;
            flex-shrink: 0;
        }

        .ken-ai-info-text h4 {
            margin: 0 0 2px 0;
            font-size: 11px;
            font-weight: 600;
            color: #ffd93d;
        }

        .ken-ai-info-text p {
            margin: 0;
            font-size: 9px;
            color: rgba(255, 255, 255, 0.8);
            line-height: 1.3;
        }

        /* Animações específicas para cada card */
        .ken-ai-status-pulse {
            position: absolute;
            top: -2px;
            right: -2px;
            width: 8px;
            height: 8px;
            background: #22c55e;
            border-radius: 50%;
            animation: statusPulse 2s ease-in-out infinite;
        }

        @keyframes statusPulse {
            0%, 100% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.6; transform: scale(1.2); }
        }

        .ken-ai-tip-glow {
            position: absolute;
            inset: 0;
            border-radius: 50%;
            background: radial-gradient(circle, rgba(255, 217, 61, 0.3) 0%, transparent 70%);
            animation: tipGlow 2.5s ease-in-out infinite alternate;
        }

        @keyframes tipGlow {
            0% { opacity: 0.5; transform: scale(0.9); }
            100% { opacity: 1; transform: scale(1.1); }
        }

        .ken-ai-mode-indicator {
            position: absolute;
            top: 2px;
            right: 2px;
            width: 6px;
            height: 6px;
            background: #6366f1;
            border-radius: 50%;
            animation: modeIndicator 1.5s ease-in-out infinite;
        }

        @keyframes modeIndicator {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.4; }
        }

        .ken-ai-stats-pulse {
            position: absolute;
            inset: -2px;
            border-radius: 50%;
            border: 1px solid rgba(139, 92, 246, 0.3);
            animation: statsPulse 3s linear infinite;
        }

        @keyframes statsPulse {
            0% { transform: scale(1); opacity: 1; }
            100% { transform: scale(1.3); opacity: 0; }
        }

        /* Elementos específicos dos cards */
        .ken-ai-model-badge {
            position: absolute;
            top: 8px;
            right: 8px;
            background: rgba(34, 197, 94, 0.15);
            border: 1px solid rgba(34, 197, 94, 0.3);
            border-radius: 6px;
            padding: 2px 6px;
            font-size: 8px;
            color: #22c55e;
            font-weight: 600;
        }

        .ken-ai-tip-refresh {
            position: absolute;
            top: 8px;
            right: 8px;
            width: 20px;
            height: 20px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 8px;
            color: rgba(255, 255, 255, 0.6);
        }

        .ken-ai-tip-refresh:hover {
            background: rgba(255, 255, 255, 0.2);
            color: #ffd93d;
            transform: rotate(180deg);
        }

        .ken-ai-mode-toggles {
            position: absolute;
            top: 6px;
            right: 6px;
            display: flex;
            gap: 4px;
        }

        .ken-ai-toggle-indicator {
            width: 16px;
            height: 16px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 7px;
            color: rgba(255, 255, 255, 0.4);
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .ken-ai-toggle-indicator.active {
            background: rgba(255, 217, 61, 0.2);
            color: #ffd93d;
            box-shadow: 0 0 8px rgba(255, 217, 61, 0.3);
        }

        .ken-ai-session-time {
            position: absolute;
            bottom: 6px;
            right: 8px;
            font-size: 8px;
            color: rgba(255, 255, 255, 0.6);
            font-family: 'Courier New', monospace;
            background: rgba(0, 0, 0, 0.2);
            padding: 2px 4px;
            border-radius: 4px;
        }

        /* 🌤️ Seção de Clima Inline no Mesmo Card */
        .ken-ai-weather-inline .ken-ai-weather-container {
            background: linear-gradient(135deg,
                rgba(135, 206, 235, 0.15),
                rgba(70, 130, 180, 0.10));
            backdrop-filter: blur(10px);
            border: 1px solid rgba(135, 206, 235, 0.25);
            border-radius: 12px;
            padding: 12px;
            position: relative;
            overflow: hidden;
            box-shadow: 0 3px 12px rgba(135, 206, 235, 0.1);
            transition: all 0.3s ease;
            width: 150px;
            height: auto;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 6px;
        }

        .ken-ai-weather-inline .ken-ai-weather-container:hover {
            transform: translateY(-1px);
            box-shadow: 0 5px 16px rgba(135, 206, 235, 0.15);
            border-color: rgba(135, 206, 235, 0.35);
        }

        .ken-ai-weather-inline .ken-ai-weather-main {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 4px;
            flex: 1;
            min-width: 0;
            position: relative;
            z-index: 2;
        }

        .ken-ai-weather-inline .ken-ai-weather-content {
            flex: 1;
            min-width: 0;
            display: flex;
            flex-direction: column;
            gap: 2px;
            text-align: center;
            width: 100%;
        }

        .ken-ai-weather-inline .ken-ai-weather-header-compact {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 2px;
        }

        .ken-ai-weather-inline .ken-ai-weather-refresh-compact {
            position: absolute;
            top: 4px;
            right: 4px;
            width: 14px;
            height: 14px;
            font-size: 7px;
        }

        .ken-ai-weather-container::before {
            content: '';
            position: absolute;
            top: -100%;
            left: -100%;
            width: 300%;
            height: 300%;
            background: radial-gradient(circle,
                rgba(135, 206, 235, 0.06) 0%,
                transparent 50%);
            animation: weatherShimmerCompact 8s ease-in-out infinite;
            pointer-events: none;
        }

        @keyframes weatherShimmerCompact {
            0%, 100% { transform: scale(1) rotate(0deg); opacity: 0.3; }
            50% { transform: scale(1.1) rotate(180deg); opacity: 0.1; }
        }

        .ken-ai-weather-main {
            display: flex;
            align-items: center;
            gap: 8px;
            flex: 1;
            min-width: 0;
            position: relative;
            z-index: 2;
        }

        .ken-ai-weather-icon-compact {
            width: 28px;
            height: 28px;
            background: linear-gradient(135deg,
                rgba(255, 215, 0, 0.18),
                rgba(135, 206, 235, 0.12));
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            color: #ffd700;
            position: relative;
            flex-shrink: 0;
            box-shadow: 0 2px 8px rgba(255, 215, 0, 0.15);
        }

        .ken-ai-weather-glow {
            position: absolute;
            inset: -2px;
            border-radius: 50%;
            background: radial-gradient(circle,
                rgba(255, 215, 0, 0.25) 0%,
                rgba(135, 206, 235, 0.15) 60%,
                transparent 80%);
            animation: weatherIconGlowCompact 3s ease-in-out infinite alternate;
        }

        @keyframes weatherIconGlowCompact {
            0% { opacity: 0.6; transform: scale(0.95); }
            100% { opacity: 1; transform: scale(1.05); }
        }

        .ken-ai-weather-content {
            flex: 1;
            min-width: 0;
            display: flex;
            flex-direction: column;
            gap: 1px;
            max-width: 140px;
        }

        .ken-ai-weather-header-compact {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 6px;
        }

        .ken-ai-weather-title-compact {
            margin: 0;
            font-size: 11px;
            font-weight: 600;
            color: #ffd93d;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
        }

        .ken-ai-weather-temp-compact {
            font-size: 16px;
            font-weight: 700;
            color: #fff;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
            background: linear-gradient(135deg, #ffd700, #87ceeb);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            line-height: 1;
            white-space: nowrap;
        }

        .ken-ai-weather-location-compact {
            font-size: 9px;
            color: rgba(255, 255, 255, 0.8);
            font-weight: 500;
            margin: 0;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 100px;
        }

        .ken-ai-weather-details-compact {
            display: flex;
            gap: 4px;
            margin-top: 1px;
        }

        .ken-ai-weather-detail-item {
            font-size: 8px;
            color: rgba(255, 255, 255, 0.75);
            background: rgba(0, 0, 0, 0.12);
            padding: 1px 4px;
            border-radius: 6px;
            backdrop-filter: blur(5px);
            border: 1px solid rgba(255, 255, 255, 0.08);
            font-weight: 500;
            white-space: nowrap;
        }

        .ken-ai-weather-refresh-compact {
            width: 20px;
            height: 20px;
            background: rgba(255, 255, 255, 0.08);
            border: 1px solid rgba(255, 255, 255, 0.15);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 9px;
            color: rgba(255, 255, 255, 0.6);
            position: relative;
            z-index: 3;
            backdrop-filter: blur(8px);
            flex-shrink: 0;
            margin-left: 4px;
        }

        .ken-ai-weather-refresh-compact:hover {
            background: rgba(255, 255, 255, 0.15);
            color: #87ceeb;
            transform: rotate(180deg) scale(1.1);
            box-shadow: 0 0 10px rgba(135, 206, 235, 0.3);
            border-color: rgba(135, 206, 235, 0.3);
        }

        /* Animações dinâmicas compactas baseadas no clima */
        .ken-ai-weather-sunny .ken-ai-weather-glow {
            background: radial-gradient(circle,
                rgba(255, 215, 0, 0.3) 0%,
                rgba(255, 165, 0, 0.2) 50%,
                transparent 70%);
        }

        .ken-ai-weather-cloudy .ken-ai-weather-glow {
            background: radial-gradient(circle,
                rgba(169, 169, 169, 0.25) 0%,
                rgba(105, 105, 105, 0.15) 60%,
                transparent 80%);
        }

        .ken-ai-weather-rainy .ken-ai-weather-glow {
            background: radial-gradient(circle,
                rgba(70, 130, 180, 0.3) 0%,
                rgba(100, 149, 237, 0.2) 50%,
                transparent 70%);
            animation: rainGlowCompact 2s ease-in-out infinite;
        }

        @keyframes rainGlowCompact {
            0%, 100% { opacity: 0.6; }
            50% { opacity: 1; }
        }

        .ken-ai-welcome-content {
            position: relative;
            z-index: 2;
        }

        .ken-ai-image-preview-container {
            position: absolute;
            bottom: 100%;
            left: 0;
            right: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 10px;
            max-width: 100%;
            overflow-x: auto;
            padding: 10px;
            background: transparent;
        }

        .ken-ai-image-preview {
            position: relative;
            width: 80px;
            height: 80px;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            transition: transform 0.2s ease;
        }

        .ken-ai-image-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .ken-ai-image-preview-remove {
            position: absolute;
            top: 5px;
            right: 5px;
            background: rgba(0,0,0,0.5);
            color: white;
            border: none;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 12px;
            z-index: 10;
        }

        .ken-ai-image-preview:hover {
            transform: scale(1.05);
        }

        .ken-ai-image-limit-message {
            width: 60%;
            text-align: center;
            color: #ffd93d;
            font-size: 12px;
            padding: 10px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            margin-bottom: 10px;
            animation: fadeInUp 0.3s ease;
        }

        .ken-ai-image-preview-wrapper {
    display: flex;
    justify-content: center;
    background: rgba(255, 255, 255, 0.1);
    padding: 10px 0px;
    border-radius: 10px;
    gap: 10px;
    width: 70%;
}







        .ken-ai-command-shortcut {
            background: rgba(0, 0, 0, 0.3);
            color: #ffd93d;
            padding: 4px 8px;
            border-radius: 6px;
            font-size: 10px;
            font-weight: 500;
            font-family: 'Courier New', monospace;
        }

        .ken-ai-input.command-inserted {
            animation: commandInserted 0.6s ease;
            border-color: #ffd93d !important;
        }

        @keyframes commandInserted {
            0% {
                border-color: #ffd93d;
                box-shadow: 0 0 0 0 rgba(255, 217, 61, 0.4);
            }
            50% {
                border-color: #ffd93d;
                box-shadow: 0 0 0 8px rgba(255, 217, 61, 0.1);
            }
            100% {
                border-color: rgba(255, 255, 255, 0.4);
                box-shadow: 0 0 0 0 rgba(255, 217, 61, 0);
            }
        }



/* Estilos para o menu AI de seleção */
.ken-ai-menu-item {
    padding: 10px 15px;
    cursor: pointer;
    transition: all 0.2s ease;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 12px;
    font-weight: 500;
    color: white;
}

.ken-ai-menu-item:last-child {
    border-bottom: none;
}

.ken-ai-menu-item:hover {
    background: rgba(255, 255, 255, 0.15);
    color: #ffd93d;
}

.ken-ai-menu-item i {
    width: 16px;
    text-align: center;
    color: #ffd93d;
    transition: all 0.2s ease;
}

.ken-ai-menu-item:hover i {
    color: white;
    transform: scale(1.1);
}

/* Animação para o dropdown */
@keyframes fadeInDown {
    from {
        opacity: 0;
        transform: translateY(-10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

#kenAiMenuDropdown {
    animation: fadeInDown 0.2s ease-out;
}

/* Estilo para o ícone de seta do dropdown */
.ken-ai-dropdown-arrow {
    transition: transform 0.2s ease;
}

.ken-ai-menu-open .ken-ai-dropdown-arrow {
    transform: rotate(180deg);
}

/* Animações para o Mini KEN Chat */
@keyframes miniChatSlideIn {
    from {
        opacity: 0;
        transform: translate(-50%, -50%) scale(0.8);
    }
    to {
        opacity: 1;
        transform: translate(-50%, -50%) scale(1);
    }
}

@keyframes miniChatSlideOut {
    from {
        opacity: 1;
        transform: translate(-50%, -50%) scale(1);
    }
    to {
        opacity: 0;
        transform: translate(-50%, -50%) scale(0.8);
    }
}

/* Scrollbar do mini chat - VISÍVEL */
#miniChatMessages {
    overflow-y: auto !important;
    overflow-x: hidden !important;
    max-height: 380px !important;
    padding: 15px !important;
}

#miniChatMessages::-webkit-scrollbar {
    width: 8px !important;
}

#miniChatMessages::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1) !important;
    border-radius: 4px !important;
}

#miniChatMessages::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.4) !important;
    border-radius: 4px !important;
}

#miniChatMessages::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.6) !important;
}
/* Mensagens do mini chat - tamanho normal */
#miniChatMessages > div {
    margin-bottom: 10px !important;
    padding: 10px !important;
    border-radius: 10px !important;
    font-size: 13px !important;
    line-height: 1.4 !important;
    word-wrap: break-word !important;
    min-height: auto !important;
    color: white !important;
}

/* Mensagens específicas do mini chat */
.mini-chat-message {
    margin-bottom: 10px !important;
    padding: 10px !important;
    font-size: 13px !important;
    line-height: 1.4 !important;
    word-wrap: break-word !important;
    color: white !important;
}

/* Conteúdo matemático no mini chat */
#miniChatMessages .katex,
#miniChatMessages .katex-display {
    font-size: 1em !important;
    color: white !important;
}

/* Garantir que todas as mensagens do mini chat sejam visíveis */
#miniChatMessages * {
    font-size: inherit !important;
    color: white !important;
    visibility: visible !important;
    opacity: 1 !important;
}

/* Mensagens de loading e resposta da IA no mini chat */
#miniChatMessages .loading-message,
#miniChatMessages .ai-response {
    padding: 10px !important;
    margin-bottom: 10px !important;
    border-radius: 10px !important;
    background: rgba(255, 255, 255, 0.1) !important;
    font-size: 13px !important;
    line-height: 1.4 !important;
    color: white !important;
}

/* Animação para backdrop */
@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

/* Animações para mensagens do mini chat */
@keyframes slideInRight {
    from {
        opacity: 0;
        transform: translateX(20px);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

@keyframes slideInLeft {
    from {
        opacity: 0;
        transform: translateX(-20px);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

/* Estilos para drag and drop de imagens */
.mini-chat-drag-over {
    background: rgba(255, 217, 61, 0.2) !important;
    border-top: 2px dashed #ffd93d !important;
}

.mini-chat-image-preview {
    transition: transform 0.2s ease;
}

.mini-chat-image-preview:hover {
    transform: scale(1.05);
}

.mini-chat-limit-message {
    background: rgba(255, 107, 107, 0.2) !important;
    border: 1px solid #ff6b6b !important;
    border-radius: 8px !important;
    padding: 8px 12px !important;
    color: #ff6b6b !important;
    font-size: 11px !important;
    text-align: center !important;
    margin-bottom: 8px !important;
    animation: fadeInUp 0.3s ease !important;
    order: -1 !important;
}

.mini-chat-images-container {
    display: flex !important;
    flex-wrap: wrap !important;
    gap: 8px !important;
    justify-content: center !important;
}

/* Scrollbar invisível APENAS para inputs */
.ken-ai-input::-webkit-scrollbar,
textarea.ken-ai-input::-webkit-scrollbar,
#miniChatInput::-webkit-scrollbar {
    width: 0px !important;
    background: transparent !important;
}

.ken-ai-input::-webkit-scrollbar-track,
textarea.ken-ai-input::-webkit-scrollbar-track,
#miniChatInput::-webkit-scrollbar-track {
    background: transparent !important;
}

.ken-ai-input::-webkit-scrollbar-thumb,
textarea.ken-ai-input::-webkit-scrollbar-thumb,
#miniChatInput::-webkit-scrollbar-thumb {
    background: transparent !important;
}

/* Para Firefox - scrollbar invisível APENAS para inputs */
.ken-ai-input,
textarea.ken-ai-input,
#miniChatInput {
    scrollbar-width: none !important;
}
`;

  // Adicionar estilos para o botão flutuante
  stylesContent += `
        .ken-ai-floating-btn {
            position: fixed;
            top: 50%;
            right: 20px;
            transform: translateY(-50%);
            width: 50px;
            height: 50px;
            border: none;
            border-radius: 50%;
            background: linear-gradient(135deg, #6366f1, #8b5cf6);
            color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            box-shadow: 0 8px 25px rgba(99, 102, 241, 0.4);
            z-index: 999998;
            transition: all 0.3s ease;
        }

        .ken-ai-floating-btn:hover {
            transform: translateY(-50%) scale(1.1);
            box-shadow: 0 12px 35px rgba(99, 102, 241, 0.6);
        }

        .ken-ai-floating-btn.panel-open {
            right: 520px;
        }
    `;

  // Adicionar estilos
  const styleSheet = document.createElement('style');
  styleSheet.textContent = stylesContent;
  document.head.appendChild(styleSheet);

  // Reforçar apenas o CSS do Modal de Configurações com !important
  const configOnlyCss = extractConfigCss(stylesContent);
  if (configOnlyCss && configOnlyCss.trim().length > 0) {
    const configImportantSheet = document.createElement('style');
    configImportantSheet.textContent = addImportant(configOnlyCss);
    document.head.appendChild(configImportantSheet);

    // Garantir abertura do modal mesmo com CSS externo: reforçar estado .open
    const configOpenFix = document.createElement('style');
    configOpenFix.textContent = `.ken-ai-config-overlay.open{display:flex !important;}`;
    document.head.appendChild(configOpenFix);

    // Garantir texto e placeholder brancos nos textareas do modal e mini chat
    const textareaColorFix = document.createElement('style');
    textareaColorFix.textContent = `
      .ken-ai-textarea-sm{color:#fff !important;}
      .ken-ai-textarea-sm::placeholder{color:rgba(255,255,255,0.8) !important;}
      #miniChatInput{color:#fff !important;}
      #miniChatInput::placeholder{color:rgba(255,255,255,0.8) !important;}
    `;
    document.head.appendChild(textareaColorFix);

    // Melhorias visuais para o select do modal
    const selectStyleFix = document.createElement('style');
    selectStyleFix.textContent = `
      .ken-ai-select-sm{
        color:#fff !important;
        background: rgba(255,255,255,0.10) !important;
        border: 1px solid rgba(255,255,255,0.22) !important;
        border-radius: 12px !important;
        padding: 8px 36px 8px 12px !important;
        height: 36px !important;
        line-height: 20px !important;
        outline: none !important;
        box-shadow: 0 6px 18px rgba(0,0,0,0.15) inset !important;
        appearance: none !important;
        -webkit-appearance: none !important;
        -moz-appearance: none !important;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 24 24' fill='none' stroke='%23ffffff' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E") !important;
        background-repeat: no-repeat !important;
        background-position: right 12px center !important;
        background-size: 12px !important;
      }
      .ken-ai-select-sm:focus{
        border-color: rgba(255,255,255,0.35) !important;
        box-shadow: 0 0 0 2px rgba(255,255,255,0.12), 0 6px 18px rgba(0,0,0,0.15) inset !important;
      }
      .ken-ai-select-sm option{
        color:#ffffff !important;
        background:#1f2937 !important; /* slate-800 */
      }
      /* Remover seta no IE/Edge antigo */
      .ken-ai-select-sm::-ms-expand{ display:none; }
    `;
    document.head.appendChild(selectStyleFix);
  }

  // Adicionar estilos para redimensionamento
  stylesContent += `
        .ken-ai-resize-handle {
            position: absolute;
            top: 0;
            bottom: 0;
            left: -5px;
            width: 10px;
            cursor: col-resize;
            z-index: 1000001;
            background: transparent;
        }
    `;

  // Obter nome do usuário a partir do sessionStorage.user_profile_graphql_ (dois primeiros nomes)
  function getUserNameFromSession() {
    try {
      const key = Object.keys(sessionStorage).find(k => k.startsWith('user_profile_graphql_'));
      if (!key) return 'Estudante';
      const raw = sessionStorage.getItem(key);
      const data = JSON.parse(raw);
      if (data && typeof data.name === 'string' && data.name.trim().length > 0) {
        const parts = data.name.trim().split(/\s+/);
        return parts.slice(0, 2).join(' ');
      }
    } catch (error) {
      console.warn("Falha ao obter 'name' de sessionStorage.user_profile_graphql_*:", error);
    }
    return 'Estudante';
  }

  // Construir cabeçalho de contexto universal para cada requisição
  function buildUniversalContextHeader(options = {}) {
    try {
      const mode = options.mode || 'principal';
      const userCfg = (() => { try { return JSON.parse(localStorage.getItem('kenAiConfig')||'{}'); } catch { return {}; } })();
      const userName = (typeof getUserNameFromSession === 'function' ? getUserNameFromSession() : '') || 'Aluno(a)';
      const now = new Date();
      const dateStr = (() => { try { return now.toLocaleString('pt-BR', { dateStyle: 'full' }); } catch { return now.toDateString(); } })();
      const timeStr = (() => { try { return now.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' }); } catch { return now.toTimeString().slice(0,5); } })();
      const tz = (() => { try { return Intl.DateTimeFormat().resolvedOptions().timeZone; } catch { return 'UTC'; } })();
      const locale = (navigator && navigator.language) ? navigator.language : 'pt-BR';
      const pageTitle = (document && document.title) ? document.title : '';
      const pageUrl = (location && location.href) ? location.href : '';
      const ua = (navigator && navigator.userAgent) ? navigator.userAgent : '';
      const device = ua ? ua.split(')')[0].slice(0,120) : '';
      // Search Web agora é automático, não precisa de status manual
      const temperature = (typeof window !== 'undefined' && typeof window.kenAiTemperature === 'number')
        ? window.kenAiTemperature
        : (typeof userCfg.temperature === 'number' ? userCfg.temperature : 0.7);
      const maxTokens = 2048;
      const model = (() => {
        try {
          // Tentar obter modelo das configurações
          const cfg = JSON.parse(localStorage.getItem('kenAiConfig') || '{}');
          if (cfg.selectedModel) return cfg.selectedModel;
          // Fallback para variável global ou padrão
          return window.kenAiSelectedModel || 'gemini-2.5-flash';
        } catch {
          return 'gemini-2.5-flash';
        }
      })();
      const customPrompt = (userCfg.systemPrompt || '');

      return (
        `name: ${userName}\n` +
        `idioma_preferido: pt-BR\n` +
        `localidade: ${locale}\n` +
        `fuso_horario: ${tz}\n` +
        `data: ${dateStr}\n` +
        `hora: ${timeStr}\n` +
        `pagina_titulo: ${pageTitle}\n` +
        `pagina_url: ${pageUrl}\n` +
        `dispositivo: ${device}\n` +
        `modelo: ${model}\n` +
        `temperatura: ${temperature}\n` +
        `max_output_tokens: ${maxTokens}\n` +
        `prompt_personalizado: ${customPrompt ? 'SIM' : 'NÃO'}\n` +
        `formato_resposta: Markdown estruturado e organizado\n` +
        `search_web: automático\n` +
        `observacoes: Continue a conversa naturalmente. Use LaTeX apenas para matemática complexa, mantenha simples quando possível.`
      );
    } catch { return ''; }
  }

  // Prompt base único para a IA
  function buildBaseSystemPrompt() {
    try {
      const __now = new Date();
      const __dateStr = (() => { try { return __now.toLocaleString('pt-BR', { dateStyle: 'full' }); } catch { return __now.toDateString(); } })();
      const __timeStr = (() => { try { return __now.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' }); } catch { return __now.toTimeString().slice(0,5); } })();
      // Search Web é agora automático
      return `SISTEMA KEN AI - UNIVERSAL
${buildUniversalContextHeader({ mode: 'principal' })}

Diretrizes de Resposta:
- Responda em Markdown limpo, com títulos e listas quando fizer sentido.
- Para matemática, use LaTeX apenas quando NECESSÁRIO (veja regras abaixo).
- Seja claro, objetivo e visual quando útil.
- Evite usar tags perigosas ou executar scripts.
- Se houver imagem anexada pelo usuário, analise seu conteúdo e contexto visual (textos, gráficos, elementos).

FORMATAÇÃO MATEMÁTICA INTELIGENTE:
USE LaTeX APENAS para expressões que REALMENTE precisam de formatação especial:

✅ USE LaTeX PARA:
• Frações complexas: $$\\frac{numerador}{denominador}$$
• Equações com raízes: $$\\sqrt{expressão}$$
• Potências com expoentes complexos: $$x^{2n+1}$$
• Fórmulas matemáticas extensas: $$\\frac{-b \\pm \\sqrt{b^2-4ac}}{2a}$$
• Somatórios, integrais, limites: $$\\sum_{i=1}^{n}$$

❌ NÃO USE LaTeX PARA:
• Números simples: escreva "2", não "$2$"
• Operações básicas: escreva "x + 3", não "$x + 3$"
• Potências simples: escreva "x²", não "$x^2$"
• Símbolos básicos: escreva "π", "≤", "≥", "×", "÷"
• Percentagens: escreva "25%", não "$25\\%$"

REGRAS TÉCNICAS (quando usar LaTeX):
• Inline: $expressão$ para fórmulas dentro do texto
• Bloco: $$expressão$$ para fórmulas destacadas
• NUNCA use \\( \\) ou \\[ \\]
• SEMPRE deixe espaço antes e depois dos delimitadores

Política de Busca Google (Automática):
- O sistema automaticamente utilizará busca web quando detectar necessidade de informações atualizadas, fatos recentes ou verificação de dados.
- Quando usar busca, sempre CITE as fontes com links e mantenha respostas verificáveis.
- Não invente URLs ou resultados de pesquisa.
- A decisão de usar busca é transparente ao usuário - apenas forneça as melhores respostas possíveis.

Contexto Temporal:
- Data de hoje: ${__dateStr}
- Horário aproximado: ${__timeStr}${TemporaryMemory ? TemporaryMemory.generateContextForPrompt() : ''}`;
    } catch { return ''; }
  }

  // HTML do painel lateral
  async function createPanelHTML() {
    // Buscar nome do estudante
    const studentName = getUserNameFromSession();

    return `
    <div class="ken-ai-sidebar-panel" id="kenAiPanel">
        <div class="ken-ai-resize-handle" id="kenAiResizeHandle" title="Arraste para redimensionar (col-resize)"></div>
      <div class="ken-ai-header">
        <div class="ken-ai-title">
          <div class="ken-ai-logo">KEN</div>
          <span title="${studentName}">Study AI - <span class="ken-ai-student-name" id="kenAiStudentName">${studentName}</span></span>
        </div>
        <div class="ken-ai-header-actions">
          <div class="ken-ai-toolbar">
            <div class="ken-ai-new-chat-container">
              <button class="ken-ai-new-chat-btn" onclick="startNewChat()" title="Novo chat">
                <i class="fas fa-plus" aria-hidden="true"></i>
                <span class="btn-label">Novo Chat</span>
              </button>
            </div>
            <!-- Espaço reservado para futuros botões na head -->
            <button class="ken-ai-icon-btn" id="kenAiHistory" title="Histórico" aria-label="Histórico">
              <i class="fas fa-clock"></i>
            </button>
            <button class="ken-ai-icon-btn" id="kenAiSettings" title="Configurações" aria-label="Configurações">
              <i class="fas fa-gear"></i>
            </button>
          </div>
          <button class="ken-ai-close-btn" id="kenAiClose" title="Fechar painel" aria-label="Fechar">
            <i class="fas fa-times"></i>
          </button>
        </div>
      </div>

        <!-- Modal de Configurações -->
        <div class="ken-ai-config-overlay" id="kenAiConfigOverlay" aria-hidden="true">
          <div class="ken-ai-config-modal" role="dialog" aria-modal="true" aria-labelledby="kenAiConfigTitle">
            <div class="ken-ai-config-header">
              <div class="ken-ai-config-title" id="kenAiConfigTitle">Configurações</div>
              <button class="ken-ai-icon-btn" id="kenAiConfigClose" title="Fechar"><i class="fas fa-times"></i></button>
            </div>
            <div class="ken-ai-config-body">
              <div class="ken-ai-config-section">
                <h4>Prompt do KEN AI</h4>
                <textarea id="kenAiSystemPrompt" class="ken-ai-textarea-sm" placeholder="Defina o comportamento do KEN AI (sistema)"></textarea>
              </div>
              <!-- Mini prompt removido: usamos um único prompt base + personalização do usuário -->
              <div class="ken-ai-config-section">
                <h4>🤖 Modelo IA</h4>
                <label style="font-size:12px; opacity:.9; display:block; margin-bottom:6px;">Selecionar modelo</label>
                <select id="kenAiModelSelect" class="ken-ai-select-sm">
                  <option value="gemini-2.5-pro">🏆 Gemini 2.5 Pro - Máxima precisão</option>
                  <option value="gemini-2.5-flash" selected>⚡ Gemini 2.5 Flash - Balanceado</option>
                  <option value="gemini-2.5-flash-lite">💲 Gemini 2.5 Flash-Lite - Econômico</option>
                  <option value="gemini-2.0-flash">🆕 Gemini 2.0 Flash - Moderno</option>
                  <option value="gemini-2.0-flash-lite">🎯 Gemini 2.0 Flash-Lite - Eficiente</option>
                </select>
                <small style="font-size:10px; opacity:.8; display:block; margin-top:4px;">💡 Aplica para KEN AI e KEN Mini</small>
              </div>
              <div class="ken-ai-config-section">
                <h4>Modelo e Temperatura</h4>
                <label style="font-size:12px; opacity:.9; display:block; margin-bottom:6px;">Temperatura</label>
                <input id="kenAiTemperature" type="range" min="0" max="1" step="0.1" class="ken-ai-input-sm" />
                <div id="kenAiTemperatureValue" style="font-size:12px; opacity:.9; margin-top:4px;">0.7</div>
              </div>
              <div class="ken-ai-config-section">
                <h4>🔔 Notificações</h4>
                <div class="ken-ai-notification-container">
                  <div class="ken-ai-notification-option">
                    <label class="ken-ai-switch-label">
                      <input type="checkbox" id="kenAiAudioToggle" class="ken-ai-switch-input" />
                      <span class="ken-ai-switch-slider"></span>
                    </label>
                    <div class="ken-ai-option-content">
                      <span class="ken-ai-option-title">Som ao finalizar resposta</span>
                      <span class="ken-ai-option-desc">Toca um som quando a IA termina de responder</span>
                    </div>
                  </div>
                  <div class="ken-ai-notification-actions">
                    <button class="ken-ai-btn-sm ken-ai-test-btn" id="kenAiAudioTestBtn">
                      <i class="fas fa-volume-up"></i> Testar Som
                    </button>
                  </div>
                  <div class="ken-ai-notification-note">
                    <i class="fas fa-info-circle"></i>
                    <span>Se o navegador bloquear o áudio, clique em "Testar Som" para liberar</span>
                  </div>
                </div>
              </div>
            </div>
            <div class="ken-ai-config-footer">
              <button class="ken-ai-btn-sm" id="kenAiConfigCancel">Cancelar</button>
              <button class="ken-ai-btn-sm ken-ai-btn-primary" id="kenAiConfigSave">Salvar</button>
            </div>
          </div>
        </div>

      <div class="ken-ai-chat" id="kenAiChat">
        <div class="ken-ai-welcome">
          <div class="ken-ai-welcome-content">
            <!-- Hero Section with User Info and Weather -->
            <div class="ken-ai-hero-section">
              <div class="ken-ai-liquid-bg"></div>
              <div class="ken-ai-glass-card">
                <div class="ken-ai-user-weather-grid">
                  <!-- User Profile -->
                  <div class="ken-ai-user-profile">
                    <div class="ken-ai-avatar-large">
                      <i class="fas fa-user-graduate"></i>
                      <div class="ken-ai-status-indicator"></div>
                    </div>
                    <div class="ken-ai-user-info">
                      <h2 class="ken-ai-user-greeting">Olá, <span id="kenAiWelcomeName">${studentName}</span>!</h2>
                      <p class="ken-ai-user-role">Estudante • Online</p>
                      <div class="ken-ai-session-info">
                        <span id="kenAiSessionTime"></span> • <span id="kenAiCurrentDate"></span>
                      </div>
                    </div>
                  </div>

                  <!-- Weather Section Inside Same Card -->
                  <div class="ken-ai-weather-inline">
                    <div class="ken-ai-weather-container" id="kenAiWeatherCard">
                      <div class="ken-ai-weather-main">
                        <div class="ken-ai-weather-icon-compact">
                          <i class="fas fa-cloud-sun" id="kenAiWeatherIcon"></i>
                          <div class="ken-ai-weather-glow"></div>
                        </div>
                        <div class="ken-ai-weather-content">
                          <div class="ken-ai-weather-header-compact">
                            <h4 class="ken-ai-weather-title-compact">Clima</h4>
                            <div class="ken-ai-weather-temp-compact" id="kenAiWeatherTemp">--°C</div>
                          </div>
                          <div class="ken-ai-weather-location-compact" id="kenAiWeatherLocation">Detectando...</div>
                          <div class="ken-ai-weather-details-compact">
                            <span class="ken-ai-weather-detail-item" id="kenAiWeatherWind">-- km/h</span>
                            <span class="ken-ai-weather-detail-item" id="kenAiWeatherHumidity">--%</span>
                          </div>
                        </div>
                      </div>
                      <button class="ken-ai-weather-refresh-compact" onclick="refreshWeatherData()" title="Atualizar">
                        <i class="fas fa-sync-alt"></i>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- ✨ Nova Seção de Informações Elaborada -->
            <div class="ken-ai-info-section">
              <div class="ken-ai-info-grid">
                <!-- 💚 Modelo IA Ativo -->
                <div class="ken-ai-info-card model-status">
                  <div class="ken-ai-info-header">
                    <div class="ken-ai-info-icon">
                      <i class="fas fa-brain"></i>
                      <div class="ken-ai-status-pulse"></div>
                    </div>
                    <div class="ken-ai-info-text">
                      <h4>Modelo IA Ativo</h4>
                      <p id="kenAiCurrentModel">Gemini 2.5 Flash</p>
                    </div>
                  </div>
                  <div class="ken-ai-model-badge">
                    <span id="kenAiModelBadge">⚡ Balanceado</span>
                  </div>
                </div>

                <!-- 💡 Dica Inteligente -->
                <div class="ken-ai-info-card smart-tip">
                  <div class="ken-ai-info-header">
                    <div class="ken-ai-info-icon">
                      <i class="fas fa-lightbulb"></i>
                      <div class="ken-ai-tip-glow"></div>
                    </div>
                    <div class="ken-ai-info-text">
                      <h4>Dica Inteligente</h4>
                      <p id="kenAiSmartTip">Use /search-pag para análise completa da página</p>
                    </div>
                  </div>
                  <div class="ken-ai-tip-refresh" onclick="refreshSmartTip()">
                    <i class="fas fa-sync-alt"></i>
                  </div>
                </div>

                <!-- ⚙️ Modo de Operação -->
                <div class="ken-ai-info-card operation-mode">
                  <div class="ken-ai-info-header">
                    <div class="ken-ai-info-icon">
                      <i class="fas fa-cogs"></i>
                      <div class="ken-ai-mode-indicator"></div>
                    </div>
                    <div class="ken-ai-info-text">
                      <h4>Modo de Operação</h4>
                      <p id="kenAiOperationMode">Assistente Padrão</p>
                    </div>
                  </div>
                  <div class="ken-ai-mode-toggles">
                    <span class="ken-ai-toggle-indicator" id="kenAiThinkingIndicator" title="Modo Pensar">
                      <i class="fas fa-brain"></i>
                    </span>
                    <span class="ken-ai-toggle-indicator" id="kenAiSearchIndicator" title="Busca Web">
                      <i class="fas fa-globe"></i>
                    </span>
                  </div>
                </div>

                <!-- 🧠 Memória Temporária -->
                <div class="ken-ai-info-card memory-card">
                  <div class="ken-ai-info-header">
                    <div class="ken-ai-info-icon">
                      <i class="fas fa-brain"></i>
                      <div class="ken-ai-memory-pulse"></div>
                    </div>
                    <div class="ken-ai-info-text">
                      <h4>Memória da Sessão</h4>
                      <p id="kenAiMemoryStatus">Analisando conversa...</p>
                    </div>
                  </div>
                </div>

                <!-- 📊 Estatísticas da Sessão -->
                <div class="ken-ai-info-card session-stats">
                  <div class="ken-ai-info-header">
                    <div class="ken-ai-info-icon">
                      <i class="fas fa-chart-line"></i>
                      <div class="ken-ai-stats-pulse"></div>
                    </div>
                    <div class="ken-ai-info-text">
                      <h4>Sessão Atual</h4>
                      <p id="kenAiSessionStats">0 perguntas • Online</p>
                    </div>
                  </div>
                  <div class="ken-ai-session-time">
                    <span id="kenAiSessionDuration">00:00</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="ken-ai-input-area">
        <div class="ken-ai-image-preview-container" id="kenAiImagePreviewContainer" style="display: none;"></div>
        <div class="ken-ai-input-container">
          <input type="file" id="kenAiFileInput" class="ken-ai-file-input" accept="image/*,audio/*,.txt,.pdf" multiple>
          <button class="ken-ai-action-btn" onclick="document.getElementById('kenAiFileInput').click()" title="Anexar">
            <i class="fas fa-paperclip"></i>
          </button>
          <button class="ken-ai-action-btn ken-ai-voice-btn" id="kenAiVoiceBtn" title="Voz">
            <i class="fas fa-microphone"></i>
          </button>
          <div class="ken-ai-input-wrapper">
            <textarea id="kenAiInput" class="ken-ai-input" placeholder="  Digite sua dúvida..." rows="1"></textarea>
            <div id="kenAiFilePreview" class="ken-ai-file-preview" style="display: none;"></div>
            <button class="ken-ai-action-btn ken-ai-thinking-toggle" id="kenAiThinkingToggle" title="Pensar">
              <i class="fas fa-brain"></i>
            </button>
          </div>
          <button class="ken-ai-action-btn ken-ai-send-btn" id="kenAiSendBtn" title="Enviar">
            <i class="fas fa-paper-plane"></i>
          </button>
        </div>
      </div>
    </div>
  `;
  }

  // Criar painel principal (função assíncrona)
  async function initializePanel() {
    try {
      // Criar container do painel
      const panelContainer = document.createElement('div');

      // Em vez de usar innerHTML, vamos criar o elemento principal e adicioná-lo
      const panelHTML = await createPanelHTML();

      // Criar um elemento temporário para parsear o HTML
      const tempDiv = document.createElement('div');

      // Usar uma abordagem alternativa para adicionar o conteúdo
      // Isso contorna a restrição de TrustedHTML
      const parser = new DOMParser();
      const doc = parser.parseFromString(panelHTML, 'text/html');
      const panelElement = doc.body.firstChild;

      // Se o parsing funcionou, adicionar o elemento ao DOM
      if (panelElement) {
        panelContainer.appendChild(panelElement);
        document.body.appendChild(panelContainer);
      } else {
        // Fallback: Criar manualmente os elementos principais
        console.warn('Usando método alternativo para criar o painel devido a restrições de CSP');
        createPanelManually();
      }

      // Inicializar elementos DOM após criar o painel
      initializeDOMElements();
    } catch (error) {
      console.error('Erro ao inicializar painel:', error);
      // Fallback: Criar manualmente os elementos principais
      createPanelManually();
      initializeDOMElements();
    }
  }

  // Função para criar o painel manualmente (contornando restrições de CSP)
  function createPanelManually() {
    try {
      // Criar container principal
      const panelContainer = document.createElement('div');

      // Criar painel
      const panel = document.createElement('div');
      panel.className = 'ken-ai-sidebar-panel';
      panel.id = 'kenAiPanel';

      // Criar header
      const header = document.createElement('div');
      header.className = 'ken-ai-header';

      // Criar título
      const title = document.createElement('div');
      title.className = 'ken-ai-title';

      // Logo
      const logo = document.createElement('div');
      logo.className = 'ken-ai-logo';
      logo.textContent = 'KEN';

      // Nome do estudante
      const nameSpan = document.createElement('span');
      nameSpan.textContent = 'Study AI';

      // Botão de fechar
      const closeBtn = document.createElement('button');
      closeBtn.className = 'ken-ai-close-btn';
      closeBtn.id = 'kenAiClose';

      const closeIcon = document.createElement('i');
      closeIcon.className = 'fas fa-times';
      closeBtn.appendChild(closeIcon);

      // Montar header
      title.appendChild(logo);
      title.appendChild(nameSpan);
      header.appendChild(title);
      header.appendChild(closeBtn);

      // Criar área de chat
      const chat = document.createElement('div');
      chat.className = 'ken-ai-chat';
      chat.id = 'kenAiChat';

      // Criar área de input
      const inputArea = document.createElement('div');
      inputArea.className = 'ken-ai-input-area';

      // Container de preview de imagem
      const imagePreviewContainer = document.createElement('div');
      imagePreviewContainer.className = 'ken-ai-image-preview-container';
      imagePreviewContainer.id = 'kenAiImagePreviewContainer';
      imagePreviewContainer.style.display = 'none';

      // Container de input
      const inputContainer = document.createElement('div');
      inputContainer.className = 'ken-ai-input-container';

      // Input de arquivo
      const fileInput = document.createElement('input');
      fileInput.type = 'file';
      fileInput.id = 'kenAiFileInput';
      fileInput.className = 'ken-ai-file-input';
      fileInput.accept = 'image/*,audio/*,.txt,.pdf';
      fileInput.multiple = true;

      // Botão de anexo
      const attachBtn = document.createElement('button');
      attachBtn.className = 'ken-ai-action-btn';
      attachBtn.title = 'Anexar';
      attachBtn.onclick = function () { document.getElementById('kenAiFileInput').click(); };

      const attachIcon = document.createElement('i');
      attachIcon.className = 'fas fa-paperclip';
      attachBtn.appendChild(attachIcon);

      // Botão de voz
      const voiceBtn = document.createElement('button');
      voiceBtn.className = 'ken-ai-action-btn ken-ai-voice-btn';
      voiceBtn.id = 'kenAiVoiceBtn';
      voiceBtn.title = 'Voz';

      const voiceIcon = document.createElement('i');
      voiceIcon.className = 'fas fa-microphone';
      voiceBtn.appendChild(voiceIcon);

      // Wrapper do input
      const inputWrapper = document.createElement('div');
      inputWrapper.className = 'ken-ai-input-wrapper';

      // Textarea
      const textarea = document.createElement('textarea');
      textarea.id = 'kenAiInput';
      textarea.className = 'ken-ai-input';
      textarea.placeholder = '  Digite sua dúvida...';
      textarea.rows = 1;

      // Preview de arquivo
      const filePreview = document.createElement('div');
      filePreview.id = 'kenAiFilePreview';
      filePreview.className = 'ken-ai-file-preview';
      filePreview.style.display = 'none';

      // Botão Pensar (dentro do input, antes do Search)
      const thinkingBtn = document.createElement('button');
      thinkingBtn.className = 'ken-ai-action-btn ken-ai-thinking-toggle';
      thinkingBtn.id = 'kenAiThinkingToggle';
      thinkingBtn.title = 'Pensar';
      const thinkingIcon = document.createElement('i');
      thinkingIcon.className = 'fas fa-brain';
      thinkingBtn.appendChild(thinkingIcon);

      // Search Web removido - agora é ativo por padrão e decidido automaticamente pela IA

      // Botão de enviar
      const sendBtn = document.createElement('button');
      sendBtn.className = 'ken-ai-action-btn ken-ai-send-btn';
      sendBtn.id = 'kenAiSendBtn';
      sendBtn.title = 'Enviar';

      const sendIcon = document.createElement('i');
      sendIcon.className = 'fas fa-paper-plane';
      sendBtn.appendChild(sendIcon);

      // Montar componentes
      inputWrapper.appendChild(textarea);
      inputWrapper.appendChild(filePreview);
      inputWrapper.appendChild(thinkingBtn);

      inputContainer.appendChild(fileInput);
      inputContainer.appendChild(attachBtn);
      inputContainer.appendChild(voiceBtn);
      inputContainer.appendChild(inputWrapper);
      inputContainer.appendChild(sendBtn);

      inputArea.appendChild(imagePreviewContainer);
      inputArea.appendChild(inputContainer);

      // Montar painel - área de input fora da área de chat
      panel.appendChild(header);
      panel.appendChild(chat);
      panel.appendChild(inputArea);

      // Adicionar ao DOM
      panelContainer.appendChild(panel);
      document.body.appendChild(panelContainer);
    } catch (error) {
      console.error('Erro ao criar painel manualmente:', error);
    }
  }

  // Função para inicializar elementos DOM
  function initializeDOMElements() {
    // Elementos DOM
    const panel = document.getElementById('kenAiPanel');
    const closeBtn = document.getElementById('kenAiClose');
    const chat = document.getElementById('kenAiChat');
    const input = document.getElementById('kenAiInput');
    const sendBtn = document.getElementById('kenAiSendBtn');
    const settingsBtn = document.getElementById('kenAiSettings');
    const configOverlay = document.getElementById('kenAiConfigOverlay');
    const configClose = document.getElementById('kenAiConfigClose');
    const configCancel = document.getElementById('kenAiConfigCancel');
    const configSave = document.getElementById('kenAiConfigSave');
    const systemPromptEl = document.getElementById('kenAiSystemPrompt');
    const modelSelectEl = document.getElementById('kenAiModelSelect');
    const temperatureEl = document.getElementById('kenAiTemperature');
    const temperatureValueEl = document.getElementById('kenAiTemperatureValue');
    const audioToggleEl = document.getElementById('kenAiAudioToggle');
    const audioTestBtn = document.getElementById('kenAiAudioTestBtn');

    // Carregar configurações salvas
    function loadConfig() {
      try {
        const cfg = JSON.parse(localStorage.getItem('kenAiConfig') || '{}');
        systemPromptEl && (systemPromptEl.value = cfg.systemPrompt || '');

        // Carregar modelo selecionado
        const selectedModel = cfg.selectedModel || 'gemini-2.5-flash';
        if (modelSelectEl) {
          modelSelectEl.value = selectedModel;
        }

        if (temperatureEl && temperatureValueEl) {
          const t = typeof cfg.temperature === 'number' ? cfg.temperature : 0.7;
          temperatureEl.value = String(t);
          temperatureValueEl.textContent = String(t);
        }
        if (audioToggleEl) {
          let audioSetting = undefined;
          try { audioSetting = (typeof cfg.audioNotifEnabled === 'boolean') ? cfg.audioNotifEnabled : audioNotifEnabled; } catch {}
          audioToggleEl.checked = !!audioSetting;
        }
      } catch (e) {
        console.warn('Falha ao carregar config:', e);
      }
    }

    function openConfig() {
      if (!configOverlay) return;
      loadConfig();
      configOverlay.classList.add('open');
      configOverlay.setAttribute('aria-hidden', 'false');
    }

    function closeConfig() {
      if (!configOverlay) return;
      configOverlay.classList.remove('open');
      configOverlay.setAttribute('aria-hidden', 'true');
    }

    function saveConfig() {
      // Obter modelo selecionado
      const selectedModel = modelSelectEl ? modelSelectEl.value : 'gemini-2.5-flash';

      const cfg = {
        systemPrompt: systemPromptEl ? systemPromptEl.value.trim() : undefined,
        selectedModel: selectedModel,
        temperature: temperatureEl ? Number(temperatureEl.value) : undefined,
        audioNotifEnabled: audioToggleEl ? !!audioToggleEl.checked : undefined,
      };
      localStorage.setItem('kenAiConfig', JSON.stringify(cfg));

      // Aplicar em tempo real
      window.kenAiSelectedModel = selectedModel;
      window.kenAiTemperature = typeof cfg.temperature === 'number' ? cfg.temperature : 0.7;

      // Persistir e atualizar toggle de áudio também em chave dedicada para consistência
      try { localStorage.setItem('kenAiAudioNotifEnabled', JSON.stringify(!!cfg.audioNotifEnabled)); } catch {}
      audioNotifEnabled = !!cfg.audioNotifEnabled;
      try { window.audioNotifEnabled = audioNotifEnabled; } catch {}

      // Atualizar modelos nos arquivos ken-mini e ken-painel (se existirem)
      updateModelsInOtherScripts(selectedModel);

      closeConfig();
    }

    // Função para atualizar modelo em outros scripts
    function updateModelsInOtherScripts(selectedModel) {
      try {
        // Atualizar variável global para compartilhar entre scripts
        localStorage.setItem('kenAiSelectedModel', selectedModel);
        window.kenAiSelectedModel = selectedModel;

        // Notificar mudança via evento personalizado
        window.dispatchEvent(new CustomEvent('kenAiModelChanged', {
          detail: { model: selectedModel }
        }));

        console.log(`Modelo atualizado para: ${selectedModel}`);
      } catch (e) {
        console.warn('Falha ao atualizar modelo em outros scripts:', e);
      }
    }

    // Eventos UI config
    if (settingsBtn) settingsBtn.onclick = openConfig;
    if (configClose) configClose.onclick = closeConfig;
    if (configCancel) configCancel.onclick = closeConfig;
    if (configSave) configSave.onclick = saveConfig;
    if (configOverlay) configOverlay.addEventListener('click', (e) => {
      if (e.target === configOverlay) closeConfig();
    });
    if (temperatureEl && temperatureValueEl) temperatureEl.oninput = () => {
      temperatureValueEl.textContent = String(temperatureEl.value);
    };
    if (audioTestBtn) audioTestBtn.onclick = () => {
      const a = getAudioNotif();
      if (a) { a.currentTime = 0; a.play().catch(() => {}); }
    };
    if (audioToggleEl) audioToggleEl.onchange = () => {
      audioNotifEnabled = !!audioToggleEl.checked;
      try { window.audioNotifEnabled = audioNotifEnabled; } catch {}
      try { localStorage.setItem('kenAiAudioNotifEnabled', JSON.stringify(audioNotifEnabled)); } catch {}
    };
    const voiceBtn = document.getElementById('kenAiVoiceBtn');
    const fileInput = document.getElementById('kenAiFileInput');
    const filePreview = document.getElementById('kenAiFilePreview');

    // Configurar event listeners
    setupEventListeners(panel, closeBtn, chat, input, sendBtn, voiceBtn, fileInput, filePreview);
  }
  // Função para configurar event listeners
  function setupEventListeners(
    panel,
    closeBtn,
    chat,
    input,
    sendBtn,
    voiceBtn,
    fileInput,
    filePreview
  ) {
    // Search Web agora é ativo por padrão e controlado automaticamente pela IA

    // Estado inicial do toggle Pensar (Thinking)
    const thinkingToggleBtn = document.getElementById('kenAiThinkingToggle');
    if (thinkingToggleBtn) {
      const setThinkingUi = () => {
        if (thinkingEnabled) {
          thinkingToggleBtn.classList.add('active');
          thinkingToggleBtn.setAttribute('title', 'Pensar: ativado');
        } else {
          thinkingToggleBtn.classList.remove('active');
          thinkingToggleBtn.setAttribute('title', 'Pensar: desativado');
        }
      };
      setThinkingUi();
      thinkingToggleBtn.addEventListener('click', () => {
        thinkingEnabled = !thinkingEnabled;
        try { localStorage.setItem('kenAiThinkingEnabled', JSON.stringify(thinkingEnabled)); } catch {}
        try { window.thinkingEnabled = thinkingEnabled; } catch {}
        setThinkingUi();
      });
    }
    // Atualizar nome e informações da sessão (imediato e a cada 5s)
    function updateStudentName() {
      const name = getUserNameFromSession();
      const nameEl = document.getElementById('kenAiStudentName');
      const welcomeEl = document.getElementById('kenAiWelcomeName');
      if (nameEl) {
        nameEl.textContent = name;
        nameEl.parentElement && nameEl.parentElement.setAttribute('title', name);
      }
      if (welcomeEl) welcomeEl.textContent = name;
    }

    function updateSessionInfo() {
      // Atualizar horário da sessão
      const sessionTimeEl = document.getElementById('kenAiSessionTime');
      if (sessionTimeEl) {
        const now = new Date();
        const timeString = now.toLocaleTimeString('pt-BR', {
          hour: '2-digit',
          minute: '2-digit'
        });
        sessionTimeEl.textContent = `${timeString}`;
      }

      // Atualizar data atual
      const currentDateEl = document.getElementById('kenAiCurrentDate');
      if (currentDateEl) {
        const now = new Date();
        const dateString = now.toLocaleDateString('pt-BR', {
          day: 'numeric',
          month: 'short'
        });
        currentDateEl.textContent = dateString;
      }
    }

    updateStudentName();
    updateSessionInfo();
    setInterval(updateStudentName, 5000);
    setInterval(updateSessionInfo, 60000); // Atualizar horário a cada minuto

    // Inicializar sistema de clima
    setTimeout(() => {
      WeatherManager.init();
    }, 2000); // Aguardar 2 segundos para garantir que o painel está totalmente carregado
    // Redimensionamento lateral (esquerda)
    (function setupResize() {
      const handle = document.getElementById('kenAiResizeHandle');
      if (!panel || !handle) return;

      const MIN_WIDTH = 520;
      const MAX_WIDTH = 720;

      let isDragging = false;
      let startX = 0;
      let startWidth = 0;

      function onMouseDown(e) {
        isDragging = true;
        startX = e.clientX;
        startWidth = panel.getBoundingClientRect().width;
        panel.classList.add('resizing');
        document.addEventListener('mousemove', onMouseMove);
        document.addEventListener('mouseup', onMouseUp);
      }

      function onMouseMove(e) {
        if (!isDragging) return;
        const deltaX = startX - e.clientX; // arrastando para esquerda aumenta largura
        let newWidth = startWidth + deltaX;
        newWidth = Math.max(MIN_WIDTH, Math.min(MAX_WIDTH, newWidth));
        panel.style.width = newWidth + 'px';
        panel.style.right = '0';
      }

      function onMouseUp() {
        if (!isDragging) return;
        isDragging = false;
        panel.classList.remove('resizing');
        document.removeEventListener('mousemove', onMouseMove);
        document.removeEventListener('mouseup', onMouseUp);
        // Persistir largura
        try { localStorage.setItem('kenAiPanelWidth', panel.style.width || ''); } catch {}
      }

      handle.addEventListener('mousedown', onMouseDown);

      // Restaurar largura salva
      try {
        const savedWidth = localStorage.getItem('kenAiPanelWidth');
        if (savedWidth) {
          panel.style.width = savedWidth;
          panel.style.right = '0';
        }
      } catch {}
    })();
    // Funções principais
    function togglePanel() {
      const isOpen = panel.classList.contains('open');
      panel.classList.toggle('open');

      // Atualizar botão flutuante
      const floatingBtn = document.querySelector('.ken-ai-floating-btn');
      if (floatingBtn) {
        if (!isOpen) {
          floatingBtn.classList.add('panel-open');
        } else {
          floatingBtn.classList.remove('panel-open');
        }
      }

      if (!isOpen) {
        // Limpar estilo inline para garantir que o painel apareça
        panel.style.right = '';
        setTimeout(() => input.focus(), 400);
      } else {
        panel.style.right = '-500px';
      }
    }

    function closePanel() {
      panel.classList.remove('open');
      panel.style.right = '-500px';
    }

    // Função para obter API key
    function getNextApiKey() {
      return apiKeyManager.getNextAvailableKey();
    }

    // Função para melhorar prompts matemáticos
    function enhanceMathPrompt(message) {
      // Se a mensagem contém termos matemáticos, adicionar instruções específicas
      const mathKeywords = ['calcular', 'resolver', 'equação', 'fórmula', 'matemática', 'integral', 'derivada', 'limite', 'função', 'gráfico', 'x=', 'y=', '+', '-', '*', '/', '^', '√', '∫', '∑', 'sen', 'cos', 'tan', 'log'];

      const hasMath = mathKeywords.some(keyword =>
        message.toLowerCase().includes(keyword.toLowerCase())
      );

      // As instruções de formatação matemática foram movidas para o prompt global
      // Esta função agora apenas identifica quando uma mensagem contém matemática
      if (hasMath) {
        return message;
      }

      return message;
    }



    // Adicionar mensagem COM renderização em tempo real (sem desaparecer)
    async function addMessage(content, isUser = false) {
      const messageDiv = document.createElement('div');
      messageDiv.className = `ken-ai-message ${isUser ? 'user' : 'ai'}`;

      const bubbleDiv = document.createElement('div');
      bubbleDiv.className = 'ken-ai-bubble';

      // Sempre exibir conteúdo imediatamente (sem fazer desaparecer)
      bubbleDiv.innerHTML = `<div class="markdown-content">${processMarkdown(content)}</div>`;

      messageDiv.appendChild(bubbleDiv);
      chat.appendChild(messageDiv);
      chat.scrollTop = chat.scrollHeight;

      if (!isUser) {
        // Para mensagens da IA, renderizar matemática em tempo real
        console.log('🤖 Renderizando matemática da IA em tempo real...');

        // Renderização rápida e múltiplas tentativas
        setTimeout(() => {
          if (window.MathRenderer) {
            MathRenderer.renderImmediate(bubbleDiv, {
              displayMode: false,
              leqno: false,
              fleqn: false,
              trust: true
            });
          } else {
            fallbackMathRender(bubbleDiv);
          }
        }, 50); // Delay mínimo

        // Retry adicional para garantir renderização completa
        setTimeout(() => {
          const hasUnrendered = /\$\$[\s\S]*?\$\$|\$[^\$\n]*\$|\\\[[\s\S]*?\\\]|\\\([\s\S]*?\\\)/.test(bubbleDiv.textContent || '');
          const hasKatex = bubbleDiv.querySelector('.katex');

          if (hasUnrendered && !hasKatex) {
            console.log('🔄 Retry: Matemática ainda não renderizada, tentando novamente...');
            if (window.MathRenderer) {
              MathRenderer.renderImmediate(bubbleDiv, {
                displayMode: false,
                leqno: false,
                fleqn: false,
                trust: true
              });
            } else {
              fallbackMathRender(bubbleDiv);
            }
          }
        }, 500);

      } else {
        // Para mensagens do usuário, verificar se há matemática
        const hasMath = /\$\$[\s\S]*?\$\$|\$[^\$\n]*\$|\\\[[\s\S]*?\\\]|\\\([\s\S]*?\\\)/.test(content);
        if (hasMath) {
          setTimeout(() => {
            if (window.MathRenderer) {
              MathRenderer.renderImmediate(bubbleDiv);
            } else {
              fallbackMathRender(bubbleDiv);
            }
          }, 50);
        }
      }

      chatHistory.push({
        role: isUser ? 'user' : 'model',
        parts: [{ text: content }],
      });

      // Salvar mensagem no novo sistema (apenas se não estiver carregando conversa)
      if (window.ChatManager && !window.ChatManager.isLoadingChat) {
        ChatManager.saveMessage(isUser ? 'user' : 'model', content);
      }

      // Atualizar painel de histórico em tempo real
      if (window.kenAI && window.kenAI.updateHistoryPanel) {
        setTimeout(() => window.kenAI.updateHistoryPanel(), 100);
      }
      // Notificação sonora ao finalizar resposta da IA (somente quando não estiver restaurando conversa)
      try { if (!isUser && (!window.ChatManager || !window.ChatManager.isLoadingChat)) playKenAudioNotification(); } catch {}
    }

    // Função fallback para renderização matemática
    function fallbackMathRender(element, maxRetries = 3) {
      let attempts = 0;

      const attemptRender = () => {
        attempts++;

        if (window.katex && window.renderMathInElement && window.katexReady) {
          try {
            window.renderMathInElement(element, {
              delimiters: [
                { left: '$$', right: '$$', display: true },
                { left: '$', right: '$', display: false },
                { left: '\\[', right: '\\]', display: true },
                { left: '\\(', right: '\\)', display: false },
              ],
              throwOnError: false,
              errorColor: '#ff6b6b',
              strict: false,
            });
            console.log('✅ Fallback: Matemática renderizada com KaTeX');
            return;
          } catch (err) {
            console.warn(`⚠️ Fallback: Erro na tentativa ${attempts}:`, err);
          }
        }

        // Retry se ainda não esgotou as tentativas
        if (attempts < maxRetries) {
          setTimeout(attemptRender, 300 * attempts);
        } else {
          console.warn('💥 Fallback: Falha final na renderização matemática');
        }
      };

      attemptRender();
    }

    // Sistema de monitoramento contínuo para renderização matemática
    const MathMonitor = {
      intervalId: null,
      checkInterval: 2000, // Verificar a cada 2 segundos

      start() {
        if (this.intervalId) return; // Já está executando

        this.intervalId = setInterval(() => {
          this.checkUnrenderedMath();
        }, this.checkInterval);

        console.log('🔍 Monitor de matemática iniciado');
      },

      stop() {
        if (this.intervalId) {
          clearInterval(this.intervalId);
          this.intervalId = null;
          console.log('⏹️ Monitor de matemática parado');
        }
      },

      checkUnrenderedMath() {
        try {
          // Verificar no painel principal
          const mainChat = document.getElementById('kenAiChat');
          if (mainChat) {
            this.processContainer(mainChat, 'Painel Principal');
          }

          // Verificar no Ken Mini
          const miniChat = document.querySelector('#kenMiniChat .mini-chat-messages');
          if (miniChat) {
            this.processContainer(miniChat, 'Ken Mini');
          }
        } catch (error) {
          console.warn('⚠️ Erro no monitor de matemática:', error);
        }
      },

      processContainer(container, containerName) {
        const elements = container.querySelectorAll('.ken-ai-bubble, div[style*="background: rgba"]');
        let foundUnrendered = 0;

        elements.forEach((element, index) => {
          const hasKatex = element.querySelector('.katex');
          const textContent = element.textContent || '';
          const hasUnrenderedMath = /\$\$[\s\S]*?\$\$|\$[^\$\n]*\$|\\\[[\s\S]*?\\\]|\\\([\s\S]*?\\\)/.test(textContent);

          if (!hasKatex && hasUnrenderedMath) {
            foundUnrendered++;
            console.log(`🔄 ${containerName}: Renderizando matemática perdida no elemento ${index + 1}`);

            // Renderizar com sistema avançado
            if (window.MathRenderer) {
              MathRenderer.renderImmediate(element, {
                displayMode: false,
                leqno: false,
                fleqn: false,
                trust: true
              });
            } else {
              fallbackMathRender(element);
            }
          }
        });

        if (foundUnrendered > 0) {
          console.log(`🧮 ${containerName}: ${foundUnrendered} elementos matemáticos não renderizados foram processados`);
        }
      }
    };

    // Expor monitor globalmente
    window.MathMonitor = MathMonitor;

    // Função global para forçar re-renderização matemática manual
    window.forceRenderAllMath = function() {
      console.log('🚀 Forçando re-renderização de toda matemática...');

      // Painel principal
      const mainChat = document.getElementById('kenAiChat');
      if (mainChat) {
        const bubbles = mainChat.querySelectorAll('.ken-ai-bubble');
        bubbles.forEach((bubble, index) => {
          setTimeout(() => {
            if (window.MathRenderer) {
              MathRenderer.renderImmediate(bubble, {
                displayMode: false,
                leqno: false,
                fleqn: false,
                trust: true
              });
            } else {
              fallbackMathRender(bubble);
            }
          }, index * 100); // Delay escalonado
        });
        console.log(`🧮 Painel Principal: ${bubbles.length} elementos processados`);
      }

      // Ken Mini
      const miniChat = document.querySelector('#kenMiniChat .mini-chat-messages');
      if (miniChat) {
        const messages = miniChat.querySelectorAll('div[style*="background: rgba"]');
        messages.forEach((message, index) => {
          setTimeout(() => {
            if (window.MathRenderer) {
              MathRenderer.renderImmediate(message);
            } else {
              fallbackMathRender(message);
            }
          }, (index * 100) + 1000); // Delay adicional para não conflitar com o painel principal
        });
        console.log(`🧮 Ken Mini: ${messages.length} elementos processados`);
      }

      console.log('✅ Re-renderização forçada concluída!');
    };

    // Função para diagnosticar problemas de renderização
    window.diagnoseMathRendering = function() {
      console.log('\n🔍 DIAGNÓSTICO DE RENDERIZAÇÃO MATEMÁTICA');
      console.log('============================================');

      // Verificar se o KaTeX está disponível
      console.log('KaTeX disponível:', !!window.katex);
      console.log('renderMathInElement disponível:', !!window.renderMathInElement);
      console.log('katexReady:', !!window.katexReady);
      console.log('MathRenderer disponível:', !!window.MathRenderer);
      console.log('MathRenderer pronto:', window.MathRenderer?.isReady);

      // Contar elementos matemáticos
      const mainChat = document.getElementById('kenAiChat');
      if (mainChat) {
        const bubbles = mainChat.querySelectorAll('.ken-ai-bubble');
        const mathElements = mainChat.querySelectorAll('.katex');
        const unrenderedMath = Array.from(bubbles).filter(bubble => {
          const hasKatex = bubble.querySelector('.katex');
          const hasMathText = /\$\$[\s\S]*?\$\$|\$[^\$\n]*\$|\\\[[\s\S]*?\\\]|\\\([\s\S]*?\\\)/.test(bubble.textContent || '');
          return !hasKatex && hasMathText;
        });

        console.log('\nPAINEL PRINCIPAL:');
        console.log('Total de bolhas:', bubbles.length);
        console.log('Elementos KaTeX renderizados:', mathElements.length);
        console.log('Matemática não renderizada:', unrenderedMath.length);
      }

      const miniChat = document.querySelector('#kenMiniChat .mini-chat-messages');
      if (miniChat) {
        const messages = miniChat.querySelectorAll('div[style*="background: rgba"]');
        const mathElements = miniChat.querySelectorAll('.katex');
        const unrenderedMath = Array.from(messages).filter(message => {
          const hasKatex = message.querySelector('.katex');
          const hasMathText = /\$\$[\s\S]*?\$\$|\$[^\$\n]*\$|\\\[[\s\S]*?\\\]|\\\([\s\S]*?\\\)/.test(message.textContent || '');
          return !hasKatex && hasMathText;
        });

        console.log('\nKEN MINI:');
        console.log('Total de mensagens:', messages.length);
        console.log('Elementos KaTeX renderizados:', mathElements.length);
        console.log('Matemática não renderizada:', unrenderedMath.length);
      }

      console.log('\n============================================');
      console.log('Digite forceRenderAllMath() para forçar re-renderização');
    };

    // Iniciar monitor após carregamento
    setTimeout(() => {
      MathMonitor.start();
    }, 5000); // Aguardar 5 segundos para inicialização completa

    // Helpers da barra de ações por mensagem
    function createActionsToolbar(messageDiv, rawText, historyIndex) {
      const bar = document.createElement('div');
      bar.className = 'ken-ai-actions-bar';
      bar.setAttribute('role', 'toolbar');
      bar.setAttribute('aria-label', 'Ações da mensagem da IA');

      const mkBtn = (title, iconHtml, action, extraClass, id) => {
        const b = document.createElement('button');
        b.className = `ken-ai-action-btn ${extraClass||''}`.trim();
        if (id) b.id = id;
        b.type = 'button';
        b.title = title;
        b.setAttribute('aria-label', title);
        b.innerHTML = iconHtml;
        b.addEventListener('click', (e) => {
          e.stopPropagation();
          try { action(); } catch(err) { console.warn('Ação falhou:', err); }
        });
        return b;
      };

      // Utilitários
      const getMarkdownEl = () => messageDiv.querySelector('.ken-ai-bubble .markdown-content');
      const updateHistoryText = (newText) => {
        try {
          if (Array.isArray(chatHistory) && chatHistory[historyIndex]) {
            chatHistory[historyIndex].parts = [{ text: newText }];
          }
          if (window.kenAI && window.kenAI.updateHistoryPanel) setTimeout(() => window.kenAI.updateHistoryPanel(), 100);
          if (window.ChatManager && typeof ChatManager.updateMessage === 'function') {
            ChatManager.updateMessage(historyIndex, 'model', newText);
          }
        } catch {}
      };

      // Reescrever: envia um comando pré-preenchido com a resposta atual
      const rewriteBtn = mkBtn('Reescrever', '<i class="fas fa-redo"></i>', () => {
        const snippet = (rawText || '').slice(0, 2000);
        const prompt = `Reescreva a resposta abaixo preservando o significado, de forma mais clara e concisa. Mantenha formatação Markdown quando útil.\n\n${snippet}`;
        if (typeof window.insertCommand === 'function') {
          window.insertCommand(prompt);
        } else {
          const input = document.getElementById('kenAiInput');
          if (input) { input.value = prompt; input.focus(); }
        }
      }, 'ken-ai-btn-rewrite', `ken-ai-btn-rewrite-${historyIndex}`);

      // Editar inline: alterna textarea para edição do conteúdo
      const editBtn = mkBtn('Editar', '<i class="fas fa-edit"></i>', () => {
        const container = getMarkdownEl();
        if (!container) return;
        if (messageDiv.dataset.editing === '1') return; // evitar reentrância
        messageDiv.dataset.editing = '1';
        messageDiv.classList.add('editing');

        const originalText = messageDiv.dataset.rawText || rawText || '';
        const originalHtml = container.innerHTML;

        const wrapper = document.createElement('div');
        const textarea = document.createElement('textarea');
        textarea.value = originalText;
        textarea.className = 'ken-ai-edit-textarea';

        const actions = document.createElement('div');
        actions.style.display = 'flex';
        actions.style.gap = '8px';
        actions.style.marginTop = '8px';

        const saveBtn = document.createElement('button');
        saveBtn.textContent = 'Salvar';
        saveBtn.className = 'ken-ai-edit-ctrl';
        saveBtn.title = 'Salvar edição';
        const cancelBtn = document.createElement('button');
        cancelBtn.textContent = 'Cancelar';
        cancelBtn.className = 'ken-ai-edit-ctrl';
        cancelBtn.title = 'Cancelar edição';

        actions.appendChild(saveBtn);
        actions.appendChild(cancelBtn);
        wrapper.appendChild(textarea);
        wrapper.appendChild(actions);
        container.innerHTML = '';
        container.appendChild(wrapper);
        textarea.focus();

        const finish = (restore = false, newText = originalText) => {
          messageDiv.dataset.editing = '0';
          messageDiv.classList.remove('editing');
          if (restore) {
            container.innerHTML = originalHtml;
            return;
          }
          // Atualizar HTML renderizado e estado
          container.innerHTML = processMarkdown(newText);
          messageDiv.dataset.rawText = newText;
          updateHistoryText(newText);
        };

        saveBtn.addEventListener('click', () => finish(false, textarea.value));
        cancelBtn.addEventListener('click', () => finish(true));
      }, 'ken-ai-btn-edit', `ken-ai-btn-edit-${historyIndex}`);

      // Copiar
      const copyBtn = mkBtn('Copiar', '<i class="fas fa-copy"></i>', async () => {
        const toCopy = messageDiv.dataset.rawText || rawText || '';
        try {
          await navigator.clipboard.writeText(toCopy);
        } catch {
          // fallback
          const ta = document.createElement('textarea');
          ta.value = toCopy; document.body.appendChild(ta); ta.select();
          try { document.execCommand('copy'); } catch {}
          document.body.removeChild(ta);
        }
      }, 'ken-ai-btn-copy', `ken-ai-btn-copy-${historyIndex}`);

      // Exportar
      const exportBtn = mkBtn('Exportar', '<i class="fas fa-download"></i>', () => {
        const text = messageDiv.dataset.rawText || rawText || '';
        const blob = new Blob([text], { type: 'text/markdown;charset=utf-8' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        const ts = new Date().toISOString().replace(/[:.]/g, '-');
        a.download = `ken_ai_resposta_${ts}.md`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      }, 'ken-ai-btn-export', `ken-ai-btn-export-${historyIndex}`);

      bar.appendChild(rewriteBtn);
      bar.appendChild(editBtn);
      bar.appendChild(copyBtn);
      bar.appendChild(exportBtn);
      return bar;
    }

    // Adicionar mensagem da IA com citações (fontes) e raciocínio COM renderização em tempo real
    async function addAiMessageWithCitations(text, citations, thoughts) {
      const messageDiv = document.createElement('div');
      messageDiv.className = 'ken-ai-message ai';

      // Índice no histórico e texto bruto para ações
      const historyIndex = chatHistory.length; // será este após o push
      const rawText = sanitizeModelOpening(text);

      messageDiv.dataset.rawText = rawText;
      messageDiv.dataset.historyIndex = String(historyIndex);

      // Adição de pensamentos foi unificada com a implementação abaixo

      // Bloco de raciocínio (acima da resposta final)
      if (thinkingEnabled && thoughts && typeof thoughts === 'string' && thoughts.trim()) {
        const reasoning = document.createElement('div');
        reasoning.className = 'ken-ai-reasoning';
        reasoning.innerHTML = `
        <div class="ken-ai-reasoning-header">
          <span class="ken-ai-reasoning-title">Raciocínio</span>
          <button class="ken-ai-reasoning-toggle" title="Minimizar / Expandir" aria-label="alternar raciocínio">
            <i class="fas fa-chevron-down"></i>
          </button>
        </div>
        <div class="ken-ai-reasoning-content markdown-content">${processMarkdownResponse(thoughts)}</div>
      `;
        const toggleBtn = reasoning.querySelector('.ken-ai-reasoning-toggle');
        const contentEl = reasoning.querySelector('.ken-ai-reasoning-content');
        let collapsed = true;
        // Initialize content as hidden since we start collapsed
        contentEl.style.display = 'none';
        toggleBtn.innerHTML = '<i class="fas fa-chevron-down"></i>';
        toggleBtn.addEventListener('click', () => {
          collapsed = !collapsed;
          if (collapsed) {
            contentEl.style.display = 'none';
            toggleBtn.innerHTML = '<i class="fas fa-chevron-down"></i>';
          } else {
            contentEl.style.display = '';
            toggleBtn.innerHTML = '<i class="fas fa-chevron-up"></i>';

            // Re-render math when expanding the reasoning section
            setTimeout(() => {
              if (window.MathRenderer) {
                MathRenderer.renderImmediate(contentEl, {
                  displayMode: false,
                  leqno: false,
                  fleqn: false,
                  trust: true
                });
              } else {
                fallbackMathRender(contentEl);
              }
            }, 50);
          }
        });
        messageDiv.appendChild(reasoning);

        // Apply math rendering to reasoning content
        setTimeout(() => {
          if (window.MathRenderer) {
            MathRenderer.renderImmediate(contentEl, {
              displayMode: false,
              leqno: false,
              fleqn: false,
              trust: true
            });
          } else {
            fallbackMathRender(contentEl);
          }

          // Retry math rendering after a delay to ensure all expressions are properly rendered
          setTimeout(() => {
            const hasUnrendered = /\$\$[\s\S]*?\$\$|\$[^\$\n]*\$|\\\[[\s\S]*?\\\]|\\\([\s\S]*?\\\)/.test(contentEl.textContent || '');
            const hasKatex = contentEl.querySelector('.katex');

            if (hasUnrendered && !hasKatex) {
              console.log('🔄 Retry: Math in reasoning not fully rendered, trying again...');
              if (window.MathRenderer) {
                MathRenderer.renderImmediate(contentEl, {
                  displayMode: false,
                  leqno: false,
                  fleqn: false,
                  trust: true
                });
              } else {
                fallbackMathRender(contentEl);
              }
            }
          }, 500);
        }, 50);
      }

      // Criar o elemento da bolha de mensagem DEPOIS dos elementos de raciocínio
      const bubbleDiv = document.createElement('div');
      bubbleDiv.className = 'ken-ai-bubble';

      // Exibir conteúdo imediatamente
      bubbleDiv.innerHTML = `<div class="markdown-content">${processMarkdown(text)}</div>`;

      // Adicionar a bolha de mensagem ao elemento da mensagem
      messageDiv.appendChild(bubbleDiv);

      // Barra de fontes, se houver
      if (Array.isArray(citations) && citations.length > 0) {
        const sourcesBar = document.createElement('div');
        sourcesBar.className = 'ken-ai-citations';
        const title = document.createElement('div');
        title.className = 'ken-ai-citations-title';
        title.textContent = 'FONTES';
        sourcesBar.appendChild(title);
        citations.slice(0, 6).forEach((c, idx) => {
          if (!c || !c.uri) return;
          const btn = document.createElement('a');
          btn.className = 'ken-ai-source-btn';
          btn.href = c.uri;
          btn.target = '_blank';
          btn.rel = 'noopener noreferrer';
          // Favicon
          let domain = '';
          try {
            const h = new URL(c.uri).hostname.replace(/^www\./,'');
            if (/^vertexaisearch\.cloud\.google\.com$/i.test(h)) {
              // Tentar extrair domínio real a partir do título
              if (c.title) {
                try { domain = new URL(/^https?:\/\//i.test(c.title) ? c.title : `https://${c.title}`).hostname.replace(/^www\./,''); } catch { domain = c.title; }
              }
            } else {
              domain = h;
            }
          } catch {}
          const label = domain ? (domain.length > 18 ? domain.slice(0,15) + '…' : domain) : (c.title ? c.title : `Fonte ${idx+1}`);
          const icon = document.createElement('img');
          icon.src = `https://www.google.com/s2/favicons?domain=${encodeURIComponent(domain || c.uri)}&sz=16`;
          icon.alt = '';
          btn.appendChild(icon);
          const span = document.createElement('span');
          span.textContent = label;
          btn.appendChild(span);
          sourcesBar.appendChild(btn);
        });
        messageDiv.appendChild(sourcesBar);
      }

      // Barra de ações por mensagem (sempre para IA)
      const actionsBar = createActionsToolbar(messageDiv, rawText, historyIndex);
      messageDiv.appendChild(actionsBar);

      chat.appendChild(messageDiv);
      chat.scrollTop = chat.scrollHeight;

      // Renderizar matemática em tempo real (sem fazer a mensagem desaparecer)
      console.log('🤖 Renderizando matemática da IA com citações em tempo real...');

      setTimeout(() => {
        if (window.MathRenderer) {
          MathRenderer.renderImmediate(bubbleDiv, {
            displayMode: false,
            leqno: false,
            fleqn: false,
            trust: true
          });
        } else {
          fallbackMathRender(bubbleDiv);
        }
      }, 50);

      // Retry adicional para garantir renderização completa
      setTimeout(() => {
        const hasUnrendered = /\$\$[\s\S]*?\$\$|\$[^\$\n]*\$|\\\[[\s\S]*?\\\]|\\\([\s\S]*?\\\)/.test(bubbleDiv.textContent || '');
        const hasKatex = bubbleDiv.querySelector('.katex');

        if (hasUnrendered && !hasKatex) {
          console.log('🔄 Retry: Matemática com citações ainda não renderizada, tentando novamente...');
          if (window.MathRenderer) {
            MathRenderer.renderImmediate(bubbleDiv, {
              displayMode: false,
              leqno: false,
              fleqn: false,
              trust: true
            });
          } else {
            fallbackMathRender(bubbleDiv);
          }
        }
      }, 500);

      chatHistory.push({ role: 'model', parts: [{ text: rawText }] });
      messageDiv.dataset.historyIndex = String(historyIndex);
      if (window.ChatManager && !window.ChatManager.isLoadingChat) {
        ChatManager.saveMessage('model', rawText);
      }
      if (window.kenAI && window.kenAI.updateHistoryPanel) {
        setTimeout(() => window.kenAI.updateHistoryPanel(), 100);
      }
      // Notificação sonora ao finalizar resposta (somente quando não estiver restaurando conversa)
      try { if (!window.ChatManager || !window.ChatManager.isLoadingChat) playKenAudioNotification(); } catch {}
    }

    // Expor addMessage globalmente para uso do ChatManager
    window.addMessage = addMessage;

    // Mostrar loading
    function showLoading() {
      const loadingDiv = document.createElement('div');
      loadingDiv.className = 'ken-ai-message ai';
      loadingDiv.id = 'kenAiLoading';

      const bubbleDiv = document.createElement('div');
      bubbleDiv.className = 'ken-ai-bubble';
      bubbleDiv.innerHTML = `
            <div class="ken-ai-loading">
                <div class="ken-ai-spinner"></div>
                <span>Pensando...</span>
            </div>
        `;

      loadingDiv.appendChild(bubbleDiv);
      chat.appendChild(loadingDiv);
      chat.scrollTop = chat.scrollHeight;
    }

    // Remover loading
    function removeLoading() {
      const loading = document.getElementById('kenAiLoading');
      if (loading) loading.remove();
    }

    // Converter arquivo para base64
    function fileToBase64(file) {
      return new Promise((resolve) => {
        const reader = new FileReader();
        reader.onload = (e) => resolve(e.target.result.split(',')[1]);
        reader.readAsDataURL(file);
      });
    }


    // Utilitário: cria texto, raciocínio (thoughts) e lista de citações
    function buildInlineGroundedResponse(apiResponseJson) {
      try {
        const candidate = apiResponseJson?.candidates?.[0];
        const parts = candidate?.content?.parts || [];
        // Extrair texto final e pensamentos (quando disponíveis)
        let text = '';
        let thoughts = '';
        for (const p of parts) {
          if (!p || typeof p.text !== 'string') continue;
          if (p.thought) {
            thoughts += (thoughts ? '\n\n' : '') + p.text;
          } else {
            text += (text ? '\n\n' : '') + p.text;
          }
        }
        if (!text && parts[0]?.text) text = parts[0].text;
        const gm = candidate?.groundingMetadata;
        const chunks = gm?.groundingChunks || [];
        const supports = gm?.groundingSupports || gm?.supports || [];

        // Mapear cada chunk para um índice global consistente (1..N)
        const chunkIndexToNumber = new Map();
        const citations = [];
        for (let i = 0; i < chunks.length; i++) {
          const web = chunks[i]?.web || {};
          const uri = web.uri || '';
          let title = web.title || '';
          // Se o título não for uma URL válida completa, usar o host do URI como título exibido
          try {
            const u = new URL(uri);
            const host = u.hostname || '';
            // Preferir host quando o título não parece conter um host
            if (!title || /^(?:[a-z]+:\/\/)/i.test(title)) {
              // se o title já é uma URL, manter host do uri como mais confiável
              title = host || title;
            } else if (!/\./.test(title)) {
              // títulos genéricos sem domínio, substituir por host
              title = host || title;
            }
          } catch {}
          if (uri) {
            const number = citations.length + 1;
            chunkIndexToNumber.set(i, number);
            citations.push({ uri, title });
          }
        }

        // Sem inserções inline: manter o texto limpo. As fontes serão exibidas apenas na barra de fontes.

        // Lista de citações para barra inferior (já construída com host real e numeração global)
        return { text, thoughts, citations };
      } catch (e) {
        return { text: apiResponseJson?.candidates?.[0]?.content?.parts?.[0]?.text || '', thoughts: '', citations: [] };
      }
    }

    // Modificar função de envio para Gemini
    async function sendToGemini(message, file = null) {
      const currentKey = getNextApiKey();

      const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${currentKey}`;

      // Melhorar prompt para matemática
      const enhancedMessage = enhanceMathPrompt(message);

      // 🧠 Analisar mensagem para memória temporária
      if (typeof TemporaryMemory !== 'undefined') {
        TemporaryMemory.analyzeUserMessage(message);
      }

      let parts = [{ text: enhancedMessage }];

      if (file) {
        const base64Data = await fileToBase64(file);
        parts.push({
          inline_data: {
            mime_type: file.type,
            data: base64Data,
          },
        });
      }

      // Adicionar prompt de sistema (customizável via Configurações)
      const userCfg = (() => { try { return JSON.parse(localStorage.getItem('kenAiConfig')||'{}'); } catch { return {}; } })();
      const __now = new Date();
      const __dateStr = (() => { try { return __now.toLocaleString('pt-BR', { dateStyle: 'full' }); } catch { return __now.toDateString(); } })();
      const __timeStr = (() => { try { return __now.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' }); } catch { return __now.toTimeString().slice(0,5); } })();
      const base = buildBaseSystemPrompt();

      // 🧠 ADICIONAR CONTEXTO DA MEMÓRIA TEMPORÁRIA
      let memoryContext = '';
      if (typeof TemporaryMemory !== 'undefined' && TemporaryMemory.generateContextForPrompt) {
        const tempContext = TemporaryMemory.generateContextForPrompt();
        if (tempContext) {
          memoryContext = `\n\n🧠 CONTEXTO DA CONVERSA ATUAL:${tempContext}`;
          console.log('📝 Contexto da memória temporária adicionado ao prompt');
        }
      }

      const mergedPrompt = `${base}${memoryContext}${userCfg.systemPrompt ? `\n\n${userCfg.systemPrompt}` : ''}`;
      const systemPrompt = {
        role: 'user',
        parts: [{ text: mergedPrompt }]
      };

      // Heurística: decidir automaticamente quando usar busca web
      const shouldUseSearch = (msg) => {
        if (!msg || typeof msg !== 'string') return false;
        const q = msg.toLowerCase();
        // termos sensíveis a tempo/fatos recentes
        const patterns = [
          /que dia (é|eh) hoje|data de hoje|que data é hoje|dia de hoje/,
          /agora|horas? (são|sao)|que horas/,
          /notícias?|news|últimas|ultimas|atualizaç(ão|oes)|lançamento|lançamentos/,
          /resultado(s)?|placar|jogo(s)? de hoje|quem ganhou|vencedor/,
          /preço(s)?|cotação|cota(ç|c)ão|dólar|dolar|euro|bitcoin|btc/,
          /clima|tempo|previs(ão|ao) do tempo/,
          /quando (vai )?sair|quando foi|data de lançamento/,
          /tend(ê|e)ncias|trend(s)?/,
        ];
        return patterns.some((re) => re.test(q));
      };

      const genConfig = {
        temperature: (typeof window.kenAiTemperature === 'number' ? window.kenAiTemperature : (typeof userCfg.temperature === 'number' ? userCfg.temperature : 0.7)),
        maxOutputTokens: 2048,
        mediaResolution: 'MEDIA_RESOLUTION_MEDIUM',
      };
      if (thinkingEnabled) {
        const budget = (typeof window.kenAiThinkingBudget === 'number' ? window.kenAiThinkingBudget : 256);
        genConfig.thinkingConfig = { thinkingBudget: budget, includeThoughts: true };
      } else {
        // Plain text is fine when not requesting thoughts
        genConfig.responseMimeType = 'text/plain';
      }

      // Remover a última mensagem do usuário do chatHistory se ela existir
      // para evitar duplicação de mensagens
      let chatHistoryCopy = [...chatHistory]; // Fazer uma cópia para não modificar o original
      if (chatHistoryCopy.length > 0 && chatHistoryCopy[chatHistoryCopy.length - 1].role === 'user') {
        chatHistoryCopy.pop(); // Remove a última mensagem do usuário
      }

      const requestBody = {
        contents: [systemPrompt, ...chatHistoryCopy, { role: 'user', parts: parts }],
        generationConfig: genConfig,
        ...((searchWebEnabled || shouldUseSearch(message)) ? { tools: [{ google_search: {} }] } : {}),
      };

      try {
        const intendedSearch = (searchWebEnabled || shouldUseSearch(message));
        const response = await fetch(url, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-goog-api-client': 'rest/1.0',
          },
          body: JSON.stringify(requestBody),
        });

        // Log da resposta completa para diagnóstico
        const responseData = await response.json();

        // Verificar se há erro na resposta
        if (responseData.error) {
          console.error('Erro detalhado da API:', responseData.error);
          apiKeyManager.markKeyFailure(currentKey);
          throw new Error(responseData.error.message || 'Erro desconhecido na API');
        }

        // Mantemos única fonte de prompt (base + usuário). Sem reforço extra/retry.
        const dataForBuild = responseData;

        // Construir resposta com lista de fontes
        const grounded = buildInlineGroundedResponse(dataForBuild);
        const responseText = sanitizeModelOpening(grounded.text);
        const citations = grounded.citations;
        const thoughts = grounded.thoughts || '';

        if (!responseText) {
          apiKeyManager.markKeyFailure(currentKey);
          throw new Error('Resposta da API não contém texto');
        }

        // Marcar chave como bem-sucedida
        apiKeyManager.markKeySuccess(currentKey);

        // 🧠 Analisar resposta da IA para memória temporária
        if (typeof TemporaryMemory !== 'undefined') {
          TemporaryMemory.analyzeAIResponse(responseText);
        }

        return { text: responseText, citations, thoughts };
      } catch (error) {
        console.error('Erro completo na API:', error);

        // Marcar chave como falha
        apiKeyManager.markKeyFailure(currentKey);

        // Mensagens de erro mais amigáveis
        if (error.message.includes('429')) {
          return 'Desculpe, muitas solicitações foram feitas. Por favor, aguarde um momento e tente novamente.';
        }

        return `Desculpe, ocorreu um erro na comunicação com a IA: ${error.message}. Tente novamente mais tarde.`;
      }
    }

    // Adicionar função de log de erros
    function logApiError(error) {
      console.error('Erro de API:', error);

      // Opcional: Enviar log para um serviço de monitoramento
      // fetch('https://seu-servico-de-log.com/log', {
      //     method: 'POST',
      //     body: JSON.stringify({
      //         error: error.message,
      //         timestamp: new Date().toISOString()
      //     })
      // });
    }

    // Função para mostrar notificações
    function showNotification(message, type = 'info') {
      // Criar elemento de notificação
      const notification = document.createElement('div');
      notification.className = `ken-ai-notification ken-ai-notification-${type}`;
      notification.textContent = message;

      // Estilos da notificação
      Object.assign(notification.style, {
        position: 'fixed',
        top: '20px',
        right: '20px',
        padding: '12px 20px',
        borderRadius: '8px',
        color: '#fff',
        fontWeight: '500',
        fontSize: '14px',
        zIndex: '10000',
        maxWidth: '300px',
        boxShadow: '0 4px 12px rgba(0,0,0,0.3)',
        transform: 'translateX(100%)',
        transition: 'transform 0.3s ease',
        fontFamily: 'system-ui, -apple-system, sans-serif'
      });

      // Cores baseadas no tipo
      switch(type) {
        case 'success':
          notification.style.background = 'linear-gradient(135deg, #10b981, #059669)';
          break;
        case 'error':
          notification.style.background = 'linear-gradient(135deg, #ef4444, #dc2626)';
          break;
        case 'warning':
          notification.style.background = 'linear-gradient(135deg, #f59e0b, #d97706)';
          break;
        default:
          notification.style.background = 'linear-gradient(135deg, #3b82f6, #2563eb)';
      }

      // Adicionar ao DOM
      document.body.appendChild(notification);

      // Animar entrada
      setTimeout(() => {
        notification.style.transform = 'translateX(0)';
      }, 100);

      // Remover após 3 segundos
      setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
          if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
          }
        }, 300);
      }, 3000);
    }

    // Função para processar imagem colada
    function handlePastedImage(file) {
      // Verificar limite de imagens
      const currentImageCount = uploadedFiles.filter((file) =>
        file.type.startsWith('image/')
      ).length;

      if (currentImageCount >= 3) {
        // Mostrar notificação de limite atingido
        showNotification('Limite de 3 imagens atingido. Remova uma imagem para adicionar outra.', 'warning');
        return;
      }

      // Verificar se é uma imagem válida
      if (!file.type.startsWith('image/')) {
        showNotification('Apenas imagens podem ser coladas.', 'error');
        return;
      }

      // Verificar tamanho do arquivo (limite de 10MB)
      const maxSize = 10 * 1024 * 1024; // 10MB
      if (file.size > maxSize) {
        showNotification('Imagem muito grande. Limite de 10MB.', 'error');
        return;
      }

      // Adicionar arquivo à lista de uploads
      uploadedFiles.push(file);

      // Atualizar preview
      updateImagePreviews();

      // Mostrar notificação de sucesso
      showNotification('Imagem colada com sucesso!', 'success');

      // Focar no input
      input.focus();
    }

    // Processar mensagem
    async function processMessage() {
      const message = input.value.trim();
      if (!message && uploadedFiles.length === 0) return;

      // Remover welcome suavemente na primeira mensagem
      const welcomeMessage = document.querySelector('.ken-ai-welcome');

      if (welcomeMessage) {
        welcomeMessage.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
        welcomeMessage.style.opacity = '0';
        welcomeMessage.style.transform = 'translateY(-20px)';
        setTimeout(() => {
          welcomeMessage.remove();
        }, 300);
      }

      // Verificar comandos especiais
      // - search-pag (/sp): captura de página com UI de loading explícita
      // - capture_page (/cp): captura de página OCULTA (sem UI especial)
      const isSearchPageCommand =
        message.toLowerCase().startsWith('/search-pag') || message.toLowerCase().startsWith('/sp');
      const isCapturePageCommand =
        message.toLowerCase().startsWith('/capture_page') || message.toLowerCase().startsWith('/cp');
      let displayMessage = message;
      let finalMessage = message;

      if (isSearchPageCommand) {
        // Remover o comando da mensagem para exibição (tanto /search-pag quanto /sp)
        displayMessage = message.replace(/^\/(?:search-pag|sp)\s*/gi, '').trim();
        if (!displayMessage) {
          displayMessage = 'Buscando página...';
        }
      } else if (isCapturePageCommand) {
        // Remover o comando da mensagem para exibição (tanto /capture_page quanto /cp)
        displayMessage = message.replace(/^\/(?:capture_page|cp)\s*/gi, '').trim();
        if (!displayMessage) {
          // Manter discreto/oculto
          displayMessage = '...';
        }
      }

      const imageFiles = uploadedFiles.filter((file) => file.type.startsWith('image/'));

      // Adicionar informação sobre imagens à mensagem
      if (imageFiles.length > 0) {
        displayMessage += ` [${imageFiles.length} imagem(s) anexada(s)]`;
      }

      await addMessage(displayMessage, true);
      input.value = '';

      // Incrementar contador de perguntas para a seção de informações
      if (typeof window.incrementKenAiQuestionCount === 'function') {
        window.incrementKenAiQuestionCount();
      }

      // O novo sistema gerencia automaticamente as conversas
      // Não precisa mais de lógica manual de ID

      // Limpar preview de arquivos
      const previewContainer = document.getElementById('kenAiImagePreviewContainer');
      previewContainer.innerHTML = '';
      previewContainer.style.display = 'none';

      // Modificar loading para search-pag
      if (isSearchPageCommand) {
        const loadingDiv = document.createElement('div');
        loadingDiv.className = 'ken-ai-message ai';
        loadingDiv.id = 'kenAiLoading';

        const bubbleDiv = document.createElement('div');
        bubbleDiv.className = 'ken-ai-bubble';
        bubbleDiv.innerHTML = `
                <div class="ken-ai-loading">
                    <div class="ken-ai-spinner"></div>
                    <span>Buscando...</span>
                </div>
            `;

        loadingDiv.appendChild(bubbleDiv);
        chat.appendChild(loadingDiv);
        chat.scrollTop = chat.scrollHeight;
      } else {
        showLoading();
      }

      sendBtn.disabled = true;

      try {
        let filesToSend = null;
        let pageData = null;
        // Auto-captura removida - usuário deve usar comandos específicos se necessário
        const shouldAutoCaptureFirstPrompt = false;

        // Capturar página quando necessário
        if (isSearchPageCommand || isCapturePageCommand || shouldAutoCaptureFirstPrompt) {
          pageData = await capturePageData();
          if (pageData.screenshot) {
            filesToSend = pageData.screenshot;
            if (isSearchPageCommand) {
              // search-pag mantém mensagem explícita com URL
              finalMessage = `${finalMessage
                .replace(/^\/(?:search-pag|sp)\s*/gi, '')
                .trim()}\n\nURL da página: ${pageData.url
                }\nPor favor, analise o screenshot desta página junto com minha pergunta.`;
            } else if (isCapturePageCommand) {
              // capture_page remove apenas o comando (sem alterar texto visível)
              finalMessage = `${finalMessage.replace(/^\/(?:capture_page|cp)\s*/gi, '').trim()}`;
            }
          } else {
            if (isSearchPageCommand) {
              finalMessage = `${finalMessage
                .replace(/^\/(?:search-pag|sp)\s*/gi, '')
                .trim()}\n\nURL da página: ${pageData.url
                }\nNão foi possível capturar screenshot, mas analise com base na URL.`;
            } else if (isCapturePageCommand) {
              finalMessage = `${finalMessage.replace(/^\/(?:capture_page|cp)\s*/gi, '').trim()}`;
            }
          }

          // Atualizar mensagem de loading para "Analisando..."
          if (isSearchPageCommand) {
            const loadingDiv = document.getElementById('kenAiLoading');
            if (loadingDiv) {
              const loadingSpan = loadingDiv.querySelector('.ken-ai-loading span');
              if (loadingSpan) loadingSpan.textContent = 'Analisando...';
            }
          }
        }
        // Se houver imagens anexadas, preparar para envio
        else if (imageFiles.length > 0) {
          finalMessage = message || 'Analise esta(s) imagem(s) e explique o que vê.';
          filesToSend = imageFiles[0]; // Enviar apenas a primeira imagem por enquanto
        }

        // Aguardar um momento após "Concluído!"
        if (isSearchPageCommand) {
          const loadingDiv = document.getElementById('kenAiLoading');
          if (loadingDiv) {
            const loadingSpan = loadingDiv.querySelector('.ken-ai-loading span');
            if (loadingSpan) loadingSpan.textContent = 'Concluído!';

            // Aguardar 1 segundo antes de enviar para a IA
            await new Promise((resolve) => setTimeout(resolve, 1000));
          }
        }

        const response = await sendToGemini(finalMessage, filesToSend);

        // Remover loading
        if (isSearchPageCommand) {
          const loadingDiv = document.getElementById('kenAiLoading');
          if (loadingDiv) loadingDiv.remove();
        } else {
          removeLoading();
        }

        if (response && typeof response === 'object' && response.text) {
          await addAiMessageWithCitations(response.text, response.citations, response.thoughts);
        } else {
          await addMessage(String(response || ''));
        }

        // Limpar arquivos após envio
        uploadedFiles = uploadedFiles.filter((file) => !imageFiles.includes(file));

        // Atualizar preview se ainda houver arquivos
        updateImagePreviews();
      } catch (error) {
        // Remover loading em caso de erro
        if (isSearchPageCommand) {
          const loadingDiv = document.getElementById('kenAiLoading');
          if (loadingDiv) loadingDiv.remove();
        } else {
          removeLoading();
        }

        await addMessage('Erro ao processar. Tente novamente.');
      }

      sendBtn.disabled = false;
      input.focus();
    }

    // Inicializar reconhecimento de voz
    function initVoice() {
      if ('webkitSpeechRecognition' in window) {
        recognition = new webkitSpeechRecognition();
        recognition.continuous = false;
        recognition.lang = 'pt-BR';

        recognition.onstart = () => {
          isListening = true;
          voiceBtn.classList.add('listening');
        };

        recognition.onresult = (event) => {
          input.value = event.results[0][0].transcript;
        };

        recognition.onend = () => {
          isListening = false;
          voiceBtn.classList.remove('listening');
        };
      }
    }

    // Event Listeners
    closeBtn.addEventListener('click', closePanel);
    sendBtn.addEventListener('click', processMessage);

    voiceBtn.addEventListener('click', () => {
      if (recognition) {
        isListening ? recognition.stop() : recognition.start();
      }
    });

    input.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        processMessage();
      }
    });

    // Auto-resize textarea
    function autoResize(textarea) {
      textarea.style.height = 'auto';
      textarea.style.height = Math.min(textarea.scrollHeight, 100) + 'px';
    }

    input.addEventListener('input', function () {
      autoResize(this);
    });

    // Event listener para colar imagens
    input.addEventListener('paste', function(e) {
      const clipboardData = e.clipboardData || window.clipboardData;
      const items = clipboardData.items;

      for (let i = 0; i < items.length; i++) {
        const item = items[i];

        // Verificar se é uma imagem
        if (item.type.indexOf('image') !== -1) {
          e.preventDefault();

          const file = item.getAsFile();
          if (file) {
            // Processar a imagem colada
            handlePastedImage(file);
          }
        }
      }
    });

    // Upload de arquivo
    fileInput.addEventListener('change', (e) => {
      const newFiles = Array.from(e.target.files);
      const imageFiles = newFiles.filter((file) => file.type.startsWith('image/'));
      const currentImageCount = uploadedFiles.filter((file) =>
        file.type.startsWith('image/')
      ).length;

      // Verificar se adicionar novas imagens ultrapassaria o limite
      if (currentImageCount + imageFiles.length > 3) {
        const previewContainer = document.getElementById('kenAiImagePreviewContainer');
        const limitMessage = document.createElement('div');
        limitMessage.className = 'ken-ai-image-limit-message';
        limitMessage.textContent = '🚫 Limite máximo de 3 imagens atingido';

        // Manter as imagens existentes
        const imageWrapper = document.createElement('div');
        imageWrapper.className = 'ken-ai-image-preview-wrapper';

        // Mostrar as 3 primeiras imagens existentes
        const existingImageFiles = uploadedFiles
          .filter((file) => file.type.startsWith('image/'))
          .slice(0, 3);

        existingImageFiles.forEach((file) => {
          const reader = new FileReader();
          reader.onload = (e) => {
            const previewDiv = document.createElement('div');
            previewDiv.className = 'ken-ai-image-preview';

            const img = document.createElement('img');
            img.src = e.target.result;

            const removeBtn = document.createElement('button');
            removeBtn.className = 'ken-ai-image-preview-remove';
            removeBtn.innerHTML = '&times;';
            removeBtn.onclick = () => {
              uploadedFiles = uploadedFiles.filter((f) => f !== file);
              updateImagePreviews();
            };

            previewDiv.appendChild(img);
            previewDiv.appendChild(removeBtn);
            imageWrapper.appendChild(previewDiv);
          };
          reader.readAsDataURL(file);
        });

        previewContainer.innerHTML = '';
        previewContainer.appendChild(limitMessage);
        previewContainer.appendChild(imageWrapper);
        previewContainer.style.display = 'flex';
        return;
      }

      uploadedFiles = [...uploadedFiles, ...newFiles];
      updateImagePreviews();
    });

    // Atalhos
    document.addEventListener('keydown', (e) => {
      // Abrir: Ctrl + .
      if (e.ctrlKey && (e.key === '.' || e.code === 'Period')) {
        e.preventDefault();
        if (!panel.classList.contains('open')) {
        togglePanel();
        }
      }

      // Fechar: Ctrl + ,
      if (e.ctrlKey && (e.key === ',' || e.code === 'Comma')) {
        e.preventDefault();
        if (panel.classList.contains('open')) {
          closePanel();
        }
      }

      // Fechar com Escape
      if (e.key === 'Escape' && panel.classList.contains('open')) {
        closePanel();
      }
    });

    // Detectar seleção de texto na página
    document.addEventListener('mouseup', (event) => {
      // Verificar se o clique não foi em um link
      if (event.target.tagName.toLowerCase() === 'a') return;

      // Obter seleção de texto
      const selection = window.getSelection();
      let selectedText = '';

      // Verificar se há uma seleção
      if (selection.rangeCount > 0) {
        const range = selection.getRangeAt(0);
        const container = range.commonAncestorContainer;

        // Extrair texto sem tags HTML
        const tempDiv = document.createElement('div');
        tempDiv.appendChild(range.cloneContents());
        selectedText = tempDiv.textContent.trim();
      }

      // Verificar condições de texto
      if (selectedText && selectedText.length > 0 && selectedText.length < 500) {
        // Remover múltiplos espaços e quebras de linha
        selectedText = selectedText.replace(/\s+/g, ' ');

        // Mostrar tooltip com opções
        showSelectionTooltip(selectedText);
      }
    });

    // Função para mostrar tooltip de seleção
    function showSelectionTooltip(text) {
      console.log('Iniciando showSelectionTooltip com texto:', text);

      // Remove tooltip anterior se existir
      const existingTooltip = document.getElementById('kenAiTooltip');
      if (existingTooltip) existingTooltip.remove();

      // Verificar se o painel existe
      const panel = document.getElementById('kenAiPanel');
      const input = document.getElementById('kenAiInput');

      if (!panel || !input) {
        console.error('Painel ou input não encontrados');
        return;
      }

      const tooltip = document.createElement('div');
      tooltip.id = 'kenAiTooltip';
      tooltip.innerHTML = `
        <div style="
            position: fixed;
            display: flex;
            gap: 8px;
            z-index: 1000000;
            font-family: 'Inter', sans-serif;
        ">
            <!-- Botão principal Explicar -->
            <div style="
                background: linear-gradient(135deg, #6366f1, #8b5cf6);
                color: white;
                padding: 8px 12px;
                border-radius: 20px;
                font-size: 12px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                cursor: pointer;
                font-weight: 500;
                border: 1px solid rgba(255,255,255,0.2);
                backdrop-filter: blur(10px);
                transition: all 0.2s ease;
            "
            onmouseover="this.style.transform='scale(1.05)'"
            onmouseout="this.style.transform='scale(1)'"
            onclick="
                console.log('Tooltip Explicar clicado');
                const panel = document.getElementById('kenAiPanel');
                const input = document.getElementById('kenAiInput');
                if (panel && input) {
                    panel.classList.add('open');
                    panel.style.right = '0';
                    input.value = 'Explique: ${text.replace(/'/g, "\\'")}';
                    input.focus();
                    document.getElementById('kenAiTooltip').remove();
                }
            ">
                <i class="fas fa-graduation-cap"></i> Explicar
            </div>

            <!-- Mini KEN AI Chat -->
            <div style="
                background: linear-gradient(135deg, #6366f1, #8b5cf6);
                color: white;
                padding: 8px 12px;
                border-radius: 20px;
                font-size: 12px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                cursor: pointer;
                font-weight: 500;
                border: 1px solid rgba(255,255,255,0.2);
                backdrop-filter: blur(10px);
                transition: all 0.2s ease;
            "
            onmouseover="this.style.transform='scale(1.05)'"
            onmouseout="this.style.transform='scale(1)'"
            onclick="openMiniKenWithContext('${text.replace(/'/g, "\\'")}')">
                <i class="fas fa-robot"></i> Mini KEN
            </div>
        </div>
    `;

      // Posicionar tooltip
      const selection = window.getSelection();
      if (selection.rangeCount > 0) {
        const range = selection.getRangeAt(0);
        const rect = range.getBoundingClientRect();
        const tooltipDiv = tooltip.firstElementChild;

        tooltipDiv.style.left = rect.left + rect.width / 2 - 120 + 'px';
        tooltipDiv.style.top = rect.top - 50 + 'px';
      }

      document.body.appendChild(tooltip);
      console.log('Tooltip com menu AI adicionado ao corpo do documento');

      // Adicionar evento para fechar menu ao clicar fora
      const closeMenuOnClickOutside = (event) => {
        const dropdown = document.getElementById('kenAiMenuDropdown');
        const menuButton = event.target.closest('[onclick*="kenAiMenuDropdown"]');

        if (dropdown && !dropdown.contains(event.target) && !menuButton) {
          dropdown.style.display = 'none';
        }
      };

      document.addEventListener('click', closeMenuOnClickOutside);

      // Remove tooltip após 8 segundos (aumentado para dar tempo de usar o menu)
      const removeTooltip = () => {
        if (tooltip.parentNode) {
          tooltip.remove();
          document.removeEventListener('click', closeMenuOnClickOutside);
          console.log('Tooltip removido');
        }
      };

      setTimeout(removeTooltip, 8000);

      // Também remover se clicar fora do tooltip
      setTimeout(() => {
        document.addEventListener(
          'click',
          (event) => {
            if (!tooltip.contains(event.target)) {
              removeTooltip();
            }
          },
          { once: true }
        );
      }, 100);
    }

    // Função para abrir Mini KEN Chat (global)
    window.openMiniKenChat = function (selectedText) {
      console.log('Abrindo Mini KEN Chat com texto:', selectedText);

      // Debug: Verificar seleção atual
      const selection = window.getSelection();
      console.log('Seleção atual:', selection);
      console.log('Ranges na seleção:', selection.rangeCount);

      if (selection.rangeCount > 0) {
        const range = selection.getRangeAt(0);
        console.log('Range selecionado:', range);
        console.log('Conteúdo do range:', range.toString());

        // Verificar se há imagens na seleção
        const tempDiv = document.createElement('div');
        tempDiv.appendChild(range.cloneContents());
        const images = tempDiv.querySelectorAll('img');
        console.log('Imagens na seleção (debug):', images.length);
        images.forEach((img, i) => {
          console.log(`Imagem ${i + 1}:`, img.src, img.alt);
        });
      }

      // Remover tooltip de seleção
      const tooltip = document.getElementById('kenAiTooltip');
      if (tooltip) tooltip.remove();

      // Remover mini chat anterior se existir
      const existingMiniChat = document.getElementById('kenMiniChat');
      if (existingMiniChat) existingMiniChat.remove();

      // Criar mini chat
      createMiniKenChat(selectedText);
    };
    // Função para criar Mini KEN Chat
    function createMiniKenChat(selectedText) {
      // Obter posição da seleção e capturar imagens
      const selection = window.getSelection();
      let rect = { left: window.innerWidth / 2, top: window.innerHeight / 2, width: 0, height: 0 };
      let selectedImages = [];

      // Usar contexto armazenado se disponível
      const savedContext = window.miniKenContext || null;

      if (selection.rangeCount > 0) {
        rect = selection.getRangeAt(0).getBoundingClientRect();

        // Capturar imagens na seleção
        const range = selection.getRangeAt(0);

        // DEBUG AVANÇADO - Mostrar detalhes da seleção
        console.log('=== DETECÇÃO DE IMAGENS AVANÇADA ===');
        console.log('Range:', range);
        console.log('Texto selecionado:', selectedText);
        console.log('Ancestor container:', range.commonAncestorContainer);

        // Método 1: Clonar conteúdo da seleção (melhorado)
        try {
          const tempDiv = document.createElement('div');
          tempDiv.appendChild(range.cloneContents());

          // Debug do conteúdo clonado
          console.log('Conteúdo HTML clonado:', tempDiv.innerHTML);

          // Buscar imagens no conteúdo clonado
          const clonedImages = tempDiv.querySelectorAll('img');
          console.log('Imagens encontradas no conteúdo clonado:', clonedImages.length);

          clonedImages.forEach(img => {
            console.log('Imagem clonada encontrada:', img.src, img.alt);
            if (img.src) {
              selectedImages.push({
                src: img.src,
                alt: img.alt || 'Imagem selecionada',
                width: img.width || 'auto',
                height: img.height || 'auto'
              });
            }
          });
        } catch (e) {
          console.error('Erro ao clonar conteúdo da seleção:', e);
        }

        // Método 2: Verificar elementos intersectando com a seleção (melhorado)
        try {
          const selectionRect = range.getBoundingClientRect();
          console.log('Retângulo da seleção:', selectionRect);

          // Buscar todas as imagens visíveis na página
          const allImages = Array.from(document.querySelectorAll('img')).filter(img => {
            const imgRect = img.getBoundingClientRect();
            const isVisible = imgRect.width > 0 && imgRect.height > 0 && img.src;
            if (isVisible) {
              console.log('Imagem visível encontrada:', img.src, 'Dimensões:', imgRect);
            }
            return isVisible;
          });

          console.log('Total de imagens visíveis na página:', allImages.length);

          allImages.forEach(img => {
            const imgRect = img.getBoundingClientRect();

            // Verificar se a imagem está contida ou intersecta com a seleção
            const intersects = !(imgRect.right < selectionRect.left ||
              imgRect.left > selectionRect.right ||
              imgRect.bottom < selectionRect.top ||
              imgRect.top > selectionRect.bottom);

            // Verificar se a imagem está próxima da seleção
            const distance = Math.sqrt(
              Math.pow((imgRect.left + imgRect.width / 2) - (selectionRect.left + selectionRect.width / 2), 2) +
              Math.pow((imgRect.top + imgRect.height / 2) - (selectionRect.top + selectionRect.height / 2), 2)
            );

            console.log(`Imagem ${img.src} - Intersecta: ${intersects}, Distância: ${distance}`);

            if ((intersects || distance < 150) && img.src && selectedImages.length < 3) {
              console.log('Imagem intersectando/próxima encontrada:', img.src, img.alt);
              // Evitar duplicatas
              const alreadyAdded = selectedImages.some(existing => existing.src === img.src);
              if (!alreadyAdded) {
                selectedImages.push({
                  src: img.src,
                  alt: img.alt || 'Imagem na seleção',
                  width: img.width || 'auto',
                  height: img.height || 'auto'
                });
                console.log(`Imagem ${selectedImages.length}/3 adicionada`);
              }
            } else if (selectedImages.length >= 3) {
              console.log('Limite de 3 imagens atingido na captura inicial');
            }
          });
        } catch (e) {
          console.error('Erro ao verificar intersecção de imagens:', e);
        }

        // Método 3: Verificar se a seleção contém elementos img diretamente (melhorado)
        try {
          // Usar TreeWalker para encontrar todas as imagens no documento
          const walker = document.createTreeWalker(
            document.body,
            NodeFilter.SHOW_ELEMENT,
            {
              acceptNode: function (node) {
                if (node.tagName === 'IMG') {
                  return NodeFilter.FILTER_ACCEPT;
                }
                return NodeFilter.FILTER_SKIP;
              }
            }
          );

          let node;
          while (node = walker.nextNode()) {
            if (selectedImages.length >= 3) {
              console.log('Limite de 3 imagens atingido no TreeWalker');
              break;
            }
            if (range.intersectsNode(node)) {
              console.log('Imagem encontrada via TreeWalker:', node.src, node.alt);
              const alreadyAdded = selectedImages.some(existing => existing.src === node.src);
              if (!alreadyAdded && node.src) {
                selectedImages.push({
                  src: node.src,
                  alt: node.alt || 'Imagem via TreeWalker',
                  width: node.width || 'auto',
                  height: node.height || 'auto'
                });
                console.log(`Imagem ${selectedImages.length}/3 adicionada via TreeWalker`);
              }
            }
          }
        } catch (e) {
          console.error('Erro no TreeWalker:', e);
        }

        console.log('Total de imagens capturadas:', selectedImages.length, selectedImages);
      }

      // Calcular posição do mini chat (próximo à seleção, mas visível)
      let chatLeft = rect.left + rect.width / 2 - 200; // Centralizar horizontalmente
      let chatTop = rect.bottom + 10; // Abaixo da seleção

      // Ajustar se sair da tela
      if (chatLeft < 10) chatLeft = 10;
      if (chatLeft + 400 > window.innerWidth - 10) chatLeft = window.innerWidth - 410;
      if (chatTop + 500 > window.innerHeight - 10) chatTop = rect.top - 510; // Acima se não couber embaixo
      if (chatTop < 10) chatTop = 10;

      const miniChat = document.createElement('div');
      miniChat.id = 'kenMiniChat';

      try {
        // Usar DOMParser para contornar restrições de TrustedHTML
        const htmlContent = `
          <!-- Mini Chat Container (Móvel) -->
          <div id="miniChatContainer" style="
            position: fixed;
            left: ${chatLeft}px;
            top: ${chatTop}px;
            width: 400px;
            height: 500px;
            background: linear-gradient(180deg, #6366f1 0%, #8b5cf6 50%, #a855f7 100%);
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.4);
            z-index: 1000002;
            font-family: 'Inter', sans-serif;
            border: 1px solid rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            display: flex;
            flex-direction: column;
            animation: miniChatSlideIn 0.3s ease-out;
          ">
            <!-- Header do Mini Chat (Draggable) -->
            <div id="miniChatHeader" style="
              padding: 15px 20px;
              border-bottom: 1px solid rgba(255, 255, 255, 0.15);
              display: flex;
              align-items: center;
              justify-content: space-between;
              background: rgba(255, 255, 255, 0.1);
              border-radius: 20px 20px 0 0;
              cursor: move;
              user-select: none;
            ">
              <div style="display: flex; align-items: center; gap: 10px;">
                <div style="
                  width: 28px;
                  height: 28px;
                  background: linear-gradient(45deg, #ff6b6b, #ffd93d);
                  border-radius: 8px;
                  display: flex;
                  align-items: center;
                  justify-content: center;
                  font-weight: bold;
                  color: white;
                  font-size: 12px;
                ">KEN</div>
                <div>
                  <div style="color: white; font-size: 14px; font-weight: 600;">Mini KEN AI</div>
                  <div style="color: rgba(255, 255, 255, 0.7); font-size: 10px;">
                    <i class="fas fa-arrows-alt" style="margin-right: 4px;"></i>Arraste para mover
                  </div>
                </div>
              </div>
              <div style="display: flex; gap: 8px;">
                <button id="clearMiniChatHistory" style="
                  width: 28px;
                  height: 28px;
                  border: none;
                  border-radius: 8px;
                  background: rgba(255, 255, 255, 0.1);
                  color: white;
                  cursor: pointer;
                  display: flex;
                  align-items: center;
                  justify-content: center;
                  transition: all 0.2s ease;
                " onmouseover="this.style.background='rgba(255, 255, 255, 0.2)'" onmouseout="this.style.background='rgba(255, 255, 255, 0.1)'" title="Limpar histórico">
                  <i class="fas fa-trash-alt"></i>
                </button>
                <button onclick="closeMiniKenChat()" style="
                  width: 28px;
                  height: 28px;
                  border: none;
                  border-radius: 8px;
                  background: rgba(255, 255, 255, 0.1);
                  color: white;
                  cursor: pointer;
                  display: flex;
                  align-items: center;
                  justify-content: center;
                  transition: all 0.2s ease;
                " onmouseover="this.style.background='rgba(255, 255, 255, 0.2)'" onmouseout="this.style.background='rgba(255, 255, 255, 0.1)'">
                  <i class="fas fa-times"></i>
                </button>
              </div>
            </div>
        `;

        // Usar parser para converter HTML para DOM
        const parser = new DOMParser();
        const doc = parser.parseFromString(htmlContent, 'text/html');
        const container = doc.body.firstChild;

        if (container) {
          miniChat.appendChild(container);

          // Continuar criando os elementos restantes manualmente
          const messagesContainer = document.createElement('div');
          messagesContainer.id = 'miniChatMessages';
          messagesContainer.style.cssText = `
            flex: 1;
            padding: 15px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 10px;
            height: 380px;
            font-size: 13px;
            line-height: 1.4;
          `;

          // Mensagem inicial com texto selecionado
          const initialMessage = document.createElement('div');
          initialMessage.style.cssText = `
            background: rgba(255, 255, 255, 0.1);
            padding: 10px 12px;
            border-radius: 12px;
            border-left: 3px solid #ffd93d;
            margin-bottom: 10px;
          `;

          // Título do conteúdo selecionado
          const titleDiv = document.createElement('div');
          titleDiv.style.cssText = `
            color: #ffd93d;
            font-size: 10px;
            font-weight: 600;
            margin-bottom: 5px;
            display: flex;
            justify-content: space-between;
            align-items: center;
          `;
          titleDiv.innerHTML = '<span><i class="fas fa-quote-left"></i> CONTEÚDO SELECIONADO</span>';

          // Adicionar badge de contexto
          const contextBadge = document.createElement('span');
          contextBadge.style.cssText = `
            background: rgba(255, 217, 61, 0.2);
            color: #ffd93d;
            padding: 2px 6px;
            border-radius: 10px;
            font-size: 8px;
            font-weight: bold;
          `;
          contextBadge.textContent = 'CONTEXTO';
          titleDiv.appendChild(contextBadge);

          // Conteúdo selecionado
          const contentDiv = document.createElement('div');
          contentDiv.style.cssText = `
            color: white;
            font-size: 11px;
            line-height: 1.4;
            max-height: 150px;
            overflow-y: auto;
            padding-right: 5px;
            scrollbar-width: thin;
            scrollbar-color: rgba(255, 255, 255, 0.3) transparent;
          `;
          contentDiv.textContent = selectedText;

          // Adicionar elementos à mensagem inicial
          initialMessage.appendChild(titleDiv);
          initialMessage.appendChild(contentDiv);

          // Adicionar imagens capturadas se houver
          if (selectedImages.length > 0) {
            const imagesContainer = document.createElement('div');
            imagesContainer.style.marginTop = '8px';

            const imagesTitle = document.createElement('div');
            imagesTitle.style.cssText = `
              color: #ffd93d;
              font-size: 9px;
              font-weight: 600;
              margin-bottom: 5px;
            `;
            imagesTitle.innerHTML = `<i class="fas fa-image"></i> IMAGENS CAPTURADAS (${selectedImages.length})`;

            const imagesGrid = document.createElement('div');
            imagesGrid.style.cssText = `
              display: flex;
              gap: 5px;
              flex-wrap: wrap;
            `;

            // Adicionar cada imagem
            selectedImages.forEach((img, index) => {
              const imgContainer = document.createElement('div');
              imgContainer.style.position = 'relative';

              const imgElement = document.createElement('img');
              imgElement.src = img.src;
              imgElement.alt = img.alt;
              imgElement.style.cssText = `
                max-width: 60px;
                max-height: 60px;
                border-radius: 4px;
                object-fit: cover;
                border: 1px solid rgba(255, 255, 255, 0.2);
                cursor: pointer;
                transition: transform 0.2s ease;
              `;
              imgElement.onclick = function () {
                window.openImagePreview(img.src.replace(/'/g, "\\'"), img.alt.replace(/'/g, "\\'"));
              };
              imgElement.onmouseover = function () {
                this.style.transform = 'scale(1.1)';
              };
              imgElement.onmouseout = function () {
                this.style.transform = 'scale(1)';
              };

              const badge = document.createElement('div');
              badge.style.cssText = `
                position: absolute;
                bottom: -2px;
                right: -2px;
                background: #ffd93d;
                color: #333;
                border-radius: 50%;
                width: 16px;
                height: 16px;
                font-size: 8px;
                display: flex;
                align-items: center;
                justify-content: center;
                font-weight: bold;
              `;
              badge.textContent = index + 1;

              imgContainer.appendChild(imgElement);
              imgContainer.appendChild(badge);
              imagesGrid.appendChild(imgContainer);
            });

            imagesContainer.appendChild(imagesTitle);
            imagesContainer.appendChild(imagesGrid);
            initialMessage.appendChild(imagesContainer);
          }

          // Adicionar mensagem inicial ao container
          messagesContainer.appendChild(initialMessage);

          // Botões de ação rápida
          const quickActions = document.createElement('div');
          quickActions.id = 'miniChatQuickActions';
          quickActions.style.cssText = `
          display: flex !important;
           gap: 4px !important;
            flex-wrap: wrap;
            margin-bottom: 15px;
            transition: all 0.3s ease;
          `;

          // Função para criar botão de ação rápida
          function createQuickButton(text, icon, action) {
            const btn = document.createElement('button');
            btn.style.cssText = `
              background: rgba(255, 255, 255, 0.1);
              border: 1px solid rgba(255, 255, 255, 0.2);
              border-radius: 15px;
              padding: 6px 10px;
              color: white;
              font-size: 10px;
              cursor: pointer;
              transition: all 0.2s ease;
              font-family: 'Inter', sans-serif;
            `;
            btn.innerHTML = `<i class="fas fa-${icon}"></i> ${text}`;
            btn.onmouseover = function () {
              this.style.background = 'rgba(255, 255, 255, 0.2)';
            };
            btn.onmouseout = function () {
              this.style.background = 'rgba(255, 255, 255, 0.1)';
            };
            btn.onclick = function () {
              window.quickMiniAction(action);
            };
            return btn;
          }

          // Adicionar botões de ação rápida
          quickActions.appendChild(createQuickButton('Explicar', 'lightbulb', 'Explique:'));
          quickActions.appendChild(createQuickButton('Resumir', 'compress-alt', 'Resuma:'));
          quickActions.appendChild(createQuickButton('Traduzir', 'language', 'Traduza:'));
          quickActions.appendChild(createQuickButton('Quiz', 'question-circle', 'Crie um quiz sobre:'));


          // Adicionar botões de ação rápida ao container
          messagesContainer.appendChild(quickActions);

          // Criar área para preview de imagens centralizada (área amarela)
          const centralImagePreview = document.createElement('div');
          centralImagePreview.id = 'miniChatFilePreview';
          centralImagePreview.style.cssText = `
            display: none !important;
            position: fixed;
            bottom: 130px;
            left: 50%;
            transform: translateX(-50%);
            padding: 10px;
            margin: 15px auto;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 15px;
            max-height: 200px;
            width: 90%;
            overflow-y: auto;
            overflow-x: hidden;
            text-align: center;
            border: 1px dashed rgba(255, 217, 61, 0.3);
          `;

          // Adicionar área de preview centralizada ao container de mensagens
          messagesContainer.appendChild(centralImagePreview);

          // Adicionar mensagem inicial ao container
          messagesContainer.appendChild(initialMessage);

          // Adicionar área de mensagens ao container principal
          container.appendChild(messagesContainer);

          // Carregar histórico de conversas anteriores
          loadMiniChatHistory(messagesContainer);

          // Adicionar mensagem de boas-vindas se não houver histórico
          if (miniChatHistory.length === 0) {
            // Adicionar resposta da IA com mensagem de boas-vindas
            const welcomeMessage = document.createElement('div');
            welcomeMessage.className = 'mini-chat-welcome-message';
            welcomeMessage.innerHTML = `
              <div style="
                display: flex;
                justify-content: flex-start;
                margin-bottom: 10px;
                animation: slideInLeft 0.3s ease-out;">
                <div style="
                  background: rgba(0, 0, 0, 0.2);
                  color: white;
                  padding: 8px 12px;
                  border-radius: 12px;
                  max-width: 80%;
                  font-size: 11px;
                  line-height: 1.4;
                  border-bottom-left-radius: 4px;
                ">
                  Olá! Sou o Ken Mini e posso ajudar com o conteúdo selecionado. Tenho memória de conversas anteriores, então você pode fazer perguntas relacionadas às minhas respostas anteriores.
                </div>
              </div>
            `;
            messagesContainer.appendChild(welcomeMessage);
          }

          // Criar área de input
          const inputArea = document.createElement('div');
          inputArea.id = 'miniChatInputArea';
          inputArea.style.cssText = `
            padding: 15px;
            border-top: 1px solid rgba(255, 255, 255, 0.15);
            background: rgba(255, 255, 255, 0.05);
            border-radius: 0 0 20px 20px;
            position: relative;
          `;

          // Indicação de drag and drop
          const dragDropHint = document.createElement('div');
          dragDropHint.style.cssText = `
            text-align: center;
            color: rgba(255, 255, 255, 0.5);
            font-size: 10px;
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 5px;
          `;
          dragDropHint.innerHTML = '<i class="fas fa-image"></i><span>Arraste imagens aqui ou digite sua pergunta</span>';
          inputArea.appendChild(dragDropHint);

          // Container de input e botão
          const inputContainer = document.createElement('div');
          inputContainer.style.cssText = 'display: flex; gap: 8px; align-items: flex-end;';

          // Wrapper do input
          const inputWrapper = document.createElement('div');
          inputWrapper.style.cssText = 'flex: 1; position: relative;';

          // Textarea (sem área de preview aqui, pois já foi adicionada acima)
          const textarea = document.createElement('textarea');
          textarea.id = 'miniChatInput';
          textarea.placeholder = 'Pergunte sobre o conteúdo...';
          textarea.style.cssText = `
            width: calc(100% - 16px);
            height: 35px;
            min-height: 35px;
            max-height: 80px;
            padding: 8px 12px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 18px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 12px;
            font-family: 'Inter', sans-serif;
            resize: none;
            outline: none;
            transition: all 0.2s ease;
            box-sizing: border-box;

          `;
          textarea.oninput = function () {
            this.style.height = '';
            this.style.height = Math.min(80, this.scrollHeight) + 'px';
          };
          textarea.onfocus = function () {
            this.style.borderColor = 'rgba(255, 255, 255, 0.4)';
          };
          textarea.onblur = function () {
            this.style.borderColor = 'rgba(255, 255, 255, 0.2)';
          };

          // Montar componentes (apenas textarea, sem preview)
          inputWrapper.appendChild(textarea);

          // Criar botão de enviar
          const sendBtn = document.createElement('button');
          sendBtn.style.cssText = `
            width: 35px;
            height: 35px;
            border: none;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
            font-size: 14px;
            flex-shrink: 0;
          `;
          sendBtn.innerHTML = '<i class="fas fa-paper-plane"></i>';
          sendBtn.onmouseover = function () {
            this.style.transform = 'scale(1.1)';
            this.style.boxShadow = '0 4px 12px rgba(102, 126, 234, 0.4)';
          };
          sendBtn.onmouseout = function () {
            this.style.transform = 'scale(1)';
            this.style.boxShadow = 'none';
          };
          sendBtn.onclick = function (e) {
            e.preventDefault();
            e.stopPropagation();
            window.sendMiniChatMessage();
          };

          inputContainer.appendChild(inputWrapper);
          inputContainer.appendChild(sendBtn);
          inputArea.appendChild(inputContainer);

          // Adicionar área de input ao container principal
          container.appendChild(inputArea);

          // Adicionar ao DOM
          document.body.appendChild(miniChat);

          // Configurar eventos
          const input = document.getElementById('miniChatInput');
          if (input) {
            // Focar no input
            setTimeout(() => input.focus(), 300);

            // Configurar tecla Enter para enviar
            input.addEventListener('keydown', (e) => {
              if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                window.sendMiniChatMessage();
              }
            });

            // Adicionar evento para colar imagens
            input.addEventListener('paste', function(e) {
              const clipboardData = e.clipboardData || window.clipboardData;
              const items = clipboardData.items;

              for (let i = 0; i < items.length; i++) {
                const item = items[i];

                // Verificar se é uma imagem
                if (item.type.indexOf('image') !== -1) {
                  e.preventDefault();

                  const file = item.getAsFile();
                  if (file) {
                    // Processar a imagem colada
                    handlePastedImageMini(file);
                  }
                }
              }
            });

            // Adicionar texto selecionado como primeira mensagem se houver
            if (selectedText.trim()) {
              input.value = 'Explique: ';
              setTimeout(() => {
                input.setSelectionRange(input.value.length, input.value.length);
                // Removido o envio automático
                // window.sendMiniChatMessage();
              }, 500);
            }
          }

          // Tornar arrastável
          makeMiniChatDraggable();

          // Configurar botão de limpar histórico
          setupClearHistoryButton();


          // Configurar drag and drop de imagens
          setupImageDragDrop();

          // Armazenar imagens selecionadas globalmente (limitado a 3)
          const originalCount = selectedImages.length;
          window.miniChatSelectedImages = selectedImages.slice(0, 3);

          // Debug
          console.log('Imagens armazenadas globalmente:', window.miniChatSelectedImages);
          if (originalCount > 3) {
            console.log(`${originalCount - 3} imagens ignoradas (limite de 3 no Mini Chat)`);
          }

          // Atualizar display de imagens se houver
          if (window.miniChatSelectedImages.length > 0) {
            setTimeout(() => {
              updateMiniChatImages();
              updateCaptureButton();
            }, 500);
          }
        } else {
          console.error('Falha ao criar elementos do mini chat usando DOMParser');
          throw new Error('Falha no parser');
        }
      } catch (error) {
        console.error('Erro ao criar mini chat com DOMParser:', error);

        // Fallback para método tradicional (menos elementos)
        const fallbackHTML = `
          <div id="miniChatContainer" style="position:fixed; left:${chatLeft}px; top:${chatTop}px; width:400px; height:500px; background:#6366f1; border-radius:20px; z-index:1000002;">
            <div id="miniChatHeader" style="padding:15px; border-bottom:1px solid rgba(255,255,255,0.2);">
              <div style="color:white; font-size:14px;">Mini KEN AI</div>
              <button onclick="closeMiniKenChat()" style="position:absolute; right:15px; top:15px; background:none; border:none; color:white; cursor:pointer;">×</button>
            </div>
            <div id="miniChatMessages" style="height:380px; overflow-y:auto; padding:15px;">
              <div style="color:white; padding:10px; background:rgba(255,255,255,0.1); border-radius:10px; margin-bottom:10px;">
                ${selectedText}
              </div>
            </div>
            <div id="miniChatInputArea" style="padding:15px; border-top:1px solid rgba(255,255,255,0.2);">
              <div id="miniChatFilePreview" style="display:none; position:fixed; bottom:130px; left:50%; transform:translateX(-50%); margin-bottom:8px; background:rgba(0,0,0,0.2); border-radius:10px; padding:8px; max-height:200px; overflow-y:auto;"></div>
              <div style="display:flex; gap:8px; align-items:flex-end;">
                <textarea id="miniChatInput" placeholder="Pergunte sobre o conteúdo..." style="flex:1; padding:10px; border-radius:10px; border:none; resize:none; height:35px;"></textarea>
                <button onclick="window.sendMiniChatMessage()" style="width:35px; height:35px; border:none; border-radius:50%; background:linear-gradient(135deg, #667eea, #764ba2); color:white; cursor:pointer; display:flex; align-items:center; justify-content:center; font-size:14px;">
                  <i class="fas fa-paper-plane"></i>
                </button>
              </div>
            </div>
          </div>
        `;

        miniChat.innerHTML = fallbackHTML;
        document.body.appendChild(miniChat);

        // Carregar histórico mesmo no modo fallback
        const messagesContainer = document.getElementById('miniChatMessages');
        if (messagesContainer) {
          loadMiniChatHistory(messagesContainer);

          // Adicionar mensagem de boas-vindas se não houver histórico
          if (miniChatHistory.length === 0) {
            const welcomeMessage = document.createElement('div');
            welcomeMessage.innerHTML = `
              <div style="color:white; padding:10px; background:rgba(0,0,0,0.2); border-radius:10px; margin-bottom:10px;">
                Olá! Sou o Ken Mini e posso ajudar com o conteúdo selecionado. Tenho memória de conversas anteriores.
              </div>
            `;
            messagesContainer.appendChild(welcomeMessage);
          }
        }
      }
    }

    // Função para configurar o botão de limpar histórico
    function setupClearHistoryButton() {
      const clearBtn = document.getElementById('clearMiniChatHistory');
      if (!clearBtn) return;

      clearBtn.onclick = function (e) {
        e.preventDefault();
        e.stopPropagation();

        if (confirm('Deseja limpar o histórico de conversas do Ken Mini?')) {
          // Limpar histórico
          miniChatHistory = [];
          saveMiniChatHistory();

          // Limpar mensagens na interface
          const messagesContainer = document.getElementById('miniChatMessages');
          if (messagesContainer) {
            // Manter apenas a mensagem inicial (conteúdo selecionado)
            const initialMessage = messagesContainer.querySelector('[style*="border-left: 3px solid #ffd93d"]');
            messagesContainer.innerHTML = '';
            if (initialMessage) {
              messagesContainer.appendChild(initialMessage);
            }
          }

          // Mostrar feedback
          showFeedback('Histórico do Ken Mini limpo com sucesso', 'success');
        }
      };
    }
    // Função para configurar o botão de análise de seleção
    function setupAnalyzeSelectionButton() {
      // Verificar se o elemento miniChatHeader existe
      const miniChatHeader = document.getElementById('miniChatHeader');
      if (!miniChatHeader) return;

      // Verificar se o botão já existe
      if (document.getElementById('analyzeSelectionBtn')) return;

      // Criar botão de análise
      const analyzeBtn = document.createElement('button');
      analyzeBtn.id = 'analyzeSelectionBtn';
      analyzeBtn.innerHTML = '<i class="fas fa-magic"></i>';
      analyzeBtn.title = 'Analisar conteúdo selecionado';
      analyzeBtn.style.cssText = `
        position: absolute;
        right: 50px;
        top: 15px;
        background: none;
        border: none;
        color: white;
        font-size: 16px;
        cursor: pointer;
        opacity: 0.8;
        transition: all 0.2s ease;
      `;

      analyzeBtn.onmouseover = function () {
        this.style.opacity = '1';
        this.style.transform = 'scale(1.1)';
      };

      analyzeBtn.onmouseout = function () {
        this.style.opacity = '0.8';
        this.style.transform = 'scale(1)';
      };

      analyzeBtn.onclick = function (e) {
        e.preventDefault();
        e.stopPropagation();

        // Obter o conteúdo selecionado
        const selectedTextDiv = document.querySelector('#miniChatMessages [style*="border-left: 3px solid #ffd93d"]');
        if (!selectedTextDiv) {
          showFeedback('Nenhum conteúdo selecionado para analisar', 'error');
          return;
        }

        const selectedText = selectedTextDiv.textContent
          .replace('CONTEÚDO SELECIONADO', '')
          .replace('IMAGENS', '')
          .trim();

        if (!selectedText) {
          showFeedback('Texto selecionado vazio', 'error');
          return;
        }

        // Obter o input e enviar comando de análise
        const input = document.getElementById('miniChatInput');
        const messagesContainer = document.getElementById('miniChatMessages');

        if (input && messagesContainer) {
          // Escolher um comando de análise aleatório
          const analyzeCommands = [
            `Analise este texto: "${selectedText.substring(0, 100)}${selectedText.length > 100 ? '...' : ''}"`,
            `Explique o significado deste conteúdo`,
            `Resuma os principais pontos deste texto`,
            `Identifique os conceitos chave neste conteúdo`,
            `Explique este texto de forma simples`
          ];

          const randomCommand = analyzeCommands[Math.floor(Math.random() * analyzeCommands.length)];
          input.value = randomCommand;

          // Simular envio após um pequeno delay
          setTimeout(() => {
            // Simular evento de tecla Enter
            const event = new KeyboardEvent('keydown', {
              key: 'Enter',
              code: 'Enter',
              keyCode: 13,
              which: 13,
              bubbles: true
            });
            input.dispatchEvent(event);

            // Alternativa: chamar diretamente a função de envio
            if (typeof sendToMiniChat === 'function') {
              sendToMiniChat(randomCommand, messagesContainer);
            }
          }, 100);
        }
      };

      // Adicionar botão ao cabeçalho
    }

    // Função para tornar o Mini Chat arrastável
    function makeMiniChatDraggable() {
      const header = document.getElementById('miniChatHeader');
      const container = document.getElementById('miniChatContainer');

      if (!header || !container) return;

      let isDragging = false;
      let currentX;
      let currentY;
      let initialX;
      let initialY;
      let xOffset = 0;
      let yOffset = 0;

      header.addEventListener('mousedown', dragStart);
      document.addEventListener('mousemove', drag);
      document.addEventListener('mouseup', dragEnd);

      function dragStart(e) {
        initialX = e.clientX - xOffset;
        initialY = e.clientY - yOffset;

        if (e.target === header || header.contains(e.target)) {
          isDragging = true;
          header.style.cursor = 'grabbing';
        }
      }

      function drag(e) {
        if (isDragging) {
          e.preventDefault();
          currentX = e.clientX - initialX;
          currentY = e.clientY - initialY;

          xOffset = currentX;
          yOffset = currentY;

          // Limitar às bordas da tela
          const maxX = window.innerWidth - container.offsetWidth;
          const maxY = window.innerHeight - container.offsetHeight;

          currentX = Math.max(0, Math.min(currentX, maxX));
          currentY = Math.max(0, Math.min(currentY, maxY));

          container.style.left = currentX + 'px';
          container.style.top = currentY + 'px';
        }
      }

      function dragEnd() {
        initialX = currentX;
        initialY = currentY;
        isDragging = false;
        header.style.cursor = 'move';
      }
    }

    // Função para atualizar display de imagens no mini chat
    function updateMiniChatImages() {
      const messagesContainer = document.getElementById('miniChatMessages');
      if (!messagesContainer || !window.miniChatSelectedImages) return;

      // Encontrar a div de conteúdo selecionado
      const contentDiv = messagesContainer.querySelector('[style*="border-left: 3px solid #ffd93d"]');
      if (!contentDiv) return;

      // Verificar se já existe seção de imagens
      let imageSection = contentDiv.querySelector('[style*="margin-top: 8px"]');

      if (window.miniChatSelectedImages.length > 0) {
        const imageHTML = `
          <div style="margin-top: 8px;">
            <div style="color: #ffd93d; font-size: 9px; font-weight: 600; margin-bottom: 5px;">
              <i class="fas fa-image"></i> IMAGENS CAPTURADAS (${window.miniChatSelectedImages.length}/3)
            </div>
            <div style="display: flex; gap: 5px; flex-wrap: wrap;">
              ${window.miniChatSelectedImages.map((img, index) => `
                <div style="position: relative;">
                  <img src="${img.src}" alt="${img.alt}" style="
                    max-width: 60px;
                    max-height: 60px;
                    border-radius: 4px;
                    object-fit: cover;
                    border: 1px solid rgba(255, 255, 255, 0.2);
                    cursor: pointer;
                    transition: transform 0.2s ease;
                  " onclick="openImagePreview('${img.src.replace(/'/g, "\\'")}', '${img.alt.replace(/'/g, "\\'")}');"
                  onmouseover="this.style.transform='scale(1.1)'"
                  onmouseout="this.style.transform='scale(1)'" />
                  <div style="
                    position: absolute;
                    bottom: -2px;
                    right: -2px;
                    background: #ffd93d;
                    color: #333;
                    border-radius: 50%;
                    width: 16px;
                    height: 16px;
                    font-size: 8px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    font-weight: bold;
                  ">${index + 1}</div>
                </div>
              `).join('')}
            </div>
          </div>
        `;

        if (imageSection) {
          imageSection.outerHTML = imageHTML;
        } else {
          contentDiv.insertAdjacentHTML('beforeend', imageHTML);
        }
      }
    }

    // Função para configurar drag and drop de imagens
    function setupImageDragDrop() {
      const inputArea = document.getElementById('miniChatInputArea');
      const messagesContainer = document.getElementById('miniChatMessages');

      if (!inputArea) return;

      // Prevenir comportamento padrão
      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        inputArea.addEventListener(eventName, preventDefaults, false);
        document.body.addEventListener(eventName, preventDefaults, false);
      });

      // Destacar área de drop
      ['dragenter', 'dragover'].forEach(eventName => {
        inputArea.addEventListener(eventName, highlight, false);
      });

      ['dragleave', 'drop'].forEach(eventName => {
        inputArea.addEventListener(eventName, unhighlight, false);
      });

      // Lidar com drop
      inputArea.addEventListener('drop', handleDrop, false);

      function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
      }

      function highlight() {
        inputArea.style.background = 'rgba(255, 217, 61, 0.2)';
        inputArea.style.borderTop = '2px dashed #ffd93d';
      }

      function unhighlight() {
        inputArea.style.background = 'rgba(255, 255, 255, 0.05)';
        inputArea.style.borderTop = '1px solid rgba(255, 255, 255, 0.15)';
      }

      function handleDrop(e) {
        const dt = e.dataTransfer;
        const files = dt.files;

        handleFiles(files);
      }

      function handleFiles(files) {
        [...files].forEach(uploadFile);
      }

      function uploadFile(file) {
        if (file.type.startsWith('image/')) {
          // Verificar limite de imagens antes de processar
          const currentUploadedImages = window.miniChatUploadedImages || [];
          const currentSelectedImages = window.miniChatSelectedImages || [];
          const totalImages = currentUploadedImages.length + currentSelectedImages.length;

          if (totalImages >= 3) {
            // Mostrar mensagem de limite atingido acima do preview existente
            const filePreview = document.getElementById('miniChatFilePreview');
            if (filePreview) {
              // Verificar se já existe uma mensagem de limite
              const existingLimitMessage = filePreview.querySelector('.mini-chat-limit-message');
              if (existingLimitMessage) {
                existingLimitMessage.remove();
              }

              // Criar mensagem de limite
              const limitMessage = document.createElement('div');
              limitMessage.className = 'mini-chat-limit-message';
              limitMessage.style.cssText = `
                background: rgba(255, 107, 107, 0.2);
                border: 1px solid #ff6b6b;
                border-radius: 8px;
                padding: 8px 12px;
                color: #ff6b6b;
                font-size: 11px;
                text-align: center;
                margin-bottom: 8px;
                animation: fadeInUp 0.3s ease;
                order: -1;
              `;
              limitMessage.innerHTML = '🚫 Limite máximo de 3 imagens atingido';

              // Inserir mensagem no início do preview (acima das imagens)
              filePreview.insertBefore(limitMessage, filePreview.firstChild);
              filePreview.style.display = 'flex';
              filePreview.style.flexDirection = 'column';

              // Remover mensagem após 4 segundos
              setTimeout(() => {
                if (limitMessage.parentNode) {
                  limitMessage.remove();
                }
              }, 4000);
            }
            return; // Não processar a imagem
          }

          const reader = new FileReader();
          reader.onload = function (e) {
            const filePreview = document.getElementById('miniChatFilePreview');

            // Mostrar área de preview se estiver oculta
            if (filePreview.style.display === 'none') {
              filePreview.style.display = 'flex';
              filePreview.style.flexDirection = 'column';
              filePreview.style.gap = '8px';
              filePreview.style.justifyContent = 'center';
              filePreview.style.position = 'fixed';
              filePreview.style.bottom = '130px';
              filePreview.style.left = '50%';
              filePreview.style.transform = 'translateX(-50%)';
              filePreview.style.maxHeight = '200px';
            }

            // Garantir que o container de imagens existe
            let imagesContainer = filePreview.querySelector('.mini-chat-images-container');
            if (!imagesContainer) {
              imagesContainer = document.createElement('div');
              imagesContainer.className = 'mini-chat-images-container';
              imagesContainer.style.cssText = `
                display: flex;
                flex-wrap: wrap;
                gap: 8px;
                justify-content: center;
              `;
              filePreview.appendChild(imagesContainer);
            }

            // Criar elemento de preview
            const previewItem = document.createElement('div');
            previewItem.className = 'mini-chat-image-preview';
            previewItem.style.position = 'relative';
            previewItem.style.display = 'inline-block';
            previewItem.style.margin = '5px';

            // Criar imagem em miniatura
            const img = document.createElement('img');
            img.src = e.target.result;
            img.alt = file.name;
            img.style.width = '60px';
            img.style.height = '60px';
            img.style.objectFit = 'cover';
            img.style.borderRadius = '5px';
            img.style.cursor = 'pointer';
            img.style.border = '2px solid rgba(255, 217, 61, 0.5)';
            img.onclick = () => openImagePreview(e.target.result, file.name);

            // Botão para remover imagem
            const removeBtn = document.createElement('button');
            removeBtn.innerHTML = '×';
            removeBtn.style.position = 'absolute';
            removeBtn.style.top = '-5px';
            removeBtn.style.right = '-5px';
            removeBtn.style.background = '#ff6b6b';
            removeBtn.style.color = 'white';
            removeBtn.style.border = 'none';
            removeBtn.style.borderRadius = '50%';
            removeBtn.style.width = '20px';
            removeBtn.style.height = '20px';
            removeBtn.style.fontSize = '12px';
            removeBtn.style.cursor = 'pointer';
            removeBtn.style.display = 'flex';
            removeBtn.style.alignItems = 'center';
            removeBtn.style.justifyContent = 'center';

            // Adicionar evento para remover imagem
            removeBtn.onclick = (evt) => {
              evt.stopPropagation();
              previewItem.remove();

              // Remover da lista de imagens
              if (window.miniChatUploadedImages) {
                window.miniChatUploadedImages = window.miniChatUploadedImages.filter(
                  img => img.src !== e.target.result
                );
              }

              // Esconder preview se não houver mais imagens no container
              const imagesContainer = filePreview.querySelector('.mini-chat-images-container');
              if (imagesContainer && imagesContainer.children.length === 0) {
                filePreview.style.display = 'none';
              }
            };

            // Montar preview
            previewItem.appendChild(img);
            previewItem.appendChild(removeBtn);

            // Adicionar ao container de imagens
            imagesContainer.appendChild(previewItem);

            // Armazenar imagem para envio com próxima mensagem
            if (!window.miniChatUploadedImages) {
              window.miniChatUploadedImages = [];
            }
            window.miniChatUploadedImages.push({
              src: e.target.result,
              name: file.name
            });
          };
          reader.readAsDataURL(file);
        }
      }
    }

    // Função para abrir preview de imagem (global)
    window.openImagePreview = function (src, alt) {
      const preview = document.createElement('div');
      preview.innerHTML = `
        <div style="
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0, 0, 0, 0.8);
          z-index: 1000003;
          display: flex;
          align-items: center;
          justify-content: center;
          backdrop-filter: blur(5px);
        " onclick="this.remove()">
          <div style="
            max-width: 90%;
            max-height: 90%;
            position: relative;
          ">
            <img src="${src}" alt="${alt}" style="
              max-width: 100%;
              max-height: 100%;
              border-radius: 8px;
              box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
            " />
            <button onclick="this.parentElement.parentElement.remove()" style="
              position: absolute;
              top: 10px;
              right: 10px;
              background: rgba(0, 0, 0, 0.7);
              color: white;
              border: none;
              border-radius: 50%;
              width: 30px;
              height: 30px;
              cursor: pointer;
              font-size: 14px;
            ">×</button>
          </div>
        </div>
      `;
      document.body.appendChild(preview);
    };

    // Função para fechar Mini KEN Chat (global)
    window.closeMiniKenChat = function () {
      const miniChat = document.getElementById('kenMiniChat');
      if (miniChat) {
        miniChat.style.animation = 'miniChatSlideOut 0.3s ease-in';
        setTimeout(() => {
          miniChat.remove();
        }, 300);
      }
    };

    // Função para processar imagem colada no Mini Chat
    function handlePastedImageMini(file) {
      // Verificar limite de imagens
      const currentUploadedImages = window.miniChatUploadedImages || [];
      const currentSelectedImages = window.miniChatSelectedImages || [];
      const totalImages = currentUploadedImages.length + currentSelectedImages.length;

      if (totalImages >= 3) {
        // Mostrar notificação de limite atingido
        showNotification('Limite de 3 imagens atingido. Remova uma imagem para adicionar outra.', 'warning');
        return;
      }

      // Verificar se é uma imagem válida
      if (!file.type.startsWith('image/')) {
        showNotification('Apenas imagens podem ser coladas.', 'error');
        return;
      }

      // Verificar tamanho do arquivo (limite de 10MB)
      const maxSize = 10 * 1024 * 1024; // 10MB
      if (file.size > maxSize) {
        showNotification('Imagem muito grande. Limite de 10MB.', 'error');
        return;
      }

      // Adicionar arquivo à lista de uploads
      if (!window.miniChatUploadedImages) {
        window.miniChatUploadedImages = [];
      }
      window.miniChatUploadedImages.push(file);

      // Atualizar preview
      updateImagePreviewsMini();

      // Mostrar notificação de sucesso
      showNotification('Imagem colada com sucesso!', 'success');

      // Focar no input
      const input = document.getElementById('miniChatInput');
      if (input) input.focus();
    }

    // Função para atualizar previews de imagens no Mini Chat
    function updateImagePreviewsMini() {
      const filePreview = document.getElementById('miniChatFilePreview');
      if (!filePreview) return;

      const uploadedImages = window.miniChatUploadedImages || [];

      // Mostrar área de preview se houver imagens
      if (uploadedImages.length > 0) {
        filePreview.style.display = 'flex';
        filePreview.innerHTML = ''; // Limpar conteúdo anterior

        // Garantir que o container de imagens existe
        let imagesContainer = filePreview.querySelector('.mini-chat-images-container');
        if (!imagesContainer) {
          imagesContainer = document.createElement('div');
          imagesContainer.className = 'mini-chat-images-container';
          imagesContainer.style.cssText = `
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            justify-content: center;
          `;
          filePreview.appendChild(imagesContainer);
        }

        // Adicionar previews das imagens
        uploadedImages.forEach((file, index) => {
          const reader = new FileReader();
          reader.onload = function(e) {
            // Criar elemento de preview
            const previewItem = document.createElement('div');
            previewItem.className = 'mini-chat-image-preview';
            previewItem.style.position = 'relative';
            previewItem.style.display = 'inline-block';
            previewItem.style.margin = '5px';

            // Criar imagem em miniatura
            const img = document.createElement('img');
            img.src = e.target.result;
            img.alt = file.name;
            img.style.width = '60px';
            img.style.height = '60px';
            img.style.objectFit = 'cover';
            img.style.borderRadius = '5px';
            img.style.cursor = 'pointer';
            img.style.border = '2px solid rgba(255, 217, 61, 0.5)';
            img.onclick = () => openImagePreview(e.target.result, file.name);

            // Botão para remover imagem
            const removeBtn = document.createElement('button');
            removeBtn.innerHTML = '×';
            removeBtn.style.position = 'absolute';
            removeBtn.style.top = '-5px';
            removeBtn.style.right = '-5px';
            removeBtn.style.background = '#ff6b6b';
            removeBtn.style.color = 'white';
            removeBtn.style.border = 'none';
            removeBtn.style.borderRadius = '50%';
            removeBtn.style.width = '20px';
            removeBtn.style.height = '20px';
            removeBtn.style.fontSize = '12px';
            removeBtn.style.cursor = 'pointer';
            removeBtn.style.display = 'flex';
            removeBtn.style.alignItems = 'center';
            removeBtn.style.justifyContent = 'center';

            // Adicionar evento para remover imagem
            removeBtn.onclick = (evt) => {
              evt.stopPropagation();
              previewItem.remove();

              // Remover da lista de imagens
              if (window.miniChatUploadedImages) {
                window.miniChatUploadedImages = window.miniChatUploadedImages.filter(
                  (img, idx) => idx !== index
                );

                // Esconder preview se não houver mais imagens
                if (window.miniChatUploadedImages.length === 0) {
                  filePreview.style.display = 'none';
                }
              }
            };

            // Montar preview
            previewItem.appendChild(img);
            previewItem.appendChild(removeBtn);
            imagesContainer.appendChild(previewItem);
          };
          reader.readAsDataURL(file);
        });
      } else {
        // Esconder área de preview se não houver imagens
        filePreview.style.display = 'none';
      }
    }

    // Função para mostrar notificações
    function showNotification(message, type = 'info') {
      // Criar elemento de notificação
      const notification = document.createElement('div');
      notification.className = `ken-ai-notification ken-ai-notification-${type}`;
      notification.textContent = message;

      // Estilos da notificação
      Object.assign(notification.style, {
        position: 'fixed',
        top: '20px',
        right: '20px',
        padding: '12px 20px',
        borderRadius: '8px',
        color: '#fff',
        fontWeight: '500',
        fontSize: '14px',
        zIndex: '10000',
        maxWidth: '300px',
        boxShadow: '0 4px 12px rgba(0,0,0,0.3)',
        transform: 'translateX(100%)',
        transition: 'transform 0.3s ease',
        fontFamily: 'system-ui, -apple-system, sans-serif'
      });

      // Cores baseadas no tipo
      switch(type) {
        case 'success':
          notification.style.background = 'linear-gradient(135deg, #10b981, #059669)';
          break;
        case 'error':
          notification.style.background = 'linear-gradient(135deg, #ef4444, #dc2626)';
          break;
        case 'warning':
          notification.style.background = 'linear-gradient(135deg, #f59e0b, #d97706)';
          break;
        default:
          notification.style.background = 'linear-gradient(135deg, #3b82f6, #2563eb)';
      }

      // Adicionar ao DOM
      document.body.appendChild(notification);

      // Animar entrada
      setTimeout(() => {
        notification.style.transform = 'translateX(0)';
      }, 100);

      // Remover após 3 segundos
      setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
          if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
          }
        }, 300);
      }, 3000);
    }

    // Função para debug de imagens no Mini Chat (global)
    window.debugMiniChatImages = function () {
      console.log('=== DEBUG MINI CHAT IMAGES ===');
      console.log('Imagens armazenadas:', window.miniChatSelectedImages);
      console.log('Imagens enviadas:', window.miniChatUploadedImages);

      const selection = window.getSelection();
      console.log('Seleção atual:', selection);
      console.log('Ranges:', selection.rangeCount);

      if (selection.rangeCount > 0) {
        const range = selection.getRangeAt(0);
        console.log('Range:', range);

        // Testar todos os métodos de captura
        const tempDiv = document.createElement('div');
        tempDiv.appendChild(range.cloneContents());
        const images = tempDiv.querySelectorAll('img');
        console.log('Imagens no range clonado:', images.length);

        // Listar todas as imagens da página
        const allImages = document.querySelectorAll('img');
        console.log('Total de imagens na página:', allImages.length);

        allImages.forEach((img, i) => {
          const rect = img.getBoundingClientRect();
          console.log(`Imagem ${i + 1}:`, {
            src: img.src,
            alt: img.alt,
            visible: rect.width > 0 && rect.height > 0,
            rect: rect
          });
        });
      }

      // Forçar captura de imagens próximas
      forceImageCapture();

      // Forçar atualização do display
      updateMiniChatImages();
    };

    // Função para forçar a captura de imagens (global)
    window.forceImageCapture = function () {
      forceImageCapture();
    };

    // Função para forçar captura de imagens próximas à seleção
    function forceImageCapture() {
      console.log('Forçando captura de imagens...');
      const selection = window.getSelection();

      if (!selection || selection.rangeCount === 0) {
        console.warn('Nenhuma seleção ativa para capturar imagens');
        return;
      }

      const range = selection.getRangeAt(0);
      const selectionRect = range.getBoundingClientRect();

      // Inicializar array de imagens se não existir
      if (!window.miniChatSelectedImages) {
        window.miniChatSelectedImages = [];
      }

      // Buscar todas as imagens visíveis na página
      const allImages = Array.from(document.querySelectorAll('img')).filter(img => {
        const imgRect = img.getBoundingClientRect();
        return imgRect.width > 0 && imgRect.height > 0 && img.src;
      });

      console.log('Total de imagens visíveis:', allImages.length);

      // Verificar imagens próximas à seleção (distância aumentada para 300px)
      let foundImages = 0;
      allImages.forEach(img => {
        // Parar se já temos 3 imagens
        if (window.miniChatSelectedImages.length >= 3) {
          return;
        }
        const imgRect = img.getBoundingClientRect();

        // Calcular centro da imagem e da seleção
        const imgCenterX = imgRect.left + imgRect.width / 2;
        const imgCenterY = imgRect.top + imgRect.height / 2;
        const selCenterX = selectionRect.left + selectionRect.width / 2;
        const selCenterY = selectionRect.top + selectionRect.height / 2;

        // Calcular distância entre os centros
        const distance = Math.sqrt(
          Math.pow(imgCenterX - selCenterX, 2) +
          Math.pow(imgCenterY - selCenterY, 2)
        );

        // Verificar se a imagem está próxima (300px) ou intersecta
        const intersects = !(imgRect.right < selectionRect.left ||
          imgRect.left > selectionRect.right ||
          imgRect.bottom < selectionRect.top ||
          imgRect.top > selectionRect.bottom);

        if ((distance < 300 || intersects) && img.src) {
          console.log(`Imagem próxima encontrada: ${img.src}, distância: ${distance.toFixed(2)}px`);

          // Evitar duplicatas e limitar a 3 imagens
          const alreadyAdded = window.miniChatSelectedImages.some(existing => existing.src === img.src);

          if (!alreadyAdded && window.miniChatSelectedImages.length < 3) {
            window.miniChatSelectedImages.push({
              src: img.src,
              alt: img.alt || 'Imagem capturada',
              width: img.width || 'auto',
              height: img.height || 'auto'
            });
            foundImages++;
          }
        }
      });

      console.log(`Captura forçada encontrou ${foundImages} novas imagens`);
      console.log('Total de imagens após captura:', window.miniChatSelectedImages.length);

      // Atualizar display
      updateMiniChatImages();

      // Adicionar botão de captura manual se não existir
      addCaptureButton();

      // Atualizar botão de captura
      updateCaptureButton();
    }

    // Função para adicionar botão de captura manual
    function addCaptureButton() {
      const miniChat = document.getElementById('miniChatQuickActions');
      if (!miniChat) return;

      // Verificar se o botão já existe
      if (document.getElementById('forceCaptureBtn')) return;

      const captureBtn = document.createElement('button');
      captureBtn.id = 'forceCaptureBtn';

      // Atualizar texto baseado no limite
      const currentCount = window.miniChatSelectedImages ? window.miniChatSelectedImages.length : 0;
      if (currentCount >= 3) {
        captureBtn.innerHTML = '<i class="fas fa-ban"></i> Limite Atingido (3/3)';
        captureBtn.style.opacity = '0.5';
        captureBtn.style.cursor = 'not-allowed';
      } else {
        captureBtn.innerHTML = `<i class="fas fa-camera"></i> Capturar Imagens (${currentCount}/3)`;
      }
      captureBtn.style.cssText = `
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 15px;
        padding: 6px 10px;
        color: white;
        font-size: 10px;
        cursor: pointer;
        transition: all 0.2s ease;
        font-family: 'Inter', sans-serif;
      `;

      captureBtn.onmouseover = function () {
        this.style.background = 'rgba(255, 255, 255, 0.2)';
      };

      captureBtn.onmouseout = function () {
        this.style.background = 'rgba(255, 255, 255, 0.1)';
      };

      captureBtn.onclick = function () {
        if (window.miniChatSelectedImages && window.miniChatSelectedImages.length >= 3) {
          showFeedback('Limite de 3 imagens já atingido', 'warning');
          return;
        }
        forceImageCapture();
        showFeedback('Buscando imagens próximas...', 'info');
      };

      miniChat.appendChild(captureBtn);
    }

    // Função para atualizar o botão de captura
    function updateCaptureButton() {
      const captureBtn = document.getElementById('forceCaptureBtn');
      if (!captureBtn) return;

      const currentCount = window.miniChatSelectedImages ? window.miniChatSelectedImages.length : 0;
      if (currentCount >= 3) {
        captureBtn.innerHTML = '<i class="fas fa-ban"></i> Limite Atingido (3/3)';
        captureBtn.style.opacity = '0.5';
        captureBtn.style.cursor = 'not-allowed';
      } else {
        captureBtn.innerHTML = `<i class="fas fa-camera"></i> Capturar Imagens (${currentCount}/3)`;
        captureBtn.style.opacity = '1';
        captureBtn.style.cursor = 'pointer';
      }
    }

    // Função para ação rápida no Mini Chat (global)
    window.quickMiniAction = function (action) {
      const input = document.getElementById('miniChatInput');
      if (input) {
        input.value = action + ' ';
        input.focus();
        // Posicionar cursor no final
        input.setSelectionRange(input.value.length, input.value.length);
      }
    };
    // Função para enviar mensagem no Mini Chat (global)
    window.sendMiniChatMessage = function () {
      const input = document.getElementById('miniChatInput');
      const messagesContainer = document.getElementById('miniChatMessages');
      const quickActions = document.getElementById('miniChatQuickActions');

      if (!input || !messagesContainer) return;

      const message = input.value.trim();
      if (!message) return;

      // Verificar se há imagens para incluir no histórico
      const miniChatSelectedImages = window.miniChatSelectedImages || [];
      const miniChatUploadedImages = window.miniChatUploadedImages || [];

      // Esconder botões de ação rápida após primeira mensagem
      if (quickActions && quickActions.style.display !== 'none') {
        quickActions.style.opacity = '0';
        quickActions.style.transform = 'translateY(-10px)';
        setTimeout(() => {
          quickActions.style.display = 'none';
        }, 300);
      }

      // Verificar se há imagens para mostrar o contador
      const selectedImages = window.miniChatSelectedImages || [];
      const uploadedImages = window.miniChatUploadedImages || [];
      const allImages = [...selectedImages, ...uploadedImages];

      // Preparar mensagem com contador de imagens
      let displayMessage = message;
      if (allImages.length > 0) {
        displayMessage += ` <span style="color: #ffd93d; font-size: 10px;">[${allImages.length} ${allImages.length === 1 ? 'imagem fixada' : 'imagens fixadas'}]</span>`;
      }

      // Adicionar mensagem do usuário
      const userMessage = document.createElement('div');
      userMessage.innerHTML = `
        <div style="
          display: flex;
          justify-content: flex-end;
          margin-bottom: 10px;
          animation: slideInRight 0.3s ease-out;
        ">
          <div style="
            background: rgba(255, 255, 255, 0.2);
            color: white;
            padding: 8px 12px;
            border-radius: 12px;
            max-width: 80%;
            font-size: 11px;
            line-height: 1.4;
            border-bottom-right-radius: 4px;
          ">
            ${displayMessage}
          </div>
        </div>
      `;
      messagesContainer.appendChild(userMessage);

      // Renderizar matemática com sistema avançado na mensagem do usuário
      setTimeout(() => {
        if (window.MathRenderer) {
          MathRenderer.renderImmediate(userMessage, {
            // Configurações para Ken Mini
            displayMode: false,
            leqno: false,
            fleqn: false
          });
        } else {
          // Fallback para sistema antigo
          fallbackMathRender(userMessage);
        }
      }, 50);

      // Limpar input
      input.value = '';
      input.style.height = '35px';

      // Limpar área de preview
      const filePreview = document.getElementById('miniChatFilePreview');
      if (filePreview) {
        filePreview.innerHTML = '';
        filePreview.style.display = 'none';
      }

      // Scroll para baixo
      messagesContainer.scrollTop = messagesContainer.scrollHeight;

      // Mostrar loading
      const loadingMessage = document.createElement('div');
      loadingMessage.id = 'miniChatLoading';
      loadingMessage.innerHTML = `
        <div style="
          display: flex;
          justify-content: flex-start;
          margin-bottom: 10px;
        ">
          <div style="
            background: rgba(0, 0, 0, 0.2);
            color: white;
            padding: 8px 12px;
            border-radius: 12px;
            max-width: 80%;
            font-size: 11px;
            border-bottom-left-radius: 4px;
            display: flex;
            align-items: center;
            gap: 8px;
          ">
            <div style="
              width: 12px;
              height: 12px;
              border: 2px solid rgba(255, 255, 255, 0.3);
              border-top: 2px solid white;
              border-radius: 50%;
              animation: spin 1s linear infinite;
            "></div>
            Pensando...
          </div>
        </div>
      `;
      messagesContainer.appendChild(loadingMessage);
      messagesContainer.scrollTop = messagesContainer.scrollHeight;

      // Enviar para IA (usando a mesma função do painel principal)
      sendToMiniChat(message, messagesContainer);
    };

    // Função para enviar para IA no Mini Chat
    async function sendToMiniChat(message, messagesContainer) {
      try {
        // Obter texto selecionado do contexto
        const selectedTextDiv = messagesContainer.querySelector(
          '[style*="border-left: 3px solid #ffd93d"]'
        );
        const selectedText = selectedTextDiv
          ? selectedTextDiv.textContent.replace('CONTEÚDO SELECIONADO', '').replace('IMAGENS', '').trim()
          : '';

        // Obter imagens selecionadas e enviadas
        const selectedImages = window.miniChatSelectedImages || [];
        const uploadedImages = window.miniChatUploadedImages || [];
        const allImages = [...selectedImages, ...uploadedImages];

        // Adicionar mensagem do usuário ao histórico
        miniChatHistory.push({
          role: 'user',
          parts: [{ text: message }]
        });

        // Criar contexto com texto e imagens
        let contextMessage = '';

        // Verificar se temos contexto avançado disponível
        if (window.miniKenContext) {
          // Usar função de aprimoramento de prompt com contexto
          contextMessage = enhancePromptWithContext(message, window.miniKenContext);
        } else if (selectedText) {
          // Fallback para o método antigo
          contextMessage += `CONTEXTO DO CONTEÚDO SELECIONADO:\n"${selectedText}"\n\n`;
        }

        // Limitar a 3 imagens máximo
        const limitedImages = allImages.slice(0, 3);

        // Adicionar indicação de imagens anexadas
        let messageWithImageCount = message;
        if (limitedImages.length > 0) {
          messageWithImageCount += ` [${limitedImages.length} ${limitedImages.length === 1 ? 'imagem fixada' : 'imagens fixadas'}]`;
          if (allImages.length > 3) {
            messageWithImageCount += ` (${allImages.length - 3} imagens ignoradas - limite de 3)`;
          }
        }

        // Criar mensagem de contexto apenas se não foi criada pelo enhancePromptWithContext
        if (!window.miniKenContext) {
          contextMessage += `PERGUNTA DO USUÁRIO: ${messageWithImageCount}`;
        }

        console.log('Contexto enviado para IA:', contextMessage);
        console.log('Imagens a serem enviadas:', limitedImages.length);
        if (allImages.length > 3) {
          console.log(`${allImages.length - 3} imagens ignoradas (limite de 3)`);
        }

        // Limpar imagens enviadas após uso
        window.miniChatUploadedImages = [];

        // Limpar contexto após uso para evitar reutilização indesejada
        window.miniKenContext = null;

        // Usar sistema de API com fallback (mesmo do painel principal)
        let response = '';

        // Verificar se apiKeyManager está disponível
        if (!window.apiKeyManager && typeof apiKeyManager === 'undefined') {
          throw new Error('Sistema de gerenciamento de API não disponível');
        }

        const keyManager = window.apiKeyManager || apiKeyManager;

        for (let attempt = 0; attempt < API_KEYS.length; attempt++) {
          try {
            const currentKey = keyManager.getNextAvailableKey();

            // Preparar partes da mensagem
            let parts = [{ text: contextMessage }];

            // Adicionar imagens como inline_data (máximo 3 imagens)
            if (limitedImages.length > 0) {
              for (let i = 0; i < limitedImages.length; i++) {
                const img = limitedImages[i];

                try {
                  // Converter URL da imagem para base64
                  let imgData;

                  if (img.src.startsWith('data:')) {
                    // Já é base64
                    imgData = img.src.split(',')[1];
                  } else {
                    // Buscar imagem e converter para base64
                    const imgFile = await urlToFile(img.src, `selected_image_${i + 1}.jpg`);
                    imgData = await fileToBase64(imgFile);
                  }

                  // Adicionar imagem como parte da mensagem
                  parts.push({
                    inline_data: {
                      mime_type: 'image/jpeg',
                      data: imgData
                    }
                  });

                  console.log(`Imagem ${i + 1} adicionada ao payload da API`);
                } catch (imgError) {
                  console.error(`Erro ao processar imagem ${i + 1}:`, imgError);
                }
              }
            }

            // Preparar o histórico de conversas para enviar à API
            const historyContents = miniChatHistory.map(msg => ({
              role: msg.role,
              parts: msg.parts
            }));

            // Adicionar a mensagem atual ao histórico para a API
            const currentUserMessage = {
              role: 'user',
              parts: parts
            };

            // Log detalhado do histórico
            console.log('Enviando histórico para API:', JSON.stringify(historyContents));
            console.log('Total de mensagens no histórico:', historyContents.length);
            console.log('Mensagem atual:', JSON.stringify(currentUserMessage));

            // Prompt do KEN Mini: base + custom do usuário (+ contexto selecionado)
            const contextSection = selectedText ? `\n\nCONTEXTO SELECIONADO:\n"${selectedText}"\n[Fim do contexto]` : '';
            const userCfgMini = (() => { try { return JSON.parse(localStorage.getItem('kenAiConfig')||'{}'); } catch { return {}; } })();
            const baseMini = buildBaseSystemPrompt();
            const mergedMini = `${baseMini}${userCfgMini.systemPrompt ? `\n\n${userCfgMini.systemPrompt}` : ''}${contextSection}`;
            const miniSystemPrompt = {
              role: 'user',
              parts: [{ text: mergedMini }]
            };

            // Texto da pergunta atual (mini)
            const promptText = (parts && parts[0] && parts[0].text) ? String(parts[0].text) : '';

            const intendedMiniSearch = (searchWebEnabled || (function(m){
              if (!m || typeof m !== 'string') return false;
              const q = m.toLowerCase();
              const patterns = [
                /que dia (é|eh) hoje|data de hoje|que data é hoje|dia de hoje/,
                /agora|horas? (são|sao)|que horas/,
                /notícias?|news|últimas|ultimas|atualizaç(ão|oes)|lançamento|lançamentos/,
                /resultado(s)?|placar|jogo(s)? de hoje|quem ganhou|vencedor/,
                /preço(s)?|cotação|cota(ç|c)ão|dólar|dolar|euro|bitcoin|btc/,
                /clima|tempo|previs(ão|ao) do tempo/,
                /quando (vai )?sair|quando foi|data de lançamento/,
                /tend(ê|e)ncias|trend(s)?/,
              ];
              return patterns.some((re) => re.test(q));
            })(promptText));

            const apiResponse = await fetch(
              `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${currentKey}`,
              {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  contents: [miniSystemPrompt, ...historyContents, currentUserMessage],
                  generationConfig: (function(){
                    const cfg = {
                      temperature: 0.7,
                      topK: 40,
                      topP: 0.95,
                      maxOutputTokens: 2048,
                      mediaResolution: 'MEDIA_RESOLUTION_MEDIUM',
                    };
                    if (thinkingEnabled) {
                      const budget = (typeof window.kenAiThinkingBudget === 'number' ? window.kenAiThinkingBudget : 0);
                      cfg.thinkingConfig = { thinkingBudget: budget, includeThoughts: false };
                    }
                    return cfg;
                  })(),
                  ...((searchWebEnabled || (function(m){
                    if (!m || typeof m !== 'string') return false;
                    const q = m.toLowerCase();
                    const patterns = [
                      /que dia (é|eh) hoje|data de hoje|que data é hoje|dia de hoje/,
                      /agora|horas? (são|sao)|que horas/,
                      /notícias?|news|últimas|ultimas|atualizaç(ão|oes)|lançamento|lançamentos/,
                      /resultado(s)?|placar|jogo(s)? de hoje|quem ganhou|vencedor/,
                      /preço(s)?|cotação|cota(ç|c)ão|dólar|dolar|euro|bitcoin|btc/,
                      /clima|tempo|previs(ão|ao) do tempo/,
                      /quando (vai )?sair|quando foi|data de lançamento/,
                      /tend(ê|e)ncias|trend(s)?/,
                    ];
                    return patterns.some((re) => re.test(q));
                  })(promptText)) ? { tools: [{ google_search: {} }] } : {}),
                }),
              }
            );

            if (apiResponse.ok) {
              let data = await apiResponse.json();
              console.log('Resposta da API:', data); // Debug

              if (
                data.candidates &&
                data.candidates[0] &&
                data.candidates[0].content &&
                data.candidates[0].content.parts &&
                data.candidates[0].content.parts[0]
              ) {
                const grounded = (function(){
                  try {
                    const candidate = data?.candidates?.[0];
                    const parts = candidate?.content?.parts || [];
                    let text = '';
                    let thoughts = '';
                    for (const p of parts) {
                      if (!p || typeof p.text !== 'string') continue;
                      if (p.thought) {
                        thoughts += (thoughts ? '\n\n' : '') + p.text;
                      } else {
                        text += (text ? '\n\n' : '') + p.text;
                      }
                    }
                    if (!text && parts[0]?.text) text = parts[0].text;
                    const gm = candidate?.groundingMetadata;
                    const chunks = gm?.groundingChunks || [];
                    const supports = gm?.groundingSupports || gm?.supports || [];

                    // Numeração global e títulos a partir do host do URI
                    const chunkIndexToNumber = new Map();
                    const citationsList = [];
                    for (let i = 0; i < chunks.length; i++) {
                      const web = chunks[i]?.web || {};
                      const uri = web.uri || '';
                      let title = web.title || '';
                      try {
                        const u = new URL(uri);
                        const host = u.hostname || '';
                        if (!title || /^(?:[a-z]+:\/\/)/i.test(title)) {
                          title = host || title;
                        } else if (!/\./.test(title)) {
                          title = host || title;
                        }
                      } catch {}
                      if (uri) {
                        const number = citationsList.length + 1;
                        chunkIndexToNumber.set(i, number);
                        citationsList.push({ uri, title });
                      }
                    }

                    // Sem inserções inline no mini chat também
                    return { text, thoughts, citations: citationsList };
                  } catch { return { text: data.candidates[0].content.parts[0].text, thoughts: '', citations: [] }; }
                })();
                response = grounded;
                console.log('Texto da resposta:', response); // Debug

                if (
                  response &&
                  ((typeof response === 'string' && response.trim()) ||
                   (typeof response === 'object' && response.text && String(response.text).trim()))
                ) {
                  keyManager.markKeySuccess(currentKey);
                  break;
                } else {
                  throw new Error('Texto da resposta vazio');
                }
              } else {
                console.log('Estrutura de resposta inválida:', data); // Debug
                throw new Error('Estrutura de resposta inválida da API');
              }

              // Nota: removido reforço extra via strongSystemMini; mantemos uma única fonte de prompt (base + usuário).
            } else {
              const errorText = await apiResponse.text();
              console.log('Erro da API:', apiResponse.status, errorText); // Debug
              keyManager.markKeyFailure(currentKey);
              throw new Error(`API Error: ${apiResponse.status} - ${errorText}`);
            }
          } catch (apiError) {
            console.warn(`Tentativa ${attempt + 1} falhou:`, apiError);
            if (attempt === API_KEYS.length - 1) {
              throw apiError;
            }
          }
        }

        // Verificar se obtivemos uma resposta válida
        if (
          !response ||
          (typeof response === 'string' && response.trim() === '') ||
          (typeof response === 'object' && (!response.text || String(response.text).trim() === ''))
        ) {
          throw new Error('Resposta vazia da IA');
        }

        // Remover loading
        const loading = document.getElementById('miniChatLoading');
        if (loading) loading.remove();

        // Adicionar resposta da IA
        const aiMessage = document.createElement('div');
        aiMessage.style.marginBottom = '10px';
        aiMessage.style.animation = 'slideInLeft 0.3s ease-out';
        const bubble = document.createElement('div');
        bubble.style.cssText = 'background: rgba(0, 0, 0, 0.2); color: white; padding: 8px 12px; border-radius: 12px; max-width: 80%; font-size: 11px; line-height: 1.4; border-bottom-left-radius: 4px;';
        const textHtml = formatMiniChatMarkdown(typeof response === 'object' ? sanitizeModelOpening(response.text) : sanitizeModelOpening(response));
        bubble.innerHTML = textHtml;
        aiMessage.appendChild(bubble);
        // Citações (mini chat)
        if (typeof response === 'object' && Array.isArray(response.citations) && response.citations.length > 0) {
          const bar = document.createElement('div');
          bar.className = 'ken-ai-citations';
          const title = document.createElement('div');
          title.className = 'ken-ai-citations-title';
          title.textContent = 'FONTES';
          bar.appendChild(title);
          response.citations.slice(0, 6).forEach((c, idx) => {
            if (!c || !c.uri) return;
            let domain = '';
            try {
              const h = new URL(c.uri).hostname.replace(/^www\./,'');
              if (/^vertexaisearch\.cloud\.google\.com$/i.test(h)) {
                if (c.title) {
                  try { domain = new URL(/^https?:\/\//i.test(c.title) ? c.title : `https://${c.title}`).hostname.replace(/^www\./,''); } catch { domain = c.title; }
                }
              } else {
                domain = h;
              }
            } catch {}
            const label = domain ? (domain.length > 16 ? domain.slice(0,13)+'…' : domain) : (c.title ? c.title : `Fonte ${idx+1}`);
            const a = document.createElement('a');
            a.href = c.uri; a.target = '_blank'; a.rel = 'noopener noreferrer';
            a.className = 'ken-ai-source-btn';
            const icon = document.createElement('img');
            icon.src = `https://www.google.com/s2/favicons?domain=${encodeURIComponent(domain || c.uri)}&sz=16`;
            icon.alt = '';
            a.appendChild(icon);
            const span = document.createElement('span');
            span.textContent = label;
            a.appendChild(span);
            bar.appendChild(a);
          });
          aiMessage.appendChild(bar);
        }
        messagesContainer.appendChild(aiMessage);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
        // Notificação sonora no Mini Chat ao finalizar resposta
        try { playKenAudioNotification(); } catch {}

        // Renderizar matemática com sistema avançado no mini chat
        setTimeout(() => {
          if (window.MathRenderer) {
            MathRenderer.renderImmediate(aiMessage, {
              // Configurações para Ken Mini - respostas da IA
              displayMode: false,
              leqno: false,
              fleqn: false,
              trust: true
            });
          } else {
            // Fallback para sistema antigo
            fallbackMathRender(aiMessage);
          }
        }, 100);

        // Adicionar resposta da IA ao histórico
        miniChatHistory.push({
          role: 'model',
          parts: [{ text: (typeof response === 'object' ? response.text : String(response)) }]
        });

        // Salvar histórico
        saveMiniChatHistory();
      } catch (error) {
        console.error('Erro no Mini Chat:', error);

        // Remover loading
        const loading = document.getElementById('miniChatLoading');
        if (loading) loading.remove();

        // Determinar tipo de erro e mensagem
        let errorTitle = 'Erro na conexão';
        let errorDetails = 'Verifique sua conexão e tente novamente';

        if (error.message.includes('API Error: 429')) {
          errorTitle = 'Muitas solicitações';
          errorDetails = 'Aguarde um momento antes de tentar novamente';
        } else if (error.message.includes('API Error: 403')) {
          errorTitle = 'Acesso negado';
          errorDetails = 'Problema com a chave da API';
        } else if (error.message.includes('Resposta vazia')) {
          errorTitle = 'Resposta vazia';
          errorDetails = 'A IA não conseguiu gerar uma resposta';
        }

        // Mostrar erro com informações específicas
        const errorMessage = document.createElement('div');
        errorMessage.innerHTML = `
          <div style="
            display: flex;
            justify-content: flex-start;
            margin-bottom: 10px;
            animation: slideInLeft 0.3s ease-out;
          ">
            <div style="
              background: rgba(255, 107, 107, 0.2);
              color: #ff6b6b;
              padding: 8px 12px;
              border-radius: 12px;
              max-width: 80%;
              font-size: 11px;
              line-height: 1.4;
              border-bottom-left-radius: 4px;
              border: 1px solid rgba(255, 107, 107, 0.4);
            ">
              <div style="margin-bottom: 5px; font-weight: 600;">
                <i class="fas fa-exclamation-triangle"></i> ${errorTitle}
              </div>
              <div style="font-size: 10px; opacity: 0.9;">
                ${errorDetails}
              </div>
            </div>
          </div>
        `;
        messagesContainer.appendChild(errorMessage);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }
    }

    // Função para executar ação AI do menu (global)
    window.executeAiAction = function (action, text) {
      console.log('Executando ação AI:', action, text);
      const panel = document.getElementById('kenAiPanel');
      const input = document.getElementById('kenAiInput');

      if (panel && input) {
        // Abrir painel
        panel.classList.add('open');
        panel.style.right = '0';

        // Inserir comando com texto
        input.value = `${action} ${text}`;
        input.focus();

        // Remover tooltip
        const tooltip = document.getElementById('kenAiTooltip');
        if (tooltip) tooltip.remove();

        // Adicionar animação
        input.classList.add('command-inserted');
        setTimeout(() => {
          input.classList.remove('command-inserted');
        }, 600);
      }
    };

    // Função para inserir comando no input
    function insertCommand(command) {
      const input = document.getElementById('kenAiInput');
      if (input) {
        input.value = command;
        input.focus();
        // Posicionar cursor no final
        input.setSelectionRange(input.value.length, input.value.length);

        // Adicionar animação de comando inserido
        input.classList.add('command-inserted');
        setTimeout(() => {
          input.classList.remove('command-inserted');
        }, 600);
      }
    }

    // Função para quick actions com feedback visual
    function insertQuickCommand(command) {
      const input = document.getElementById('kenAiInput');
      const welcomeDiv = document.querySelector('.ken-ai-welcome');

      if (input) {
        input.value = command;
        input.focus();
        input.setSelectionRange(input.value.length, input.value.length);

        // Ocultar welcome screen e mostrar chat
        if (welcomeDiv) {
          welcomeDiv.style.opacity = '0';
          welcomeDiv.style.transform = 'translateY(-20px)';
          setTimeout(() => {
            welcomeDiv.style.display = 'none';
          }, 300);
        }

        // Animação no input
        input.classList.add('command-inserted');
        setTimeout(() => {
          input.classList.remove('command-inserted');
        }, 600);
      }
    }

    // Tornar funções globais para uso nos onclick
    window.insertCommand = insertCommand;
    window.insertQuickCommand = insertQuickCommand;

    // Inicializar
    initVoice();

    // Adicionar global para acesso aos arquivos
    window.currentFile = null;

    // Inicializar funcionalidades que dependem dos elementos DOM
    setupCommandSuggestions();
    setupPlaceholderUpdate();
    initImageDragDrop();
  }

  // Criar botão no primeiro <ul> que abre/fecha o painel (pontinho)
  function createHeaderNavDotButton() {
    // Cria o <li>
    const li = document.createElement('li');
    li.style.listStyle = 'none';
    li.style.display = 'inline-block';
    li.style.marginLeft = '5px';

    // Cria o botão
    const button = document.createElement('button');
    button.type = 'button';
    button.style.border = 'none';
    button.style.background = 'transparent';
    button.style.cursor = 'pointer';
    button.style.padding = '0';
    button.style.display = 'flex';
    button.style.alignItems = 'center';

    // Define cores do tema
    const colorNormal = getComputedStyle(document.documentElement).getPropertyValue('--colors-brand30') || '#863BFF';
    const colorHover = getComputedStyle(document.documentElement).getPropertyValue('--colors-brand20') || '#C099FF';

    // Cria o SVG do pontinho
    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    svg.setAttribute('width', '12');
    svg.setAttribute('height', '12');
    svg.setAttribute('viewBox', '0 0 12 12');

    const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
    circle.setAttribute('cx', '6');
    circle.setAttribute('cy', '6');
    circle.setAttribute('r', '3');
    circle.setAttribute('fill', colorNormal.trim());
    circle.style.transition = 'fill 0.3s ease';

    svg.appendChild(circle);
    button.appendChild(svg);

    // Efeito hover
    button.addEventListener('mouseenter', () => circle.setAttribute('fill', colorHover.trim()));
    button.addEventListener('mouseleave', () => circle.setAttribute('fill', colorNormal.trim()));

    // Clique abre/fecha o painel
    button.addEventListener('click', () => {
      if (typeof togglePanel === 'function') {
        togglePanel();
        // Foco no input ao abrir
        const panel = document.getElementById('kenAiPanel');
        if (panel && panel.classList.contains('open')) {
          setTimeout(() => {
            const input = document.getElementById('kenAiInput');
            if (input) input.focus();
          }, 400);
        }
      }
    });

    // Adiciona botão no li
    li.appendChild(button);

    // Preferência: inserir ABAIXO do botão do Plurall com id #linkButtonMenu
    const plurallAnchor = document.querySelector('#linkButtonMenu');
    if (plurallAnchor) {
      const wrapper = document.createElement('div');
      wrapper.style.display = 'flex';
      wrapper.style.justifyContent = 'center';
      wrapper.style.marginTop = '4px';
      wrapper.style.width = '100%';
      wrapper.appendChild(li);
      plurallAnchor.insertAdjacentElement('afterend', wrapper);
    } else {
      // Fallback: adiciona no primeiro <ul> encontrado na página
      const targetUl = document.querySelector('ul');
      if (targetUl) {
        targetUl.appendChild(li);
      } else {
        // Fallback final: injeta no body
        document.body.appendChild(li);
      }
    }

    return li;
  }

  // Inicializar o painel
  initializePanel().then(() => {
    // Botão visual não é necessário; atalhos Ctrl+. (abrir) e Ctrl+, (fechar) já controlam o painel
    // createHeaderNavDotButton();
  });

  console.log('🎓 KEN AI carregado com sucesso!');
  console.log('💡 Atalhos: Ctrl+. para abrir | Ctrl+, para fechar | Escape para fechar');
  console.log('✨ Selecione texto na página para explicação rápida!');

  // Log adicional para verificar escopo global
  window.addEventListener('load', () => {
    console.log('Página completamente carregada');
    console.log('Painel existe:', !!document.getElementById('kenAiPanel'));
    console.log('Input existe:', !!document.getElementById('kenAiInput'));
  });

  // Auto-resize movido para dentro de setupEventListeners

  // Detectar mudanças na página para reposicionar elementos se necessário
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
        // Verificar se o painel ainda está no DOM
        if (!document.getElementById('kenAiPanel')) {
          // Recriar o painel se foi removido
          console.warn('Painel KEN AI foi removido, recriando...');
          initializePanel();
        }
      }
    });
  });

  observer.observe(document.body, {
    childList: true,
    subtree: true,
  });

  // Função para lidar com erros de API
  function handleApiError(error) {
    console.error('Erro na API:', error);
    return 'Desculpe, houve um problema com a API. Tente novamente em alguns segundos.';
  }

  // Função para verificar se a API está funcionando
  async function checkApiHealth() {
    try {
      const response = await sendToGemini('Teste de conexão', null);
      return response && response.length > 0;
    } catch (error) {
      return false;
    }
  }
  // Adicionar função de feedback visual
  function showFeedback(message, type = 'info') {
    const feedback = document.createElement('div');
    feedback.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'error' ? '#ef4444' : '#10b981'};
        color: white;
        padding: 12px 16px;
        border-radius: 8px;
        font-size: 14px;
        z-index: 1000001;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        animation: slideIn 0.3s ease;
    `;

    feedback.textContent = message;
    document.body.appendChild(feedback);

    setTimeout(() => {
      feedback.style.animation = 'slideOut 0.3s ease';
      setTimeout(() => feedback.remove(), 300);
    }, 3000);
  }

  // Adicionar animações CSS
  const animationStyles = `
    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }

    @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }
`;

  const animationSheet = document.createElement('style');
  animationSheet.textContent = animationStyles;
  document.head.appendChild(animationSheet);

  // Função para salvar histórico localmente
  function saveHistory() {
    try {
      localStorage.setItem('kenAiHistory', JSON.stringify(chatHistory));
    } catch (e) {
      console.warn('Não foi possível salvar o histórico:', e);
    }
  }

  // Função para carregar histórico com renderização matemática
  function loadHistory() {
    try {
      const saved = localStorage.getItem('kenAiHistory');
      if (saved) {
        chatHistory = JSON.parse(saved);
        const chat = document.getElementById('kenAiChat');

        // Contador para renderização matemática após todas as mensagens serem carregadas
        let messagesLoaded = 0;
        const totalMessages = chatHistory.length;

        // Restaurar mensagens no chat
        chatHistory.forEach((msg, index) => {
          if (msg.role === 'user') {
            const messageDiv = document.createElement('div');
            messageDiv.className = 'ken-ai-message user';
            const bubbleDiv = document.createElement('div');
            bubbleDiv.className = 'ken-ai-bubble';
            bubbleDiv.innerHTML = `<div class="markdown-content">${msg.parts[0].text}</div>`;
            messageDiv.appendChild(bubbleDiv);
            chat.appendChild(messageDiv);

            // Verificar se tem matemática e renderizar
            const hasMath = /\$\$[\s\S]*?\$\$|\$[^\$\n]*\$|\\\[[\s\S]*?\\\]|\\\([\s\S]*?\\\)/.test(msg.parts[0].text);
            if (hasMath) {
              setTimeout(() => {
                if (window.MathRenderer) {
                  MathRenderer.renderImmediate(bubbleDiv);
                } else {
                  fallbackMathRender(bubbleDiv);
                }
              }, 100 + (index * 30)); // Delay escalonado
            }

            messagesLoaded++;
          } else {
            const messageDiv = document.createElement('div');
            messageDiv.className = 'ken-ai-message ai';
            const bubbleDiv = document.createElement('div');
            bubbleDiv.className = 'ken-ai-bubble';
            bubbleDiv.innerHTML = `<div class="markdown-content">${processMarkdown(msg.parts[0].text)}</div>`;
            messageDiv.appendChild(bubbleDiv);
            chat.appendChild(messageDiv);

            // Sempre tentar renderizar matemática em mensagens da IA
            setTimeout(() => {
              if (window.MathRenderer) {
                MathRenderer.renderImmediate(bubbleDiv, {
                  displayMode: false,
                  leqno: false,
                  fleqn: false,
                  trust: true
                });
              } else {
                fallbackMathRender(bubbleDiv);
              }
            }, 150 + (index * 30)); // Delay escalonado

            messagesLoaded++;
          }

          // Verificar se todas as mensagens foram carregadas
          if (messagesLoaded === totalMessages) {
            setTimeout(() => {
              // Renderização final para garantir que nada foi perdido
              const allBubbles = chat.querySelectorAll('.ken-ai-bubble');
              allBubbles.forEach((bubble, bubbleIndex) => {
                const hasKatex = bubble.querySelector('.katex');
                const hasUnrenderedMath = /\$\$[\s\S]*?\$\$|\$[^\$\n]*\$|\\\[[\s\S]*?\\\]|\\\([\s\S]*?\\\)/.test(bubble.textContent || '');

                if (!hasKatex && hasUnrenderedMath) {
                  console.log(`🔄 Re-renderizando matemática não processada na mensagem ${bubbleIndex + 1}`);
                  if (window.MathRenderer) {
                    MathRenderer.renderImmediate(bubble);
                  } else {
                    fallbackMathRender(bubble);
                  }
                }
              });

              console.log('✅ Histórico carregado com renderização matemática completa');
            }, 800); // Delay maior para garantir que tudo foi processado
          }
        });

        chat.scrollTop = chat.scrollHeight;
      }
    } catch (e) {
      console.warn('Não foi possível carregar o histórico:', e);
    }
  }

  // Função para processar markdown (global)
  function processMarkdown(text) {
    if (!text) return '';
    try {
      if (window.showdownConverter) {
        const html = window.showdownConverter.makeHtml(text);
        return html
          .replace(/<table>/g, '<table class="ken-ai-table">')
          .replace(/<pre><code( class=\"[^\"]*\")?>/g, '<pre><code class="ken-ai-code">');
      }
      if (window.md) {
        const processedText = window.md.render(text)
          .replace(/<table>/g, '<table class="ken-ai-table">')
          .replace(/<pre><code>/g, '<pre><code class="ken-ai-code">');
        return processedText;
      }
    } catch (e) {
      console.warn('Falha ao processar markdown (ShowdownJS):', e);
    }
    // Fallback simples
    return text
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/`(.*?)`/g, '<code>$1</code>')
      .replace(/^### (.*$)/gim, '<h3>$1</h3>')
      .replace(/^## (.*$)/gim, '<h2>$1</h2>')
      .replace(/^# (.*$)/gim, '<h1>$1</h1>')
      .replace(/^\* (.*$)/gim, '<li>$1</li>')
      .replace(/^- (.*$)/gim, '<li>$1</li>')
      .replace(/^\d+\. (.*$)/gim, '<li>$1</li>')
      .replace(/(<li>.*<\/li>)/gms, '<ul>$1</ul>')
      .replace(/\n/g, '<br>');
  }

  // Função para formatar markdown simples no mini chat (global)
  function formatMiniChatMarkdown(text) {
    if (!text) return '';
    try {
      if (window.showdownConverter) {
        const html = window.showdownConverter.makeHtml(text);
        return html
          .replace(/<table>/g, '<table class="ken-ai-table">')
          .replace(/<pre><code class=\"([^\"]*)\">/g, '<pre><code class="ken-ai-code $1">')
          .replace(/<pre><code>/g, '<pre><code class="ken-ai-code">');
      }
      if (window.md) {
        const html = window.md.render(text);
        return html
          .replace(/<table>/g, '<table class="ken-ai-table">')
          .replace(/<pre><code class=\"([^\"]*)\">/g, '<pre><code class="ken-ai-code $1">')
          .replace(/<pre><code>/g, '<pre><code class="ken-ai-code">');
      }
    } catch (e) {
      console.warn('Falha ao processar markdown no Mini Chat (ShowdownJS):', e);
    }
    // Fallback simples
    return (
      text
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.*?)\*/g, '<em>$1</em>')
        .replace(
          /`(.*?)`/g,
          '<code style="background: rgba(255,255,255,0.1); padding: 2px 4px; border-radius: 3px; font-family: monospace;">$1</code>'
        )
        .replace(/\n/g, '<br>')
        .replace(
          /\[([^\]]+)\]\(([^)]+)\)/g,
          '<a href="$2" target="_blank" style="color: #ffd93d;">$1</a>'
        )
    );
  }

  // Função para salvar histórico do Ken Mini
  function saveMiniChatHistory() {
    try {
      localStorage.setItem('kenMiniChatHistory', JSON.stringify(miniChatHistory));
      console.log('Histórico do Ken Mini salvo com sucesso');
    } catch (e) {
      console.warn('Não foi possível salvar o histórico do Ken Mini:', e);
    }
  }

  // Função para carregar histórico do Ken Mini com renderização matemática
  function loadMiniChatHistory(messagesContainer) {
    try {
      const saved = localStorage.getItem('kenMiniChatHistory');
      if (saved && messagesContainer) {
        miniChatHistory = JSON.parse(saved);

        // Limpar mensagem inicial se houver histórico
        if (miniChatHistory.length > 0) {
          // Remover mensagem inicial se existir
          const initialMessage = messagesContainer.querySelector('.mini-chat-initial-message');
          if (initialMessage) {
            initialMessage.remove();
          }

          // Contador para renderização matemática
          let messagesLoaded = 0;
          const totalMessages = miniChatHistory.length;

          // Restaurar mensagens no chat mini
          miniChatHistory.forEach((msg, index) => {
            if (msg.role === 'user') {
              // Adicionar mensagem do usuário
              const userMessage = document.createElement('div');
              userMessage.innerHTML = `
                <div style="
                  display: flex;
                  justify-content: flex-end;
                  margin-bottom: 10px;
                  animation: slideInRight 0.3s ease-out;
                ">
                  <div style="
                    background: rgba(255, 255, 255, 0.2);
                    color: white;
                    padding: 8px 12px;
                    border-radius: 12px;
                    max-width: 80%;
                    font-size: 11px;
                    line-height: 1.4;
                    border-bottom-right-radius: 4px;
                  ">
                    ${msg.parts[0].text}
                  </div>
                </div>
              `;
              messagesContainer.appendChild(userMessage);

              // Verificar se tem matemática e renderizar
              const hasMath = /\$\$[\s\S]*?\$\$|\$[^\$\n]*\$|\\\[[\s\S]*?\\\]|\\\([\s\S]*?\\\)/.test(msg.parts[0].text);
              if (hasMath) {
                setTimeout(() => {
                  if (window.MathRenderer) {
                    MathRenderer.renderImmediate(userMessage);
                  } else {
                    fallbackMathRender(userMessage);
                  }
                }, 100 + (index * 30));
              }

              messagesLoaded++;
            } else {
              // Adicionar resposta da IA
              const aiMessage = document.createElement('div');
              aiMessage.innerHTML = `
                <div style="
                  display: flex;
                  justify-content: flex-start;
                  margin-bottom: 10px;
                  animation: slideInLeft 0.3s ease-out;
                ">
                  <div style="
                    background: rgba(0, 0, 0, 0.2);
                    color: white;
                    padding: 8px 12px;
                    border-radius: 12px;
                    max-width: 80%;
                    font-size: 11px;
                    line-height: 1.4;
                    border-bottom-left-radius: 4px;
                  ">
                    ${formatMiniChatMarkdown(msg.parts[0].text)}
                  </div>
                </div>
              `;
              messagesContainer.appendChild(aiMessage);

              // Sempre tentar renderizar matemática em mensagens da IA
              setTimeout(() => {
                if (window.MathRenderer) {
                  MathRenderer.renderImmediate(aiMessage, {
                    displayMode: false,
                    leqno: false,
                    fleqn: false,
                    trust: true
                  });
                } else {
                  fallbackMathRender(aiMessage);
                }
              }, 150 + (index * 30));

              messagesLoaded++;
            }

            // Verificar se todas as mensagens foram carregadas
            if (messagesLoaded === totalMessages) {
              setTimeout(() => {
                // Renderização final para garantir que nada foi perdido
                const allMessages = messagesContainer.querySelectorAll('div[style*="background: rgba"]');
                allMessages.forEach((message, messageIndex) => {
                  const hasKatex = message.querySelector('.katex');
                  const hasUnrenderedMath = /\$\$[\s\S]*?\$\$|\$[^\$\n]*\$|\\\[[\s\S]*?\\\]|\\\([\s\S]*?\\\)/.test(message.textContent || '');

                  if (!hasKatex && hasUnrenderedMath) {
                    console.log(`🔄 Mini Chat: Re-renderizando matemática não processada na mensagem ${messageIndex + 1}`);
                    if (window.MathRenderer) {
                      MathRenderer.renderImmediate(message);
                    } else {
                      fallbackMathRender(message);
                    }
                  }
                });

                console.log('✅ Mini Chat: Histórico carregado com renderização matemática completa');
              }, 800);
            }
          });

          // Scroll para baixo
          messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
      }
    } catch (e) {
      console.warn('Não foi possível carregar o histórico do Ken Mini:', e);
    }
  }

  // Carregar histórico ao inicializar
  // loadHistory(); // Descomente se quiser persistir o histórico

  // Função para atualizar preview de imagens
  function updateImagePreviews() {
    const previewContainer = document.getElementById('kenAiImagePreviewContainer');
    const attachButton = document.querySelector(
      '.ken-ai-action-btn[onclick="document.getElementById(\'kenAiFileInput\').click()"]'
    );
    previewContainer.innerHTML = ''; // Limpar previews anteriores

    const imageFiles = uploadedFiles.filter((file) => file.type.startsWith('image/'));

    // Adicionar mensagem de limite se atingir 3 imagens
    if (imageFiles.length >= 3) {
      const limitMessage = document.createElement('div');
      limitMessage.className = 'ken-ai-image-limit-message';
      limitMessage.textContent = '🚫 Limite máximo de 3 imagens atingido';
      previewContainer.appendChild(limitMessage);
    }

    // Criar wrapper para imagens
    const imageWrapper = document.createElement('div');
    imageWrapper.className = 'ken-ai-image-preview-wrapper';

    imageFiles.slice(0, 3).forEach((file) => {
      const reader = new FileReader();
      reader.onload = (e) => {
        const previewDiv = document.createElement('div');
        previewDiv.className = 'ken-ai-image-preview';

        const img = document.createElement('img');
        img.src = e.target.result;

        const removeBtn = document.createElement('button');
        removeBtn.className = 'ken-ai-image-preview-remove';
        removeBtn.innerHTML = '&times;';
        removeBtn.onclick = () => {
          uploadedFiles = uploadedFiles.filter((f) => f !== file);
          updateImagePreviews();
        };

        previewDiv.appendChild(img);
        previewDiv.appendChild(removeBtn);
        imageWrapper.appendChild(previewDiv);
      };
      reader.readAsDataURL(file);
    });

    // Adicionar wrapper de imagens ao container
    previewContainer.appendChild(imageWrapper);

    // Mostrar container
    previewContainer.style.display = imageFiles.length > 0 ? 'flex' : 'none';

    // Bloquear botão se atingir 3 imagens
    if (attachButton) {
      if (imageFiles.length >= 3) {
        attachButton.disabled = true;
        attachButton.style.opacity = '0.5';
        attachButton.style.cursor = 'not-allowed';
      } else {
        attachButton.disabled = false;
        attachButton.style.opacity = '1';
        attachButton.style.cursor = 'pointer';
      }
    }
  }

  // Função para converter URL de imagem para arquivo
  async function urlToFile(url, filename) {
    // Verificar se a URL é válida
    if (!url || typeof url !== 'string') {
      console.warn('URL inválida:', url);
      return null;
    }

    try {
      // Verificar se é uma URL de dados (data URL)
      if (url.startsWith('data:')) {
        // Converter data URL diretamente
        const response = await fetch(url);
        const blob = await response.blob();
        return new File([blob], filename || 'image.png', { type: blob.type });
      }

      // Tentar converter URL relativa para absoluta
      let absoluteUrl = url;
      if (!url.match(/^(https?:)?\/\//i)) {
        // É uma URL relativa, converter para absoluta
        const base = window.location.origin;
        absoluteUrl = new URL(url, base).href;
        console.log('URL convertida de relativa para absoluta:', url, '->', absoluteUrl);
      }

      // Tentar obter a imagem diretamente
      try {
        // Opções de fetch para lidar com CORS e outros problemas
        const fetchOptions = {
          method: 'GET',
          mode: 'cors', // Habilitar CORS
          cache: 'no-cache',
          headers: {
            'Accept': 'image/*', // Aceitar apenas imagens
            'Cache-Control': 'no-cache',
          },
        };

        const response = await fetch(absoluteUrl, fetchOptions);

        // Verificar se a resposta foi bem-sucedida
        if (!response.ok) {
          console.warn(`Erro ao buscar imagem. Status: ${response.status} - ${response.statusText}`);

          // Tentar método alternativo: usar proxy CORS
          return await fetchViaProxy(absoluteUrl, filename);
        }

        // Verificar tipo de conteúdo
        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.startsWith('image/')) {
          console.warn('URL não é uma imagem válida:', absoluteUrl);
          return null;
        }

        const blob = await response.blob();

        // Gerar nome de arquivo baseado na URL ou parâmetro
        const suggestedFilename = filename || url.split('/').pop() || 'image.png';

        return new File([blob], suggestedFilename, { type: blob.type });
      } catch (fetchError) {
        console.warn('Erro no fetch direto:', fetchError);

        // Tentar método alternativo: usar proxy CORS
        return await fetchViaProxy(absoluteUrl, filename);
      }
    } catch (error) {
      console.error('Erro detalhado ao converter imagem:', {
        message: error.message,
        name: error.name,
        url: url,
        stack: error.stack,
      });

      // Último recurso: tentar criar um data URL a partir da imagem
      try {
        return await createDataUrlFromImage(url, filename);
      } catch (e) {
        console.error('Todas as tentativas de obter a imagem falharam');
        return null;
      }
    }
  }

  // Função auxiliar para buscar imagem via proxy CORS
  async function fetchViaProxy(url, filename) {
    try {
      // Usar um proxy CORS público
      const proxyUrl = `https://corsproxy.io/?${encodeURIComponent(url)}`;
      console.log('Tentando via proxy CORS:', proxyUrl);

      const response = await fetch(proxyUrl);

      if (!response.ok) {
        throw new Error(`Proxy retornou status ${response.status}`);
      }

      const blob = await response.blob();
      return new File([blob], filename || 'proxy_image.png', { type: blob.type });
    } catch (error) {
      console.error('Erro ao usar proxy CORS:', error);
      return null;
    }
  }

  // Função auxiliar para criar data URL a partir de uma imagem
  async function createDataUrlFromImage(url, filename) {
    return new Promise((resolve, reject) => {
      const img = new Image();
      img.crossOrigin = 'anonymous';

      img.onload = function () {
        try {
          const canvas = document.createElement('canvas');
          canvas.width = img.width;
          canvas.height = img.height;

          const ctx = canvas.getContext('2d');
          ctx.drawImage(img, 0, 0);

          // Converter para data URL
          const dataUrl = canvas.toDataURL('image/png');

          // Converter para File
          fetch(dataUrl)
            .then(res => res.blob())
            .then(blob => {
              resolve(new File([blob], filename || 'canvas_image.png', { type: 'image/png' }));
            })
            .catch(reject);
        } catch (e) {
          reject(e);
        }
      };

      img.onerror = function () {
        reject(new Error('Não foi possível carregar a imagem'));
      };

      // Adicionar timestamp para evitar cache
      img.src = url.includes('?') ? `${url}&_t=${Date.now()}` : `${url}?_t=${Date.now()}`;
    });
  }

  // Adicionar eventos de drag and drop para imagens
  function initImageDragDrop() {
    const previewContainer = document.getElementById('kenAiImagePreviewContainer');
    const panel = document.getElementById('kenAiPanel');

    // Verificar se os elementos existem
    if (!panel || !previewContainer) {
      console.warn('Elementos necessários para drag and drop não encontrados');
      return;
    }

    // Criar overlay de drag
    const dragOverlay = document.createElement('div');
    dragOverlay.className = 'ken-ai-drag-overlay';
    dragOverlay.innerHTML = `
        <div class="ken-ai-drag-content">
            <i class="fas fa-image"></i>
            <p>Solte a imagem aqui</p>
        </div>
    `;
    dragOverlay.style.display = 'none';
    panel.appendChild(dragOverlay);

    // Função para verificar se o item arrastado é uma imagem
    function isImageDrag(event) {
      return (
        event.dataTransfer.types.includes('text/plain') ||
        event.dataTransfer.types.includes('text/uri-list') ||
        event.dataTransfer.types.includes('Files')
      );
    }

    panel.addEventListener('dragenter', (e) => {
      if (isImageDrag(e)) {
        e.preventDefault();
        dragOverlay.style.display = 'flex';
      }
    });

    panel.addEventListener('dragleave', (e) => {
      // Verificar se o mouse saiu do painel
      const rect = panel.getBoundingClientRect();
      if (
        e.clientX <= rect.left ||
        e.clientX >= rect.right ||
        e.clientY <= rect.top ||
        e.clientY >= rect.bottom
      ) {
        dragOverlay.style.display = 'none';
      }
    });

    panel.addEventListener('dragover', (e) => {
      if (isImageDrag(e)) {
        e.preventDefault();
        e.dataTransfer.dropEffect = 'copy';
      }
    });

    panel.addEventListener('drop', async (e) => {
      dragOverlay.style.display = 'none';

      if (!isImageDrag(e)) return;

      e.preventDefault();

      // Verificar limite de imagens
      const currentImageCount = uploadedFiles.filter((file) =>
        file.type.startsWith('image/')
      ).length;
      if (currentImageCount >= 3) {
        const previewContainer = document.getElementById('kenAiImagePreviewContainer');
        const limitMessage = document.createElement('div');
        limitMessage.className = 'ken-ai-image-limit-message';
        limitMessage.textContent = '🚫 Limite máximo de 3 imagens atingido';

        previewContainer.innerHTML = '';
        previewContainer.appendChild(limitMessage);
        previewContainer.style.display = 'flex';
        return;
      }

      // Tentar obter imagem de diferentes formas
      let imageFile = null;

      // Verificar se há arquivos arrastados
      if (e.dataTransfer.files.length > 0) {
        const droppedFile = e.dataTransfer.files[0];
        if (droppedFile.type.startsWith('image/')) {
          imageFile = droppedFile;
        }
      }

      // Se não for arquivo, tentar URL
      if (!imageFile) {
        const imageUrl =
          e.dataTransfer.getData('text/plain') || e.dataTransfer.getData('text/uri-list');

        if (imageUrl && (imageUrl.startsWith('http') || imageUrl.startsWith('data:image'))) {
          try {
            imageFile = await urlToFile(imageUrl);
          } catch (error) {
            console.error('Erro ao converter imagem arrastada:', error);
          }
        }
      }

      // Adicionar imagem se válida
      if (imageFile) {
        uploadedFiles.push(imageFile);
        updateImagePreviews();
      }
    });

    // Adicionar evento de dragstart para capturar imagens
    document.addEventListener('dragstart', (e) => {
      if (e.target.tagName === 'IMG') {
        e.dataTransfer.setData('text/plain', e.target.src);
      }
    });
  }

  // Função para capturar dados da página (screenshot + URL)
  async function capturePageData() {
    const url = window.location.href;

    // Fallback se html2canvas não estiver disponível
    if (!window.html2canvas) {
      console.warn('html2canvas não disponível, retornando apenas URL');
      return { url, screenshot: null };
    }

    try {
      // Capturar screenshot da página completa
      const canvas = await html2canvas(document.body, {
        useCORS: true,
        logging: false,
        allowTaint: false,
        scale: 0.5, // Reduzir escala para melhor performance
        windowWidth: Math.min(document.documentElement.scrollWidth, 1920),
        windowHeight: Math.min(document.documentElement.scrollHeight, 10000),
        scrollX: 0,
        scrollY: 0,
      });

      // Converter canvas para File
      return new Promise((resolve) => {
        canvas.toBlob(
          (blob) => {
            if (blob) {
              const file = new File([blob], 'page_screenshot.png', {
                type: 'image/png',
              });
              resolve({ url, screenshot: file });
            } else {
              console.warn('Falha ao converter canvas para blob');
              resolve({ url, screenshot: null });
            }
          },
          'image/png',
          0.8
        );
      });
    } catch (error) {
      console.error('Erro ao capturar screenshot da página:', error);
      return { url, screenshot: null };
    }
  }

  // Adicionar estilo para o overlay de drag
  const dragStyles = `
    .ken-ai-drag-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(99, 102, 241, 0.7);
        z-index: 10000;
        display: flex;
        align-items: center;
        justify-content: center;
        backdrop-filter: blur(10px);
        transition: all 0.3s ease;
    }

    .ken-ai-drag-content {
        text-align: center;
        color: white;
        padding: 30px;
        border-radius: 20px;
        background: rgba(255, 255, 255, 0.1);
        border: 2px dashed rgba(255, 255, 255, 0.3);
    }

    .ken-ai-drag-content i {
        font-size: 50px;
        color: #ffd93d;
        margin-bottom: 15px;
        display: block;
    }

    .ken-ai-drag-content p {
        font-size: 16px;
        font-weight: 600;
    }
`;

  const dragStyleSheet = document.createElement('style');
  dragStyleSheet.textContent = dragStyles;
  document.head.appendChild(dragStyleSheet);

  // Drag and drop movido para setupEventListeners

  // Estilos simplificados - Search Web removido
  const searchToggleStyles = `
    .ken-ai-input-wrapper{ position: relative; }
    /* Botão Pensar único dentro do input */
    .ken-ai-thinking-toggle{
      position: absolute; right: 10px; top: 50%; transform: translateY(-50%);
      background: rgba(255,255,255,0.15);
      border: 1px solid rgba(255,255,255,0.25);
      width: 28px; height: 28px; border-radius: 50%;
      display:flex; align-items:center; justify-content:center;
      transition: all .2s ease; padding:0;
    }
    .ken-ai-thinking-toggle i{font-size:14px; color:#ffffff;}
    .ken-ai-thinking-toggle.active{ background: linear-gradient(135deg, #a855f7, #7c3aed); border-color: rgba(255,255,255,0.35); box-shadow: 0 0 0 3px rgba(168,85,247,0.25); }
    .ken-ai-thinking-toggle.active i{ color:#ffffff; }
    .ken-ai-thinking-toggle:hover{ transform: translateY(-50%) scale(1.05); }
    /* dar espaço no textarea apenas para o botão pensar */
    .ken-ai-input{ padding-right: 50px !important; width: 100% !important; box-sizing: border-box; }
    /* Barra de fontes abaixo da resposta */
    .ken-ai-citations{ max-width: 85%; display:flex; gap:8px; flex-wrap:wrap; margin:6px 0 0 0; background: rgba(255,255,255,0.08); border:1px solid rgba(255,255,255,0.18); padding:8px; border-radius:12px; }
    .ken-ai-citations-title{ font-size:10px; font-weight:700; color:#ffd93d; opacity:0.9; padding:4px 8px; border-radius:8px; border:1px dashed rgba(255,255,255,0.25); align-self: center; }
    .ken-ai-source-btn{ background: rgba(255,255,255,0.12); border:1px solid rgba(255,255,255,0.25); color:#fff; padding:4px 8px; border-radius:8px; font-size:10px; text-decoration:none; display:inline-flex; align-items:center; gap:6px; max-width: 160px; }
    .ken-ai-source-btn img{ width:16px; height:16px; border-radius:3px; display:block; }
    .ken-ai-source-btn span{ display:inline-block; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
    .ken-ai-source-btn:hover{ background: rgba(255,255,255,0.18); }
    /* Forçar layout em coluna para mensagens da IA (bolha acima, fontes abaixo) */
    .ken-ai-message.ai{ flex-direction: column; align-items: flex-start; gap: 6px; }

    /* Bloco de raciocínio acima da resposta final */
    .ken-ai-reasoning{
      max-width: 80%;
      background: rgba(255,255,255,0.08);
      border: 1px dashed rgba(255,255,255,0.25);
      padding: 8px 10px;
      border-radius: 12px;
      color: #fff;
      box-shadow: inset 0 0 0 1px rgba(0,0,0,0.1);
    }
    .ken-ai-reasoning-header{ display:flex; align-items:center; justify-content:space-between; gap:8px; margin-bottom:6px; }
    .ken-ai-reasoning-title{ font-size:11px; font-weight:800; color:#ffd93d; letter-spacing:.3px; }
    .ken-ai-reasoning-toggle{
      background: rgba(255,255,255,0.12);
      border: 1px solid rgba(255,255,255,0.25);
      color: #fff; width: 28px; height: 24px; border-radius: 8px; display:flex; align-items:center; justify-content:center; padding:0;
    }
    .ken-ai-reasoning-toggle:hover{ background: rgba(255,255,255,0.16); }
    .ken-ai-reasoning .markdown-content{ font-size: 12px; }

    /* Barra de ações por mensagem (isolada/clean) */
    .ken-ai-actions-bar{ display:flex; gap:10px; margin: 0px 0 0 6px;
    padding: 6px;
    border-radius: 25px; background: rgba(255,255,255,0.06); border:1px solid rgba(255,255,255,0.18); }
    .ken-ai-action-btn{
     height: 28px; border-radius: 999px;
      border: 1px solid rgba(255,255,255,0.35); background: transparent; color:#eaeaea;
      display:inline-flex; align-items:center; justify-content:center; cursor:pointer;
      transition: all .16s ease; outline:none; padding:0; line-height: 1;
    }
    .ken-ai-action-btn:hover{  border-color: rgba(255,255,255,0.45); }
    .ken-ai-action-btn:focus-visible{ box-shadow: 0 0 0 3px rgba(255,255,255,0.20); }
    /* Ensure FA icons look consistent inside actions bar buttons */
    .ken-ai-actions-bar .ken-ai-action-btn i{
      font-size: 13px; line-height: 1; color: #eaeaea; pointer-events: none; display: inline-block;
    }
    .ken-ai-btn-rewrite{}
    .ken-ai-btn-edit{}
    .ken-ai-btn-copy{}
    .ken-ai-btn-export{}

    /* Controles da edição inline */
    .ken-ai-edit-ctrl{
      background: rgba(255,255,255,0.10); border: 1px solid rgba(255,255,255,0.30); color:#fff;
      width:auto; height:28px; border-radius:8px; padding:0 10px; display:inline-flex; align-items:center; justify-content:center;
      transition: all .16s ease;
    }
    .ken-ai-edit-ctrl:hover{ background: rgba(255,255,255,0.14); border-color: rgba(255,255,255,0.42); }
    .ken-ai-edit-ctrl:focus-visible{ box-shadow: 0 0 0 3px rgba(255,255,255,0.20); }
    .ken-ai-edit-textarea{ width:100%; max-width:100%; min-width:95%; min-height:140px; max-height:50vh; border-radius:10px; border:1px solid rgba(255,255,255,0.25); background: rgba(0,0,0,0.15); color:#fff; padding:10px 12px; font-family: Inter, system-ui, Arial, sans-serif; font-size:14px; resize: vertical; }
    .ken-ai-edit-textarea:focus{ outline:none; border-color: rgba(255,255,255,0.45); box-shadow: 0 0 0 3px rgba(255,255,255,0.18); }

    /* Edit mode layout to avoid clipping */
    .ken-ai-message.ai.editing{ width:85% !important; }
    .ken-ai-message.ai.editing .ken-ai-bubble{ width:100% !important; max-width:100% !important; }
    .ken-ai-message.ai.editing .ken-ai-reasoning{ max-width:100% !important; }
    .ken-ai-message.ai.editing .ken-ai-actions-bar{ width:34%%; box-sizing:border-box; }
  `;
  const searchToggleSheet = document.createElement('style');
  searchToggleSheet.textContent = searchToggleStyles;
  document.head.appendChild(searchToggleSheet);

  // Adicionar evento global para interceptar cliques em botões de acessibilidade (sem spam)
  if (!window.kenAiAccessibilityHandlerBound) {
    window.kenAiAccessibilityHandlerBound = true;
    window._kenAiLastAccClickTime = 0;
  document.addEventListener(
    'click',
    function (event) {
        const btn = event.target && event.target.closest(
        '.btn-rybena-vision, .btn-rybena-voice, .btn-rybena-sign-language'
      );
        if (!btn) return;

        // Debounce para evitar múltiplos disparos/asset duplicates
        const now = Date.now();
        if (now - window._kenAiLastAccClickTime < 500) return;
        window._kenAiLastAccClickTime = now;

        // Prevenir comportamento padrão e propagação do site
        event.preventDefault();
        if (event.stopImmediatePropagation) event.stopImmediatePropagation();
        event.stopPropagation();

        const panel = document.getElementById('kenAiPanel');
        if (!panel) return;

        const isOpen = panel.classList.contains('open');
        if (isOpen) {
          panel.classList.remove('open');
          panel.style.right = '-500px';
        } else {
          panel.classList.add('open');
          panel.style.right = '';
          setTimeout(() => {
            const input = document.getElementById('kenAiInput');
            if (input) input.focus();
          }, 300);
      }
    },
    true
    );
  }

  // Sistema de sugestões de comandos
  function createCommandSuggestions() {
    console.log('Iniciando createCommandSuggestions()');

    const input = document.getElementById('kenAiInput');
    const inputWrapper = document.querySelector('.ken-ai-input-wrapper');

    if (!input || !inputWrapper) {
      console.error('ERRO CRÍTICO: Elementos não encontrados para sugestões de comandos', {
        input: input,
        inputWrapper: inputWrapper,
      });
      return;
    }

    // Criar container de sugestões
    let suggestionsContainer = document.getElementById('kenAiCommandSuggestions');
    if (!suggestionsContainer) {
      suggestionsContainer = document.createElement('div');
      suggestionsContainer.id = 'kenAiCommandSuggestions';
    }

    suggestionsContainer.style.cssText = `
            position: absolute;
            bottom: 100%;
            left: 0;
            right: 0;
            background: white;
            border-radius: 8px;
            padding: 8px;
            display: none;
            max-height: 200px;
            overflow-y: auto;
            z-index: 1000;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            border: 1px solid #e0e0e0;
        `;

    // Mapa de comandos com atalhos e descrições
    const COMMANDS = {
      '/search-pag': {
        aliases: ['search', 'pag', 's', 'sp'],
        description: 'Analisa a página atual',
      },
      '/capture_page': {
        aliases: ['capture_page', 'cp', 'cap', 'capture'],
        description: 'Captura oculta da página (anexa screenshot)',
      },
      '/resumo': {
        aliases: ['resumo', 'r', 'sum'],
        description: 'Gera resumo de texto',
      },
      '/explicar': {
        aliases: ['explicar', 'e', 'exp'],
        description: 'Explica um conceito',
      },
      '/traduzir': {
        aliases: ['traduzir', 't', 'trans'],
        description: 'Traduz texto para outro idioma',
      },
      '/calcular': {
        aliases: ['calcular', 'c', 'calc'],
        description: 'Resolve cálculos matemáticos',
      },
    };

    // Função para renderizar sugestões
    function renderSuggestions(query) {
      console.log('Renderizando sugestões para query:', query);

      // Limpar sugestões anteriores
      suggestionsContainer.innerHTML = '';

      // Filtrar comandos que começam com a query
      const filteredCommands = Object.entries(COMMANDS).filter(
        ([fullCmd, cmdInfo]) =>
          fullCmd.toLowerCase().startsWith(query.toLowerCase()) ||
          cmdInfo.aliases.some((alias) =>
            ('/' + alias).toLowerCase().startsWith(query.toLowerCase())
          )
      );

      console.log('Comandos filtrados:', filteredCommands);

      // Renderizar comandos filtrados
      filteredCommands.forEach(([fullCmd, cmdInfo]) => {
        const cmdDiv = document.createElement('div');
        cmdDiv.style.cssText = `
                    display: flex;
                    align-items: center;
                    justify-content: space-between;
                    padding: 10px;
                    cursor: pointer;
                    border-radius: 4px;
                    transition: background-color 0.2s ease;
                    margin-bottom: 4px;
                `;
        cmdDiv.innerHTML = `
                    <div style="display: flex; flex-direction: column;">
                        <strong style="color: #333; margin-bottom: 4px; font-size: 14px;">${fullCmd}</strong>
                        <span style="font-size: 12px; color: #666;">${cmdInfo.description}</span>
                    </div>
                    <span style="font-size: 12px; color: #999; margin-left: 10px;">${cmdInfo.aliases
            .map((a) => '/' + a)
            .join(', ')}</span>
                `;
        cmdDiv.addEventListener('click', () => {
          input.value = fullCmd + ' ';
          input.focus();
          suggestionsContainer.style.display = 'none';
        });
        cmdDiv.addEventListener('mouseover', () => {
          cmdDiv.style.backgroundColor = '#f5f5f5';
        });
        cmdDiv.addEventListener('mouseout', () => {
          cmdDiv.style.backgroundColor = 'transparent';
        });
        suggestionsContainer.appendChild(cmdDiv);
      });

      // Mostrar ou esconder container baseado em sugestões
      const shouldShow = filteredCommands.length > 0;
      suggestionsContainer.style.display = shouldShow ? 'block' : 'none';

      console.log('Sugestões visíveis:', shouldShow);
    }

    // Definir posicionamento do input wrapper
    inputWrapper.style.position = 'relative';

    // Remover container antigo se existir
    const oldContainer = inputWrapper.querySelector('#kenAiCommandSuggestions');
    if (oldContainer) {
      oldContainer.remove();
    }

    // Adicionar ao input wrapper
    inputWrapper.appendChild(suggestionsContainer);

    // Evento de input para mostrar sugestões
    input.addEventListener('input', (e) => {
      const value = e.target.value.trim();

      console.log('Valor do input:', value);

      // Mostrar sugestões apenas se começar com /
      if (value.startsWith('/')) {
        renderSuggestions(value);
      } else {
        suggestionsContainer.style.display = 'none';
      }
    });

    // Esconder ao perder foco
    input.addEventListener('blur', () => {
      setTimeout(() => {
        suggestionsContainer.style.display = 'none';
      }, 200);
    });

    console.log('Sugestões de comandos inicializadas com sucesso');
  }

  // Inicializar sugestões de comandos
  function setupCommandSuggestions() {
    console.log('Iniciando setupCommandSuggestions()');

    // Tentar inicializar imediatamente
    const input = document.getElementById('kenAiInput');
    const inputWrapper = document.querySelector('.ken-ai-input-wrapper');

    if (input && inputWrapper) {
      console.log('Elementos encontrados, inicializando sugestões');
      createCommandSuggestions();
      return;
    }

    // Configurar múltiplas tentativas
    let attempts = 0;
    const initInterval = setInterval(() => {
      const input = document.getElementById('kenAiInput');
      const inputWrapper = document.querySelector('.ken-ai-input-wrapper');

      console.log('Tentativa de inicializar sugestões:', {
        input: !!input,
        inputWrapper: !!inputWrapper,
        attempts: attempts,
      });

      if (input && inputWrapper) {
        createCommandSuggestions();
        clearInterval(initInterval);
      }

      attempts++;
      if (attempts >= 10) {
        console.error('KEN AI: Falha ao inicializar sugestões de comandos');
        clearInterval(initInterval);
      }
    }, 500);
  }

  // Event listeners removidos - agora chamados dentro de setupEventListeners

  // Função para atualizar placeholder do input
  function updateInputPlaceholder() {
    const input = document.getElementById('kenAiInput');

    if (!input) return;

    // Adicionar evento de input para atualizar placeholder
    input.addEventListener('input', function () {
      if (this.value.trim().length > 0) {
        this.setAttribute('placeholder', '');
      } else {
        this.setAttribute('placeholder', '  Digite sua dúvida...');
      }
    });

    // Adicionar evento de blur para restaurar placeholder se estiver vazio
    input.addEventListener('blur', function () {
      if (this.value.trim().length === 0) {
        this.setAttribute('placeholder', '  Digite sua dúvida...');
      }
    });
  }

  // Inicializar atualização de placeholder
  function setupPlaceholderUpdate() {
    let attempts = 0;
    const initInterval = setInterval(() => {
      const input = document.getElementById('kenAiInput');

      if (input) {
        updateInputPlaceholder();
        clearInterval(initInterval);
      }

      attempts++;
      if (attempts >= 10) {
        console.error('KEN AI: Falha ao inicializar atualização de placeholder');
        clearInterval(initInterval);
      }
    }, 500);
  }

  // Event listeners removidos - agora chamados dentro de setupEventListeners

  // Função global para abrir Mini KEN Chat com debug automático
  window.openMiniKenWithDebug = function () {
    // Verificar se já existe um Mini KEN Chat aberto
    const existingMiniChat = document.getElementById('kenMiniChat');
    if (existingMiniChat) {
      existingMiniChat.remove();
    }

    // Obter seleção atual
    const selection = window.getSelection();
    const selectedText = selection.toString();

    // Criar Mini KEN Chat
    createMiniKenChat(selectedText);

    // Forçar captura de imagens
    setTimeout(() => {
      forceImageCapture();
      console.log('Debug automático: captura de imagens forçada');

      // Adicionar mensagem de debug
      const messagesContainer = document.getElementById('miniChatMessages');
      if (messagesContainer) {
        const debugMessage = document.createElement('div');
        debugMessage.innerHTML = `
          <div style="
            margin: 10px 0;
            padding: 8px;
            background: rgba(255, 217, 61, 0.2);
            border-radius: 8px;
            font-size: 11px;
            color: #ffd93d;
            text-align: center;
          ">
            <i class="fas fa-bug"></i> Modo debug ativado.
            Captura de imagens aprimorada.
            <div style="margin-top: 5px; font-size: 9px;">
              Imagens encontradas: ${window.miniChatSelectedImages ? window.miniChatSelectedImages.length : 0}
            </div>
          </div>
        `;
        messagesContainer.appendChild(debugMessage);
      }
    }, 500);
  };



  // Função para adicionar botão de análise de página
  function addPageAnalysisButton() {
    const panel = document.getElementById('kenAiPanel');
    if (!panel) {
      console.error('Painel KEN AI não encontrado');
      return;
    }

    // Verificar se o botão já existe
    if (document.getElementById('kenPageAnalysisBtn')) {
      return;
    }


  }

  // Chamar função para adicionar botão de análise de página após inicialização
  setTimeout(addPageAnalysisButton, 2000);

  // Função para capturar contexto avançado da seleção
  async function captureSelectionContext() {
    try {
      const selection = window.getSelection();
      if (!selection || selection.rangeCount === 0) return null;

      const range = selection.getRangeAt(0);
      const selectedText = selection.toString().trim();
      if (!selectedText) return null;

      // Capturar informações básicas da seleção
      const rect = range.getBoundingClientRect();
      const container = range.commonAncestorContainer;

      // Capturar contexto expandido (elementos pai)
      let parentContext = '';
      let parentElement = container.nodeType === 3 ? container.parentElement : container;

      // Obter título da seção ou cabeçalho mais próximo
      let closestHeading = null;
      let currentNode = parentElement;

      // Procurar pelo cabeçalho mais próximo acima do elemento selecionado
      while (currentNode && !closestHeading) {
        // Verificar se é um cabeçalho
        if (/^H[1-6]$/.test(currentNode.tagName)) {
          closestHeading = currentNode;
        } else {
          // Verificar irmãos anteriores
          let sibling = currentNode.previousElementSibling;
          while (sibling && !closestHeading) {
            if (/^H[1-6]$/.test(sibling.tagName)) {
              closestHeading = sibling;
            }
            sibling = sibling.previousElementSibling;
          }

          // Se não encontrou, subir para o pai
          currentNode = currentNode.parentElement;
        }
      }

      // Adicionar título da seção ao contexto
      if (closestHeading) {
        parentContext += `TÍTULO DA SEÇÃO: ${closestHeading.textContent.trim()}\n\n`;
      }

      // Capturar URL da página
      const pageUrl = window.location.href;
      const pageTitle = document.title;

      // Capturar metadados da página
      const metaDescription = document.querySelector('meta[name="description"]')?.content || '';
      const metaKeywords = document.querySelector('meta[name="keywords"]')?.content || '';

      // Capturar contexto circundante (texto ao redor da seleção)
      let surroundingText = '';
      try {
        // Tentar obter o parágrafo ou elemento pai que contém a seleção
        let containerElement = parentElement;
        while (containerElement &&
          !['P', 'DIV', 'SECTION', 'ARTICLE', 'LI', 'TD', 'BLOCKQUOTE'].includes(containerElement.tagName)) {
          containerElement = containerElement.parentElement;
        }

        if (containerElement) {
          // Obter texto do elemento pai (limitado a 500 caracteres)
          const fullText = containerElement.textContent;
          if (fullText && fullText.length > selectedText.length) {
            surroundingText = `CONTEXTO CIRCUNDANTE:\n"${fullText.substring(0, 500)}${fullText.length > 500 ? '...' : ''}"\n\n`;
          }
        }
      } catch (e) {
        console.error('Erro ao capturar contexto circundante:', e);
      }

      // Construir objeto de contexto
      const context = {
        selectedText,
        pageTitle,
        pageUrl,
        metaDescription,
        metaKeywords,
        parentContext,
        surroundingText,
        timestamp: new Date().toISOString(),
        selectionRect: {
          top: rect.top,
          left: rect.left,
          width: rect.width,
          height: rect.height
        }
      };

      console.log('Contexto capturado:', context);
      return context;
    } catch (error) {
      console.error('Erro ao capturar contexto da seleção:', error);
      return null;
    }
  }

  // Função para melhorar o prompt com o contexto da seleção
  function enhancePromptWithContext(message, context) {
    if (!context) return message;

    let enhancedPrompt = '';

    // Adicionar informações do contexto
    if (context.pageTitle) {
      enhancedPrompt += `PÁGINA: ${context.pageTitle}\n`;
    }

    if (context.pageUrl) {
      enhancedPrompt += `URL: ${context.pageUrl}\n`;
    }

    if (context.parentContext) {
      enhancedPrompt += context.parentContext;
    }

    // Adicionar texto selecionado
    enhancedPrompt += `CONTEÚDO SELECIONADO:\n"${context.selectedText}"\n\n`;

    // Adicionar contexto circundante se disponível
    if (context.surroundingText) {
      enhancedPrompt += context.surroundingText;
    }

    // Adicionar metadados se disponíveis
    if (context.metaDescription) {
      enhancedPrompt += `DESCRIÇÃO DA PÁGINA: ${context.metaDescription}\n\n`;
    }

    // Adicionar a pergunta do usuário
    enhancedPrompt += `PERGUNTA DO USUÁRIO: ${message}`;

    return enhancedPrompt;
  }

  // Função para abrir o mini KEN com contexto aprimorado
  async function openMiniKenWithContext(selectedText) {
    let context = await captureSelectionContext();

    // Se não conseguiu capturar contexto da seleção, tenta capturar contexto da página
    if (!context && (!selectedText || selectedText.trim() === '')) {
      context = await capturePageContext();
      selectedText = 'Análise da página atual';
    }

    window.miniKenContext = context; // Armazenar contexto para uso posterior

    // Mostrar feedback ao usuário
    if (context) {
      showFeedback('Mini KEN Chat aberto com contexto aprimorado', 'success');
    }

    // Abrir o mini chat com o texto selecionado ou mensagem padrão
    openMiniKenChat(selectedText || 'Como posso ajudar?');
  }

  // Expor função globalmente
  window.openMiniKenWithContext = openMiniKenWithContext;

  // Função para capturar contexto da página quando não há seleção
  async function capturePageContext() {
    try {
      // Capturar URL e título da página
      const pageUrl = window.location.href;
      const pageTitle = document.title;

      // Capturar metadados da página
      const metaDescription = document.querySelector('meta[name="description"]')?.content || '';
      const metaKeywords = document.querySelector('meta[name="keywords"]')?.content || '';

      // Capturar cabeçalhos principais
      const mainHeadings = Array.from(document.querySelectorAll('h1, h2')).map(h => h.textContent.trim()).join(' | ');

      // Tentar capturar o conteúdo principal da página
      let mainContent = '';

      // Tentar encontrar o conteúdo principal usando seletores comuns
      const mainSelectors = [
        'main',
        'article',
        '#content',
        '.content',
        '.main-content',
        '[role="main"]'
      ];

      let mainElement = null;
      for (const selector of mainSelectors) {
        const element = document.querySelector(selector);
        if (element) {
          mainElement = element;
          break;
        }
      }

      // Se encontrou um elemento principal, extrair seu texto
      if (mainElement) {
        mainContent = mainElement.textContent.trim().substring(0, 1000);
      } else {
        // Fallback: usar o body inteiro, mas limitado
        mainContent = document.body.textContent.trim().substring(0, 1000);
      }

      // Construir objeto de contexto
      const context = {
        selectedText: 'Página inteira: ' + pageTitle,
        pageTitle,
        pageUrl,
        metaDescription,
        metaKeywords,
        parentContext: `TÍTULO PRINCIPAL: ${mainHeadings || pageTitle}\n\n`,
        surroundingText: `CONTEÚDO DA PÁGINA:\n"${mainContent}${mainContent.length >= 1000 ? '...' : ''}"\n\n`,
        timestamp: new Date().toISOString()
      };

      console.log('Contexto da página capturado:', context);
      return context;
    } catch (error) {
      console.error('Erro ao capturar contexto da página:', error);
      return null;
    }
  }
  // ===== NOVO SISTEMA DE GERENCIAMENTO DE CONVERSAS =====
  // Estrutura de dados limpa e simples
  const ChatManager = {
    conversations: new Map(), // Usar Map para melhor performance
    currentChatId: null,
    chatCounter: 1,
    isLoadingChat: false, // Flag para evitar salvamento durante carregamento

    // Gerar ID único e simples
    generateId() {
      return `chat_${Date.now()}_${this.chatCounter++}`;
    },

    // Criar nova conversa
    createChat() {
      const id = this.generateId();
      const chat = {
        id: id,
        messages: [],
        createdAt: new Date(),
        title: 'Nova Conversa',
        lastActivity: new Date()
      };

      this.conversations.set(id, chat);
      this.currentChatId = id;

      console.log('Nova conversa criada:', id);
      this.updatePanel();
      return id;
    },

    // Salvar mensagem na conversa atual
    saveMessage(role, content) {
      // Não salvar se estiver carregando conversa (evitar duplicação)
      if (this.isLoadingChat) return;

      if (!this.currentChatId) {
        this.createChat();
      }

      const chat = this.conversations.get(this.currentChatId);
      if (chat) {
        // Verificar se a mensagem já existe (evitar duplicatas)
        const lastMessage = chat.messages[chat.messages.length - 1];
        if (lastMessage && lastMessage.content === content && lastMessage.role === role) {
          console.log('Mensagem duplicada ignorada:', content.substring(0, 50));
          return;
        }

        chat.messages.push({
          role: role,
          content: content,
          timestamp: new Date()
        });

        // Atualizar título baseado na primeira mensagem do usuário
        if (role === 'user' && chat.messages.filter(m => m.role === 'user').length === 1) {
          chat.title = content.substring(0, 30) + (content.length > 30 ? '...' : '');
        }

        chat.lastActivity = new Date();
        this.updatePanel();
      }
    },

    // Carregar conversa
    loadChat(chatId) {
      if (this.currentChatId === chatId) return;

      const chat = this.conversations.get(chatId);
      if (!chat) {
        console.error('Conversa não encontrada:', chatId);
        return;
      }

      // Definir flag para evitar salvamento durante carregamento
      this.isLoadingChat = true;
      this.currentChatId = chatId;

      // Limpar interface atual
      this.clearChatInterface();

      // Atualizar chatHistory para compatibilidade
      if (window.chatHistory) {
        window.chatHistory = chat.messages.map(msg => ({
          role: msg.role,
          parts: [{ text: msg.content }]
        }));
      }

      // Carregar mensagens diretamente na interface (sem usar addMessage para evitar duplicação)
      const chatContainer = document.getElementById('kenAiChat');
      if (chatContainer) {
        chat.messages.forEach(msg => {
          const messageDiv = document.createElement('div');
          messageDiv.className = `ken-ai-message ${msg.role === 'user' ? 'user' : 'ai'}`;

          const bubbleDiv = document.createElement('div');
          bubbleDiv.className = 'ken-ai-bubble';

          if (msg.role === 'user') {
            bubbleDiv.textContent = msg.content;
          } else {
            // Para mensagens da IA, processar markdown
            if (typeof window.processMarkdown === 'function') {
              bubbleDiv.innerHTML = `<div class="markdown-content">${window.processMarkdown(msg.content)}</div>`;
            } else {
              bubbleDiv.textContent = msg.content;
            }
          }

          messageDiv.appendChild(bubbleDiv);
          chatContainer.appendChild(messageDiv);
        });

        chatContainer.scrollTop = chatContainer.scrollHeight;
      }

      // Resetar flag após carregamento
      setTimeout(() => {
        this.isLoadingChat = false;
      }, 100);

      console.log('Conversa carregada:', chatId);
      this.updatePanel();
    },

    // Excluir conversa
    deleteChat(chatId) {
      if (this.conversations.has(chatId)) {
        this.conversations.delete(chatId);

        // Se era a conversa atual, resetar
        if (this.currentChatId === chatId) {
          this.currentChatId = null;
          this.clearChatInterface();
        }

        this.updatePanel();
        console.log('Conversa excluída:', chatId);
      }
    },

    // Limpar interface do chat
    clearChatInterface() {
      // Limpar chatHistory global para compatibilidade
      if (window.chatHistory) {
        window.chatHistory = [];
      }

      const chatContainer = document.getElementById('kenAiChat');
      if (chatContainer) {
        const messages = chatContainer.querySelectorAll('.ken-ai-message');
        messages.forEach(msg => msg.remove());

        // Mostrar mensagem de boas-vindas
        const welcomeMessage = chatContainer.querySelector('.ken-ai-welcome');

        if (welcomeMessage) welcomeMessage.style.display = 'block';
      }
    },

    // Atualizar painel de histórico
    updatePanel() {
      const historyStats = document.getElementById('kenAiHistoryStats');
      const conversationsList = document.getElementById('kenAiConversationsList');

      if (!historyStats || !conversationsList) return;

      // Calcular total de mensagens
      let totalMessages = 0;
      this.conversations.forEach(chat => {
        totalMessages += chat.messages.length;
      });

      historyStats.textContent = `${totalMessages} mensagens`;

      // Limpar lista
      conversationsList.innerHTML = '';

      // Mostrar conversas (mais recentes primeiro)
      const sortedChats = Array.from(this.conversations.values())
        .sort((a, b) => b.lastActivity - a.lastActivity)
        .slice(0, 10); // Mostrar apenas as 10 mais recentes

      if (sortedChats.length === 0) {
        conversationsList.innerHTML = `
          <div style="text-align: center; color: rgba(255, 255, 255, 0.6); font-size: 11px; padding: 20px;">
            <i class="fas fa-comments"></i><br>
            Nenhuma conversa ainda.<br>
            Comece uma nova conversa!
          </div>
        `;
        return;
      }

      sortedChats.forEach(chat => {
        const item = this.createChatItem(chat);
        conversationsList.appendChild(item);
      });
    },

    // Criar item de conversa no painel
    createChatItem(chat) {
      const item = document.createElement('div');
      item.className = 'ken-ai-conversation-item';
      if (chat.id === this.currentChatId) {
        item.classList.add('active');
      }

      const messageCount = chat.messages.length;
      const lastActivity = chat.lastActivity.toLocaleDateString('pt-BR');

      item.innerHTML = `
        <div class="ken-ai-conversation-header">
          <div class="ken-ai-conversation-date">${lastActivity}</div>
          <div class="ken-ai-conversation-count">${messageCount} msgs</div>
        </div>
        <div class="ken-ai-conversation-preview">${chat.title}</div>
        <div class="ken-ai-conversation-actions">
          <button class="ken-ai-history-action-btn delete" onclick="event.stopPropagation(); window.ChatManager.deleteChat('${chat.id}');">
            <i class="fas fa-trash"></i> Excluir
          </button>
        </div>
      `;

      // Evento de clique para carregar conversa
      item.addEventListener('click', (e) => {
        if (e.target.closest('.delete')) return;
        this.loadChat(chat.id);
      });

      return item;
    }
  };

  // ✨ Funções para a Seção de Informações Elaborada
  let kenAiInfoStats = {
    questionCount: 0,
    sessionStartTime: Date.now(),
    thinkingEnabled: false,
    searchEnabled: false
  };

  const kenAiSmartTips = [
    'Use /search-pag para análise completa da página',
    'Selecione texto na página para explicação rápida',
    'Ative o modo Pensar para respostas mais elaboradas',
    'Use comandos como "Resuma:" para organizar informações',
    'Anexe imagens para análise visual com IA',
    'Ative Busca Web para informações atualizadas',
    'Use "Quiz sobre:" para testar conhecimentos',
    'Digite "/" para ver todos os comandos disponíveis',
    'Faça perguntas sobre conceitos específicos',
    'Use "Explique como se eu fosse:" para ajustar nível'
  ];

  // Função para atualizar dica inteligente
  window.refreshSmartTip = function() {
    const tipElement = document.getElementById('kenAiSmartTip');
    if (!tipElement) return;

    const randomTip = kenAiSmartTips[Math.floor(Math.random() * kenAiSmartTips.length)];
    tipElement.style.opacity = '0';
    setTimeout(() => {
      tipElement.textContent = randomTip;
      tipElement.style.opacity = '1';
    }, 150);
  };

  // Função para alternar modo pensar
  window.toggleKenAiThinking = function() {
    kenAiInfoStats.thinkingEnabled = !kenAiInfoStats.thinkingEnabled;
    const indicator = document.getElementById('kenAiThinkingIndicator');
    if (indicator) {
      indicator.classList.toggle('active', kenAiInfoStats.thinkingEnabled);
    }
    updateKenAiOperationMode();
  };

  // Função para alternar busca web
  window.toggleKenAiSearch = function() {
    kenAiInfoStats.searchEnabled = !kenAiInfoStats.searchEnabled;
    const indicator = document.getElementById('kenAiSearchIndicator');
    if (indicator) {
      indicator.classList.toggle('active', kenAiInfoStats.searchEnabled);
    }
    updateKenAiOperationMode();
  };

  // Função para atualizar modo de operação
  function updateKenAiOperationMode() {
    const modeElement = document.getElementById('kenAiOperationMode');
    if (!modeElement) return;

    let mode = 'Assistente Padrão';
    if (kenAiInfoStats.thinkingEnabled && kenAiInfoStats.searchEnabled) {
      mode = 'Modo Avançado';
    } else if (kenAiInfoStats.thinkingEnabled) {
      mode = 'Modo Pensativo';
    } else if (kenAiInfoStats.searchEnabled) {
      mode = 'Modo Pesquisa';
    }
    modeElement.textContent = mode;
  }

  // Função para atualizar estatísticas da sessão
  function updateKenAiSessionStats() {
    const statsElement = document.getElementById('kenAiSessionStats');
    const durationElement = document.getElementById('kenAiSessionDuration');

    if (statsElement) {
      const questions = kenAiInfoStats.questionCount;
      statsElement.textContent = `${questions} pergunta${questions !== 1 ? 's' : ''} • Online`;
    }

    if (durationElement) {
      const elapsed = Math.floor((Date.now() - kenAiInfoStats.sessionStartTime) / 1000);
      const minutes = Math.floor(elapsed / 60);
      const seconds = elapsed % 60;
      durationElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
  }

  // Função para incrementar contador de perguntas
  window.incrementKenAiQuestionCount = function() {
    kenAiInfoStats.questionCount++;
    updateKenAiSessionStats();
  };

  // Função para atualizar informações do modelo
  function updateKenAiModelInfo() {
    const modelElement = document.getElementById('kenAiCurrentModel');
    const badgeElement = document.getElementById('kenAiModelBadge');

    if (modelElement) {
      // Usar configuração atual do modelo
      const currentModel = localStorage.getItem('kenAiModel') || 'gemini-1.5-flash';
      let displayName = 'Gemini 2.5 Flash';
      let badge = '⚡ Balanceado';

      if (currentModel.includes('pro')) {
        displayName = 'Gemini 2.5 Pro';
        badge = '🧠 Avançado';
      } else if (currentModel.includes('flash')) {
        displayName = 'Gemini 2.5 Flash';
        badge = '⚡ Balanceado';
      }

      modelElement.textContent = displayName;
      if (badgeElement) {
        badgeElement.innerHTML = `<span>${badge}</span>`;
      }
    }
  }

  // Inicializar informações da seção ao carregar
  function initializeKenAiInfoSection() {
    // Atualizar informações do modelo
    updateKenAiModelInfo();

    // Atualizar dica inicial
    if (typeof window.refreshSmartTip === 'function') {
      window.refreshSmartTip();
    }

    // Configurar atualizações automáticas
    setInterval(updateKenAiSessionStats, 1000); // Atualizar stats a cada segundo
    setInterval(() => {
      if (typeof window.refreshSmartTip === 'function') {
        window.refreshSmartTip();
      }
    }, 15000); // Trocar dica a cada 15 segundos

    // Adicionar event listeners para os cards
    const infoCards = document.querySelectorAll('.ken-ai-info-card');
    infoCards.forEach(card => {
      card.addEventListener('click', function(e) {
        if (!e.target.closest('.ken-ai-tip-refresh') && !e.target.closest('.ken-ai-toggle-indicator')) {
          const cardType = this.classList[1] || 'info-card';
          console.log(`🎯 Card clicado: ${cardType}`);
        }
      });
    });

    console.log('✨ Seção de Informações Elaborada inicializada!');
  }

  // Executar inicialização após um delay para garantir que o DOM está pronto
  setTimeout(initializeKenAiInfoSection, 2000);

  // Expor ChatManager globalmente
  window.ChatManager = ChatManager;

  // Inicializar o painel na primeira execução
  setTimeout(() => {
    ChatManager.updatePanel();
  }, 1000);

  // Usar o novo sistema de gerenciamento
  function updateHistoryPanel() {
    ChatManager.updatePanel();
  }



  // Nova função para iniciar conversa
  window.startNewChat = function () {
    console.log('Iniciando nova conversa...');

    // Salvar conversa atual se houver mensagens
    if (chatHistory.length > 0) {
      // Salvar todas as mensagens da conversa atual
      chatHistory.forEach(msg => {
        if (msg.parts && msg.parts[0] && msg.parts[0].text) {
          ChatManager.saveMessage(msg.role, msg.parts[0].text);
        }
      });
    }

    // Criar nova conversa
    ChatManager.createChat();

    // Limpar interface
    ChatManager.clearChatInterface();

    // 🧠 Limpar memória temporária para novo chat
    if (typeof TemporaryMemory !== 'undefined') {
      TemporaryMemory.clearMemory();
    }

    showAiStatus('Nova conversa iniciada!');
  };





  // Função antiga removida - usando ChatManager.deleteChat()

  // Expor funções globalmente para uso por outros scripts
  window.kenAI = window.kenAI || {};
  window.kenAI.captureSelectionContext = captureSelectionContext;
  window.kenAI.capturePageContext = capturePageContext;
  window.kenAI.openMiniKenWithContext = openMiniKenWithContext;
  window.kenAI.enhancePromptWithContext = enhancePromptWithContext;
  window.kenAI.updateHistoryPanel = updateHistoryPanel;

  // Função para uso por outros desenvolvedores
  window.openKenChatWithSelection = async function () {
    const selection = window.getSelection();
    const selectedText = selection ? selection.toString().trim() : '';

    if (selectedText) {
      await openMiniKenWithContext(selectedText);
      return true;
    } else {
      // Se não houver seleção, tenta capturar contexto da página
      const context = await capturePageContext();
      if (context) {
        window.miniKenContext = context;
        openMiniKenChat('Analise esta página');
        return true;
      }
    }

    return false;
  };
})();
